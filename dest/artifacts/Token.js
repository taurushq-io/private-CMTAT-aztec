/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, loadContractArtifact, } from '@aztec/aztec.js';
import TokenContractArtifactJson from '../../target/token_contract-Token.json' assert { type: 'json' };
export const TokenContractArtifact = loadContractArtifact(TokenContractArtifactJson);
/**
 * Type-safe interface for contract Token;
 */
export class TokenContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TokenContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, admin) {
        return new DeployMethod(Fr.ZERO, wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet, admin) {
        return new DeployMethod(publicKeysHash, wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenContractArtifact;
    }
    static get storage() {
        return {
            admin: {
                slot: new Fr(1n),
                typ: "PublicMutable<AztecAddress, Context>",
            },
            minters: {
                slot: new Fr(2n),
                typ: "Map<AztecAddress, PublicMutable<bool, Context>, Context>",
            },
            balances: {
                slot: new Fr(3n),
                typ: "BalancesMap<TokenNote, Context>",
            },
            total_supply: {
                slot: new Fr(4n),
                typ: "PublicMutable<U128, Context>",
            },
            pending_shields: {
                slot: new Fr(5n),
                typ: "PrivateSet<TransparentNote, Context>",
            },
            public_balances: {
                slot: new Fr(6n),
                typ: "Map<AztecAddress, PublicMutable<U128, Context>, Context>",
            },
            symbol: {
                slot: new Fr(7n),
                typ: "SharedImmutable<FieldCompressedString, Context>",
            },
            name: {
                slot: new Fr(8n),
                typ: "SharedImmutable<FieldCompressedString, Context>",
            },
            decimals: {
                slot: new Fr(9n),
                typ: "SharedImmutable<u8, Context>",
            }
        };
    }
    static get notes() {
        return {
            TokenNote: {
                id: new Fr(8411110710111078111116101n),
            },
            TransparentNote: {
                id: new Fr(84114971101151129711410111011678111116101n),
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJ0aWZhY3RzL1Rva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUlaLEVBQUUsRUFFRixvQkFBb0IsR0FNckIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLHlCQUF5QixNQUFNLHdDQUF3QyxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3ZHLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLG9CQUFvQixDQUFDLHlCQUFpRCxDQUFDLENBQUM7QUFFN0c7O0dBRUc7QUFDSCxNQUFNLE9BQU8sYUFBYyxTQUFRLFlBQVk7SUFFN0MsWUFDRSxRQUFxQyxFQUNyQyxNQUFjO1FBRWQsS0FBSyxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBSUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDcEIsT0FBcUIsRUFDckIsTUFBYztRQUVkLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQTJCLENBQUM7SUFDeEYsQ0FBQztJQUdEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsS0FBdUI7UUFDMUQsT0FBTyxJQUFJLFlBQVksQ0FBZ0IsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25JLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxjQUFrQixF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