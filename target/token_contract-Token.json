{
  "transpiled": true,
  "noir_version": "0.38.0+c807678263164209f62fa5c9bf19f468cace1f98-aarch64",
  "name": "Token",
  "functions": [
    {
      "name": "_transfer_internal",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "internal"
      ],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11332022755610627056": {
            "error_kind": "string",
            "string": "Frozen: Sender"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "13107192312614724151": {
            "error_kind": "string",
            "string": "Return notes not sorted in descending order."
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "160132460631502150": {
            "error_kind": "string",
            "string": "The recipient is not in the whitelist"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16720115783840251250": {
            "error_kind": "string",
            "string": "Function _transfer_internal can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4883737824531747266": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6608029729291342180": {
            "error_kind": "string",
            "string": "The recipient is in the blacklist"
          },
          "685724590584320826": {
            "error_kind": "string",
            "string": "The sender is in the blacklist"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7273637037612779300": {
            "error_kind": "string",
            "string": "not implemented."
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8193989641828211937": {
            "error_kind": "string",
            "string": "ciphertext length mismatch"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8744712499843048689": {
            "error_kind": "string",
            "string": "The sender is not in the whitelist"
          },
          "8961250494313784519": {
            "error_kind": "string",
            "string": "Frozen: Recipient"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_storage_hints",
        "get_public_storage_hints",
        "get_public_storage_hints",
        "get_notes_internal",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "get_random_bytes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_app_tag_bytes_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "build_msg_block",
        "emit_encrypted_note_log_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "pack_returns_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZjbbtswDIbfxde+EA+SyL7KMBRpmxYBgqRI0wFD0XefnUVyDKvxmMRdN+QmiGx+9C9KlCi9VQ/zu9en28Xqcf1S3Xx7q5br+9l2sV41rbcKaPfs5Xm2apsv29lmW91AUFdX89VD8zc6915Xj4vlvLoJ+l4PjFFI9sYooTMGdAVr8qB7a/KKI9aKAntrRfXZGqMUrEEkJNnqOmuikjFgEgLQuuuMv9cV8DUuxbj4a1yKcQlnx4UB/d6YIUDXUye7L8TJvyBnfwHIcTIm0oPRKsVfhZMelYA9PYV5g+JjmjjYDN1Av/7b+tEV9YMqJk3omI/3wKcZHUYMrYnFnBPLx7HEYsySmeGcxEK4BmUYFPzKQflLSzDSNSjDoPAfBCXEkR0bNOSFCw/3jVJfvaT1NkCnHZr8aPX4S+hBgqxH3YgeCJxHFUKIOFh3wxfUFD9fUxSGvFNKkIEm+YKa9MKa2PsRTcRpflNvz9/Nbyrv4eg0dwNhbBGKlAuFSILn5BvBRfTkaEamODZmGjBXXBp69ifVRYT/QR/o0/uADomSJsfAfU1N626zWC4XT7e9GwHX/vAHBYbLancVcX+uMZ0C8SmQPwUKZqhpQWtbLkIDpY1X3GHiyccl2nGE7AjbEW9Hgh0p7l+SSxVhGSBiR9SMlBfo4wjYEbQjZEfYjng7EuxIefQlnZZEtYcUFq+Yl1OlrqZtjk2te5nWvU7qnt257imkaweKPHAP07rHad3TtO55Wvd+WvdhWvdxWvdyQfcyTCud1L1307ovZq1iOiTqYbn3e5H1aEfIjrAd8XYk2JFoR8SMBDUj0dmR4uhjvl3GgxPsfsJEtCNkR9iOeDsS7Ei0I2JH1IxIcfSPFgQCdgTtCNkRtiPejgQ7Eu2I2BE1Ik0Lr6fnw9Mz7U7PxZTw3V2GP9w6tQGb5o/ZZjG7W87bO4n27evqPl1RNM3tz+f0Jl1iPG/W9/OH1828vc7objLaqJKr2TV9gFYIS+0pn+x3jwLWIbbv20RUX2vMQ/kxThlHqlEa0Y3wXw==",
      "brillig_names": [
        "pack_arguments_oracle_wrapper",
        "call_private_function_internal",
        "pack_arguments_oracle_wrapper",
        "enqueue_public_function_call_internal"
      ],
      "verification_key": ""
    },
    {
      "name": "public_get_pause",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6876750609332359971": {
            "error_kind": "string",
            "string": "Function public_get_pause can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAQC0EAAGAQycCBIBDAAImAgQBAzoNAAIAAyQAAAF7HgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGkABCQAAAGkHgIKAAImAgABAwo4AgMEIwIAAACFAAQkAAABtiwIAQImAgQCBAAQAQQBJgMEAQIAKAICBCwMBAUmAgAABiwOBgUsDQIEACgEAgQsDgQCLAgBBAAAAQIBLA4CBCYCBAACJgIEAQUsDAIBIgAAANcKOAECBiMCAAABBgAGIgAAAOksDQQBACgBAgQAOAQCBSwNBQMcDAEDAhwMAAIBJSwNBAYcDAABBwA4AwcILgwACAAHJgIEAQkMOAEJCiMCAAABMQAKJAAAAcgtBAAGgAMnAAQAAoAEJAAAAdotCIAFAAgAKAgCCQA4CQEKLA4HCgA4AQUGDjgBBgcjAgAAAW4AByQAAAJgLA4IBCwMBgEiAAAA1ycABHgAgAQNAAAAgASAAyMAAAABo4ADKQEF96Hzr6Wt1MoAATsBAQIlKQEFvh4//z6k9voAATsBAQIlKQEFX28gPp400yMAATsBAQIlKQEF6J0J/qERLQ4AATsBAQIlLQGAA4AGCwCABgACgAcjAAAAAfWAByIAAAIALQCAA4AFIgAAAl8tAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAAAAAlOADC0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAACIicBBAABgAUiAAACXyUpAQVFp8pxGUHkFQABOwEBAiUtABjKGMo=",
      "debug_symbols": "5ZrdjqowEMffhWsuptOvqa9ystmg4oaEoEE9yYnx3U8xUl0hNMfDbtzODaFkysyvf0o7bU/ZulweP96rZrPdZ4tfp6zeropDtW186XTOs2Vb1XX18X7/OIPuYtzFfr8rmq64PxTtIVsI4yDPymbtby2Af8OmqstsYdw5HxoD6N4YUAdjgTRirSTR1VpJZ2/WMPZuErJ/NwktPlm/5ZlVM0RP2Bv78L81+jnaXonQ9ibW9kLLPnqhnYpE75QwV2untHuMnuys0Qv4HL334PCrPfhP9+td6P92YWxwYayOfXUOyPa6+YgedfOP/jGgSyX9RCV8xhPSE5WkHKukUfSVNKqYjohBx3tjGu1JQskguqFbG5MesbYYepJFGdPPEPV/DX9rBvpJy4dVISNWRrpqRrpqRroawYjV8GG1wIhVMWJ1fFiJ0RyRGI05js9cAsfTsB/K6kS/8uJv5YA1qZzOkQusTg9ZX7y/ggisGiOs0ot5tZYO8T6QDvXVU7o5Ufmoql984v80qoQB6ovP+2dENSkNrZHhJqV0zkLYeLCghsONTShNt4AwyZqUrmBvrCZi7Vf6Tdjv8YXBBhRSUv17eoqVVEoUYU0qJZpmlZDS0lSMNan0b5pVpLSUHGMlPqzIJ62XmNLyaoRVKkasjHRVjPqrYvQf1ox0TWpbOsaa0rb0FOvZF38XbVUs6/J6znVzbFZ3x14Pf3blwwnYXbtdletjW3ZnYW/HYLscgigXQG/dkT1fsjK3l0L36ViXk/AOvdO/",
      "brillig_names": [
        "public_get_pause"
      ]
    },
    {
      "name": "get_debt_base",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 12,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASATwABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAYgAoAQICJwIEgEMAAyYCBAwELQQAAoADLQQAA4AELQQABIAFJAAAAkonAgSAQwACJgIEDAM6DQACAAMkAAACkB4CAAACHgIAAAMyOAACAAMABCYCAQECIwIAAACLAAQkAAACuSYCAAACLAgBAyYCBA0EABABBAEmAwQBAwAoAwIEJgIEDAUAOAUEBSwMBAYMOAYFBxYMBwcjAgAAANUABywOAgYAKAYCBiIAAAC2LA0DBAAoBAIELA4EAywIAQQAAAECASwOAwQmAgAIAiYCBAADJgIEDAUmAgQBBiwMAwEiAAABDAw4AQUHIwIAAAHVAAciAAABHiwNBAEAKAECBAA4BAMFLA0FAgAoAQIEADgEBgUsDQUDJgIEAgQAKAECBgA4BgQHLA0HBSwIAQEmAgQNBAAQAQQBJgMEAQEAKAECBCwMBAYsDgIGACgGAgYsDgMGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGACgGAgYsDgUGJSwNBAccDAABCAA4AggJLgwACQAIJgIEDAoMOAEKCyMCAAACAAALJAAAAsstBAAHgAMnAAQADYAEJAAAAt0tCIAFAAkAKAkCCgA4CgELLA4ICwA4AQYHDjgBBwgjAgAAAj0ACCQAAANjLA4JBCwMBwEiAAABDAEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAAAAAo+ACi0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAACXiUnAAR4AIAEDQAAAIAEgAMjAAAAAriAAykBBfeh86+lrdTKAAE7AQECJSkBBb4eP/8+pPb6AAE7AQECJSkBBeidCf6hES0OAAE7AQECJS0BgAOABgsAgAYAAoAHIwAAAAL4gAciAAADAy0AgAOABSIAAANiLQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwAAAANWgAwtAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAAyUnAQQAAYAFIgAAA2IlKQEFRafKcRlB5BUAATsBAQIlLQAYyhjK",
      "debug_symbols": "5ZvdiqswEMffxWsvZiZfk77KYVn6YReh2GLbA4fSdz+xqO2uYlhwF8ncFFPGZH75O4kZk1u2KzbXj/ey2h/P2erPLTsct+tLeaxC6XbPs01dHg7lx/vr3xk0PwjqccP5tK6a8vmyri/ZCq2HPCuqXbh0AKGKfXkospX193xoDGA6YyDTGyPxiLVWzK21Vt49rWGsbkbV1c1o8JP1Wx7c5xncZ+qMg/+/6j7O0fsa+963sd5Hozr30Xgdcd9rtK2118YP3Cec1X2Ez+4/mrA/3oTSP9+EH2vCBdv2LoeaI01YxjF/2I4Zo1a9P/ZZM7IZsXbUy+xIxZ5py9w90+HSDh4KrQWxshxWowSxCtLVCtLVCtLVCdLVCdKVSRCrk8PqURCrnPdhAjnjMIGccZhQkK4oZxwmkjO/0nh2JU1WBYJYjRzWpNZ0HrtcdLhUA1ZOKV49+57VmwGrX3i8AvashiKsxOxaa2JvXx15oC48XOdDVSBGVQU6IVRPXbCSVzxAXfh6bkZUlKMqLnxm/Q5qGHi6uUkBmq+otPDF3JyoclRVYlTVNqWM2vRbsE7py4aDfoeIA22GrAmtbhwQTLFyUrqCe7LaiHVAtP2+nFDAYd8kFd+TKz/ttSBWOboaSCmLHGHFlLLIMdakMnDTrJRSZjXCmlTGPMYqJ7NqdEo7DWKsgnQ1guLVCBqHrSBd0/qaN82a1A7NKdZ7KP5d1+V6cyjaI0n7a7V9OaF0+XcqvhxWOtXHbbG71kVzbOl5YqmJBdSQo4XQh00PIrocyb01x4GaInGOSjXFZp5DpUPRBh+CH/8B",
      "brillig_names": [
        "get_debt_base"
      ]
    },
    {
      "name": "transfer_batch",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "accounts",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZhtbxoxDMe/y72+F/FDErtfZZoq2tIKCUFF6aQJ9bsvx0iAXQYycB2deFM1nH++/zl2nGTVPI0f3l/uJ7Pn+Vtz923VTOePo+VkPkujVQO0/u3tdTTrhm/L0WLZ3EFQ1zbj2VP6Nzr30TbPk+m4uQv60faMUUg2xihhawzoKtbkQTfW5BWPWCsyb6wVfSzWGKViDYyYZTNDsSaqGQNmIQCdu63x97YBvsWlGhd/i0s1LuHK4yJQ4qL+WFxEQpatzp8Vl3iLSzUucnZcGNBvjBnCNnvByfoNOvQb0J39BiCX6xWIdGe2avFX4axHJeCenkreoPiYEwfT1PX0wxfXj1X9qLEkXpInh7/A54wOfNjwiyzESNcclH+02iDfgtIPij8eFIBwpDmBhlKjuLtE1r7VS15aAmy1Q6qPTk+4hB4kKHrUHdEDgcusQggRe0tMvEJN8vmaojCUpiBBepr0+jSRu7Am9v6IJuKc37TX3tb5TfV2S+BLvyV08bCeSKUnRhI8p94IL6JHc+eKTPHYnGnA4lzDnv1JWwCi/+Ab+NO/AR0SZU2Ogfc1pdHDYjKdTl7u9y5LXPeH62kDrhTjevO3n2tMp0B8CuRPgYIZSiPobOub6EB5jRG3W3gH9q2HEbIjbEe8HQl2pNpTpWxVhKWHiB1RM1JvGIcRsCNoR8iOsB3xdiTYkfrsSz4tieoeUlm8YllOlbZ72nRs6tzLsO51UPfsznVPIZ+wKXLPPQzrHod1T8O652Hd+2Hdh2Hdx2HdywXdS7+sdFD33g3rvlq1ivmQqLvbvd+LrEc7QnaE7Yi3I8GORDsiZiSoGYnOjlRnH8tFKob4Z8JEtCNkR9iOeDsS7Ei0I2JH1IxIdfYPbggE7AjaEbIjbEe8HQl2JNoRsSNqRNIIb6fn3dMzrU/P1ZLw27sMv9s6NYFp+GO0mIwepuPuTqJ7+j57zFcUabj8+Zqf5EuM18X8cfz0vhh31xnbm4wuquRadukboBPC0noqJ/v1TwHbELvnXSEmWcplKv+OU8GRWpQkOgn/BQ==",
      "brillig_names": [
        "pack_arguments_oracle_wrapper",
        "call_private_function_internal",
        "pack_arguments_oracle_wrapper",
        "enqueue_public_function_call_internal"
      ],
      "verification_key": ""
    },
    {
      "name": "_transfer",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "11282533039261485053": {
            "error_kind": "string",
            "string": "Error: token contract is paused"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16807553578335744187": {
            "error_kind": "string",
            "string": "Function _transfer can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "JgAEAQInAASAQwABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAOicCBIBDAAEmAgQAAjoNAAEAAiQAAAGWHgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGMABCQAAAG/HgIBAAIeAgAAAwo4AgMEIwIAAAB/AAQkAAAB0SwIAQImAgQCAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCAAECJgIEAQQmAgQABSwMBQEiAAAA1go4AQUGIwIAAAEhAAYiAAAA6CwNAwEAKAECAwA4AwUELA0EAhwMAQIDHAwAAwEcDAEBAiYCAQABCjgCAQMjAgAAASAAAyQAAAHjJSwNAwYcDAABBwA4AgcILgwACAAHJgIEAQkMOAEJCiMCAAABTAAKJAAAAfUtBAAGgAMnAAQAAoAEJAAAAgctCIAFAAgAKAgCCQA4CQEKLA4HCgA4AQQGDjgBBgcjAgAAAYkAByQAAAKNLA4IAywMBgEiAAAA1icABHgAgAQNAAAAgASAAyMAAAABvoADKQEF96Hzr6Wt1MoAATsBAQIlKQEFvh4//z6k9voAATsBAQIlKQEF6UBs7eQMMLsAATsBAQIlKQEFnJOcBZPKB/0AATsBAQIlKQEF6J0J/qERLQ4AATsBAQIlLQGAA4AGCwCABgACgAcjAAAAAiKAByIAAAItLQCAA4AFIgAAAowtAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAAAAAoCADC0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAACTycBBAABgAUiAAACjCUpAQVFp8pxGUHkFQABOwEBAiUtABjKGMo=",
      "debug_symbols": "5ZpdjuIwDIDv0uc+JHF+HK6yGo0KlFGlqqACK60Qd99kRVOgHaLtdEZV/AIJcmp/sUPtJJdsW67PH+9Vs9sfs9WvS1bvN8Wp2jeud7nm2bqt6rr6eL//OWP+Q8M/+eOhaHz3eCraU7bi2rI8K5utaxrG3BN2VV1mK22v+VCYMdUJM6GCMBc4Ii0B8SYtwZpemo09Gzl0z0au+IP0W55pnMF6FJ2wM/8nrTdzzL3kYe51bO65gs56rqyMWG8l1zdpK5V9th75rNZz9mi916C/W4OV367BflmDVAq6mFOax2JOsC6eUXDz7DVn7tcNmnMRuK//NMgP4nLCICGmDDLjg0xYHK4tdSRIhAhBImSvA0dXKZcQIkpjP2GoRqSNCIYYATFnaMTOGa6pB84ATopWU6KVpHwrSflWkfKtUpRoNSNFK0nRIiXazwqeRGlJZY5I6g2ElLILwdP6T7a8q5BdEwa0INKiRRtorRrSLj6SGQ+0SkRowTn0Jg1WiHtDPOzyS6A5YSl5Vi0+SZ4MC2wAu/j6Z0bY5Zc/c8J+6ll1B4vXx01KYdi0YdO0IUwbZillETapWsewsIlvmBxmETapOtYwwV7QAkvMt8z0tDoi7Q65dDhEdB0+nJ3E1vnL/BlSq40itKR8m9jZX4SWVN0LkNbOa4RWpnViEqFdfjE4K21ae5ERWp3WPnOMlpRvDal1a0j9JyMp3yKp7CKtvY6XtFfX/V20VbGuy9vl6t252dzdtT79OZRP164P7X5Tbs9t6S9g93ev/YqwOncAb/4epOsZzBF8x7/kLORWOYVO6V8=",
      "brillig_names": [
        "_transfer"
      ]
    },
    {
      "name": "set_credit_events",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "credit_events",
            "type": {
              "fields": [
                {
                  "name": "flagDefault",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "flagRedeemed",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "rating",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::extensions::creditEventsModule::CreditEventsStruct"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_credit_events"
      ]
    },
    {
      "name": "add_to_list",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "newListAddress",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "userFlag",
            "type": {
              "fields": [
                {
                  "name": "is_blacklisted",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_whitelisted",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_in_sanction_list",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::validationModule::UserFlags"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "add_to_list"
      ]
    },
    {
      "name": "total_supply",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAQC0EAAGAQycCBIBDAAImAgQBAzoNAAIAAyQAAAHZHgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGkABCQAAAICHgIKAAImAgABAwo4AgMEIwIAAACFAAQkAAACFCYCAAACLAgBAyYCBAIEABABBAEmAwQBAwAoAwIELAwEBSwOAgUsDQMEACgEAgQsDgQDLAgBBAAAAQIBLA4DBCYCAAsCJgIEAAMmAgQBBSwMAwEiAAAA3Ao4AQMGIwIAAAFkAAYiAAAA7iwNBAEAKAECBAA4BAMFLA0FAhwMAAIBKgIA/////////////////////wADDjgBAwQjAgAAASwABCQAAAImHAwFAgMcDAADAQI4AgEDKgIAAAAAAAAAAAEAAAAAAAAAAAACCDgDAgQEOAQCAwA4AQMCLAwCASUsDQQGHAwAAQcAOAIHCC4MAAgAByYCBAEJDDgBCQojAgAAAY8ACiQAAAI4LQQABoADJwAEAAKABCQAAAJKLQiABQAIACgIAgkAOAkBCiwOBwoAOAEFBg44AQYHIwIAAAHMAAckAAAC0CwOCAQsDAYBIgAAANwnAAR4AIAEDQAAAIAEgAMjAAAAAgGAAykBBfeh86+lrdTKAAE7AQECJSkBBb4eP/8+pPb6AAE7AQECJSkBBYU3TsoCk3ukAAE7AQECJSkBBVoC5Bu1HqmfAAE7AQECJSkBBeidCf6hES0OAAE7AQECJS0BgAOABgsAgAYAAoAHIwAAAAJlgAciAAACcC0AgAOABSIAAALPLQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwAAAALDgAwtAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAApInAQQAAYAFIgAAAs8lKQEFRafKcRlB5BUAATsBAQIlLQAYyhjK",
      "debug_symbols": "7ZrbjtowEIbfJddceOyZsWdfpVqtOIRVJASIQ6UK8e51KHGARLFK2WKjvUFx9Cfz+bdjbI8Pxayc7D8/quV8tS3efhyKxWo63lWrpS8djqNisqkWi+rz4/J2oeoflpN+ux4v6+J2N97sijdgUaOiXM78pVXKv2FeLcrijeU46oqVokasNAUxaNejRuPcWY1GbKtWfe92YJp3OyC4Ur+PCosPoHe6EXv8/0r/CO8Rgvcc8x7INPRAghF6QeCzWpDklt7Zh9KDuqb3EUR/dQTfdb8+BP1zCLYhBFuK9TpRzjbt5olu283f+kug00N0x0P6nkja3fGQMX0PuXZkcsrE2hHQhHZk19rmqEdtdfg4rDaxJmHnGhB/yZ0mMS5rfNR549us8Slv9ylv9zlv95mzxrcqb3zMG1+yxnd5Txpc3gOnZD1wap34yCPQLGv9pengpz7jFCcBX6iD/4QZp4KATzqCr8HgWa19mKA2Wv/Bt1njU97uEyeOD9Ti4xV+z44UUvOhI9q2smz7xNzsDKC0Us0nWxi+bemxxaXe2Z9kS+pD2HNsEfq2pWuLUeqVbKHwbn8pl7ac6vpSXWC4rvBa7RrSI0gX6qaur9WuJnyuROa2rualpkjDdcX4vOdiEtlbV2RushN+GKROBH5ABBqKQIlv4w2vRg2nvZi2KuRxrULq4lPi+FoN4Se+ierTfbbF54japzc5JLl9AbrVTf1bGdz6MA7yxs/bfcG88RPfsR/GR5X2QBvDh8S3vGP4iSccIvg68XRPDD/rHXtM/YRODD/vvp/6CZ0Yft7uU95/W4mvzgbxj774c7ypxpNFeT4MPd8vpxdno3e/1uXNMen1ZjUtZ/tNWR+Ybs9K1zaAMiPQ5r0+2OmLPkcsqi7Uk3KBkRgf0Uf9DQ==",
      "brillig_names": [
        "total_supply"
      ]
    },
    {
      "name": "has_role",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "role",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "account",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "has_role"
      ]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZbdboJAEIXfZa+5mL9dZn2VpjGoaEgIGMQmjfHdC4YVWjf1wrRpI3fM7sfMmbM7hJPZ5KvjbllU2/pgFi8nU9brrC3qqotOBvmydthnVR8e2qxpzQKdh8Tk1aZ7TAHOidkWZW4Wzp+TG5iUdYBJ3QgjQYRmi36g2Xq6Q3tSHGhP3l5pSjVCo6oLsj2MNHMMRgpCEPt0I/yaGJTZl6gvdvYl6oubfYn6kj7siyDZARZ0OHYKeqmgP17BP1wBGSTAzH5yWjH/vUrQ49XRJz2Re0Nq03BxqDu6r/oJ/rl+jOoXthw0iYDcmS4Adx0vwMkM9MNzg6tKcEfVyu8NDNEzNcvP1KzEmxWUsVl23zfrgMKH3AHrw6Nl/5qmLlo1RVkWu+X0R7VbfsuaIluV+RBuj9V6stu+78NOeH/f1Ot8c2zyPtNlr0v/AQ==",
      "brillig_names": [],
      "verification_key": ""
    },
    {
      "name": "grant_role",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "role",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "account",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgAEAQInAASARQABJgAEAwAmAgQCAyYCBAAEHxgABAADgEMtCIBDAAEtCIBEAAIkAAAARicCBIBFAAEmAgQAAjoNAAEAAiQAAAO5LAgBBAAAAQIBJgIBAAUsDgUELAgBBgAAAQIBJgIAAAcsDgcGLAgBCAAAAQIBJgIAAgksDgkIHgIAAAkeAgAACjI4AAkACgALJgIBAQkjAgAAAKUACyQAAAPiJgIABgosCAELJgIEAwwAEAEMASYDBAELACgLAgwsDAwNLA4KDQAoDQINLA4BDSYCBA4NLAgADiwMCw8AEAANACQAAAP0LAQAACwMDwwKOAwHDQo4DQUMIwIAAAEJAAwkAAAGOiYCAAEMLAgBDSYCBAMOABABDgEmAwQBDQAoDQIOLAwODywOCg8AKA8CDywODA8mAgQQDywIABAsDA0RABAADwAkAAAD9CwEAAAsDBEOCjgOBw0KOA0FDyMCAAABbQAPJAAABjomAgA2DSYCBBQTLAgAFCwMBBUsDAYWLAwIFywMDhgsDA0ZLAwCGgAQABMAJAAABkwsBAAALAwVDywMFhAsDBcRLAwYEiwIAQ4mAgQCEwAQARMBJgMEAQ4AKA4CEywMExQsDgcULA0OEwAoEwITLA4TDiwIARMAAAECASwODhMmAgQBDiYCBAAULAwUAyIAAAH+CjgDFA8jAgAAA0QADyIAAAIQLA0TDwAoDwIRADgRFBIsDRIQHAwBEBEcDAARDxwMAQ8QIwIAAAI+ABAkAAAH7iYCBBUPLAgAFSwMCxYAEAAPACQAAAP0LAQAACwMFgkKOAkHAQo4AQUHIwIAAAJ0AAckAAAGOiYCBBULLAgAFSwMBBYsDAYXLAwIGCwMCRksDA0aLAwCGwAQAAsAJAAABkwsBAAALAwWASwMFwUsDBgHLAwZCiwIAQImAgQCBAAQAQQBJgMEAQIAKAICBCwMBAYsDgwGLAwUAyIAAALcCjgDFAEjAgAAAu8AASIAAALuJRwMAAMBADgKAQQmAgQBBQw4AwUGIwIAAAMQAAYkAAAIAAAoAgIFADgFAwYsDQYBLwwAAQAEADgDDgEOOAMBBCMCAAADOwAEJAAACBIsDAEDIgAAAtwsDRMPHAwAAxAAOBIQES4MABEAECYCBAEVDDgDFRYjAgAAA28AFiQAAAgALQQAD4ADJwAEAAKABCQAAAgkLQiABQARACgRAhUAOBUDFiwOEBYAOAMODw44Aw8QIwIAAAOsABAkAAAIEiwOERMsDA8DIgAAAf4nAAR4AIAEDQAAAIAEgAMjAAAAA+GAAykBBfeh86+lrdTKAAE7AQECJSkBBb4eP/8+pPb6AAE7AQECJSQAAAO5JgIAAAMsCAEEJgIEBAUAEAEFASYDBAEEACgEAgUsDAUGLA4DBgAoBgIGLA4DBgAoBgIGLA4DBiwNBAUAKAUCBSwOBQQsDQQFACgFAgUsDgUELA0EBQAoBQIFLA4FBCwNBAUAKAUCBSwOBQQsCAEFAAABAgEsDgQFLAgBBCYCBAUGABABBgEmAwQBBAAoBAIGLAwGBywOAwcAKAcCBywOAwcAKAcCBywOAwcAKAcCByoCAAAAAAAAAAACAAAAAAAAAAAACCwOCAcsDQQGACgGAgYsDgYELAgBBgAAAQIBLA4EBiwIAQMAAAECASYCBAAELA4EAywIAQcAAAECASYCAQAILA4IByYCBAEJJgIEAgosDAQCIgAABRIMOAIKCyMCAAAFswALIgAABSQsDQcBCjgBCAIjAgAABT4AAiYCBAAJOwkBCSYCBAgBLAgACCwMBQksDAYKLAwDCywMBwwAEAABACQAAAiqLAQAACwNBQEsDQYCLA0DCCwOAQUsDgIGLA4IAyYCAQEDLA4DBwAoAgIFADgFBAYsDQYDLA0BBAIoBAIELA4EASwNAgECKAECASwOAQIsDAMBJQw4AgoLIwIAAAXFAAsiAAAGGiYCBAIMDDgCDA0jAgAABdwADSQAAAgAACgBAgwAOAwCDSwNDQsmAgQNDCwIAA0sDAUOLAwGDywMAxAsDAcRLAwLEgAQAAwAJAAACiMsBAAAIgAABhoAOAIJCw44AgsMIwIAAAYxAAwkAAAIEiwMCwIiAAAFEikBBQLcbieAdhKdAAE7AQECJSQAAAO5LAgBCyYCBAMMABABDAEmAwQBCwAoCwIMLAwMDSwOBA0AKA0CDSwOBg0mAgQODSwIAA4sDAsPABAADQAkAAAD9CwEAAAsDA8MJgIAKwQKOAUEBiYCAQAEJgIAAAsjAgAAB7EABiIAAAa6JgIANhAKOAUQESMCAAAHcAARIgAABtEmAgA5FAo4BRQVIwIAAAcvABUiAAAG6CYCADwUCjgFFBUjAgAABwMAFSYCBAAWOwkBFgo4DAsFCjgFBAsjAgAABxoACyQAAAY6LAwBECwMAhEsDAMSLAwMEyIAAAdbCjgMCwUKOAUECyMCAAAHRgALJAAABjosDAEQLAwCESwMAxIsDAwTIgAAB1ssDBAGLAwRDSwMEg4sDBMPIgAAB5wKOAwLBQo4BQQLIwIAAAeHAAskAAAGOiwMAQYsDAINLAwDDiwMDA8iAAAHnCwMBgcsDA0ILAwOCSwMDwoiAAAH3Qo4DAsFCjgFBAYjAgAAB8gABiQAAAY6LAwBBywMAggsDAMJLAwMCiIAAAfdLAwKBCwMBwEsDAgCLAwJAyUpAQWZMlPSpkBqRgABOwEBAiUpAQXonQn+oREtDgABOwEBAiUpAQVFp8pxGUHkFQABOwEBAiUtAYADgAYLAIAGAAKAByMAAAAIP4AHIgAACEotAIADgAUiAAAIqS0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAAAAInYAMLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAhsJwEEAAGABSIAAAipJSQAAAO5JgIEAwYmAgQAByYCBAEILAwHBSIAAAjHDDgFBgcjAgAACTQAByIAAAjZLA0BBSwNAwYsDQQHLA0CCCYCBAQJLAgBCiYCBAULABABCwEmAwQBCgAoCAILJgIEBAwAKAoCDT4PAAsADSwOBQEsDgoCLA4GAywOBwQsDQUBAigBAgEsDgEFJSwNAwcMOAUHCSMCAAAJSgAJIgAACgMsDQEHLA0CCSwNAwosDQQLLA0CDCYCBAQODDgFDg8jAgAACXUADyQAAAgAACgMAg4AOA4FDywNDw0sDQEMJgIEAw8MOAUPECMCAAAJngAQJAAACAAAKAwCDwA4DwUQLA0QDgA4DQ4MJgIEBA4MOAUODyMCAAAJyAAPJAAACAAtBAAJgAMnAAQABYAEJAAACCQtCIAFAA0AKA0CDgA4DgUPLA4MDywOBwEsDg0CLA4KAywOCwQiAAAKAwA4BQgHDjgFBwkjAgAAChoACSQAAAgSLAwHBSIAAAjHJAAAA7ksDQQGJgIBAAcKOAYHCCMCAAAKRwAIJgIEAAk7CQEJLA0DBiYCBAMHCjgGBwgmAgQBBiMCAAAK/gAIIgAACmcsDQEHLA0CCCwNAwksDQQKLA0DCyYCBAMNDDgLDQ4jAgAACpIADiQAAAgALQQAB4ADJwAEAASABCQAAAgkLQiABQAMACgMAg0AOA0LDiwOBQ4sDQwFACgFAgUsDgUMLA0IBQAoBQIFLA4FCAA4CQYFDjgJBQcjAgAACukAByQAAAgSLA4MASwOCAIsDgUDLA4KBCIAAAuLJgIECAcsCAAILAwBCSwMAgosDAMLLAwEDAAQAAcAJAAACKosBAAALA0BBywNAggsDQQJJgIEAAotBAAHgAMnAAQABIAEJAAACCQtCIAFAAsAKAsCDAA4DAoNLA4FDSwNCwUAKAUCBSwOBQssDQgFACgFAgUsDgUILA4LASwOCAIsDgYDLA4JBCIAAAuLJS0AGMoYyg==",
      "debug_symbols": "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",
      "brillig_names": [
        "grant_role"
      ]
    },
    {
      "name": "transfer_from",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7V3bbts4EP0XP/uBc+Fw2F9ZLIq0TYsAQVIk6QKLIv++UhJRTqLLcmLHYccvrRXPoXhGR5wjSqZ+b76df/n14/PF1ffr282nv35vLq+/nt1dXF91W783QA9/u/15dtVv3t6d3dxtPoHksN2cX33rPqYQ7reb7xeX55tPku+3r4JRSZ+CUWUMBgwT0RQhP0VTzLgSnZH5KTpjTCUak05EAyMO3WaGEk00FQw4dASgb24M/nu7AT7lZTIv8ZSXybzIB8+LQslLjmt5UZWh2znEN+UlnfIymRc95WUyL/nNeWHA+BTMIONZDUH7PWA4+B7gzXsACsM4BkR552hN5T8rD/3JKvisPxO6QY1pEA52h+5V/7Hx/k97GoqpEOg+pxUGoewEws75gl3/+n3wO+wjvsM+5B32MV0DSCCWfYjomqI0aAnPcRRgv8PX4TnGcUwSpOVw1UBP0aog7+cbUE+5mc1NPuVmLjcUGsgNh5KbyO/nIQj2kps8kuWAuJIbTlIqHmvIa+EipTMsL2rYhHsjHnRGDGte73iZx1Pmj5R5OmX+SJnnFjKfx9YT0UrmcxrtHIw9h25CpSccGyCcina6z6tSA+GxNyIJX15SkDjknP48zkkZykWs7nR+4KwOOedjc84al8O76ahhfmB3MiGkiVhJA9sU5Flsx5XDH8U18VCYUuKV2EbKKR/dvO/3CJXYl0eo53oMuxxDKFM7MWDaDe/7dAwjGYnHPlGG5XAMQcrMd4AcP+h1KPMplftKZTylcl+plKOkMpdLisiwYnEk4FDDJZDev/F+ACd3jGdsbOeICuO0M13ZMe5R2VueYnDHGNwxRneMyR1jdsc4umPszrdEd74lqjvG7jyXuPNc4s5ziTvPJe48l7A7xu48l7jzXOLOc4k7zyXuPFdy57mSO8+V3Hmu5M5zJXbH2J3nSu48V3LnuZI7z5XceS5157nUnedSd55L3XkuZXeM3Xkudee51J3nUneeS915ruzOc2V3niu781zZnefK7I6xO8+V3Xmu7M5zZXeeK7vzXBDcmS4I7lwXBHe2C4I73wWB/VF257wguLNeENx5r+4/f5T9uS/w577An/sCf+4L/Lkv8Oe+wJ/7An/uC/y5L/DnvsCf+0J/7gv9uS/0577Qn/tCf+4L/bkv9Oe+0OFCroAOV3IFavzNM0CNv3oGmliHfc8LRUMTS6DvnfRM7UxxlJ8GWSZd9iG8HNjKa/DmFkr/GFk51kvN5pZSd54V/R9ZwbxMFqG82gARd9/FNkU26lBIurFpjH18sQHMrYRe1yEkKB3KYaVD6+PM3JLlx+0UHKFTkssI3vWJV0ZwURhGNdntyuOhnlt6ux0C1DoBbp1AbICAUCGws6z9EwFpnUBqnYC2TiA3TiCG1gm0UIkXCbRQiRcJtFCJFwm0UIkXCbReiWPrlTi2Xolj65U4tl6JpfVKLK1XYmm9EkvrlVhar8TSeiWW1iuxtF6JpfVKLK1X4tR6JU6tV+LUeiVOrVfi1HolTkeoxKvPpyT5iJ3ad8XkGFc6Nb5Ykp49c/J06GYqoMYiD8qw8hhMovKkSuq6v9Kh5fuic4t3VnYoDzdTElNaO2xZsDzzk+VZvO3JnLn1ONsiAe9OAgPS0DgGBn7dqdqHth5AZAGxBRQtILGAkgWkFlA2gGZWR1sBgQVkUUS2KCJbFJEtisgWRWSLIrJFEdmgCAzBAgILCC0gsoDYAooWkFhAyQJSC8iiCLAoAiyKAIsiwKIIsCgCLIoAiyLAogiwKAIsikCLItCiCLQoAi2KQIsi0KIItCgCLYpAiyLQogiyKIIsiiCLIsiiCLIogiyKIIsiyKIIsiiCLIpgiyLYogi2KIItiuBqRXQbX24uLi8vfny+vP56dndxfXXbQ0P/z4zAupNpaA6F7l9cec8IbAnUbUEfOz0CCw0PZGvYvc7Xx9GgHkL1EK6HxHqI1EMmzzEtj7Ar6yuI1kNyNWR6vF2GQD0E6yFUD+F6SKyHSD1k+ujrMAeoOT+DTEyUpDJ3k8eTkhgemtfDNp8P2vz0+F7TPMnwUzBK/Kp5OGzzeNjm6bDN82Gbj4dtXg7bfDps87rH5vX1aZUP2nwMh21+8qzNOPxyKO9OLT8OstPP+i5DqB7C9ZBYD5F6SKqHaDVk+vmDRcj0Hf9lyOTRx/JrapT0UjDTd7WXIVQP4XpIrIdIPSTVQ7Qekqsh03fGFg3B9H2oZQjWQ6gewvWQWA+Rekiqh2g9JFdCui3sI6enBrX8Zl7TzgjQFcr+SibUQ6AegvUQqodwJaTboj5yZj4CQnnm4GHdieeX9TPzESsgtoCiBSTVoG6LT+nYTUd8mISZPEXiePs97jqwfgqp2/zn7Obi7MvleT931H/76+rrMJXUbd79+3P4Zphs+nlz/fX826+b837aaWfGqds34pbw735l5G6D0paxTBA9/ElwK6n/vj8xc9zmVEaEB3jaUipw3TIV4fdfd9NQHIavWbeRihDmv45l50hb1I5yR/s/",
      "brillig_names": [
        "pack_arguments_array_oracle_wrapper",
        "call_private_function_internal",
        "unpack_returns",
        "pack_arguments_oracle_wrapper",
        "pack_arguments_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": ""
    },
    {
      "name": "revoke_role",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "role",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "account",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7V3hbts4DH6X/O4PkaJEaa9yOAzd1hsKFO3QdQcchr37OUntpGfZWnmOQtn6MySrvvDTJ4qiJEv+ufty9+nH14/3j389fd99+OPn7uHp8+3L/dNj9+3nr5vdp+f7h4f7rx/P/3tn9v+wO5T//u32cf/1+8vt88vuA/hobnZ3j1+6j2xM9wt/3T/c7T74+OvPmx3H92MCCTACO9EKMPx+DBiUgCSWACQgQbsCGglIZOm9TXszLmyM6wsbdENhwJAoTTaE19JkI59Km9RvB7D9bwdw8Kb0nr6lBegH7At3/MvSX0J9gkF9n1MfnO3pg4uUoR8J/GvpSC6O6BMvSh/MW/p7Ew4vbsKby5tIdk0bIr2ibNw315wJZNe7KbI/tUWAVOHOcF8YCOYLg7Gn/hvOyDMnPah3CTzrLNb4Q0XZbKWitJWKxo1UNGylRcNWWjRupUVj2EZFMZ3rr7GivJGKpudUa6yo30hFcSMpIOJGhhfEjSQMaLfSonYrCQOpThi6pYe+ogicqyjCqTT5+Z+2FvsFCWttOC98kEV1enE1WVzzlpQsXvWIfj1ZlljUszzI4jI17eLbIIshm5ElDIJDOFsWThf2tg+i3VIlZwoT9xUECrnCC8byRdYWm96/rzc1vYvqHZveJfUOzb/L6t38u6jesfl3Wb1D07ug3naRzYCm9+/rzU3vknovsjXS9P59vX3Tu6Te2ObzZfWmpndRvdt8p6jetvl3Wb3bfKeo3tTmO3m9r7UbZKnNjhS3jmt9R3Hr+DYT0Nw6K9rnZju0ztnpp9eKrmmDeb6im2nRFU3BZisa7FYquqI0a7aicUWrv/MV3UowihsJRmQ2EozIrGgFZLaisJUWhY0ML4QbGV4INzK80Jq2G2YralcZjNiE3AIADYXBnwrDfll5VJpxuLqD0ebuKfEh9MvU3Uf/pvRB8lWGRdWSr2m1vxbJm5eXlnxN6/K1SN68vLTkfpXJtm7JV5n265Z8lRMQ1ZKv6YheLZKvcs1PteShJYnFJW9JYmHJHazy6YPrSh6hZ919tCPJscXy5SUPcZA8upHktsXy35HcwCC5w4zkbIb2gRNni3gUvEXysoK3hdvSgq/o3J4+wdGOBHdtOauw4M3Dywpez4JtMOeFD9yrWYYbc19kPSv20ywMgPN0LEBf2ILNPCZ/rYNfbpGnmFenyiKPPK9PFW6qjFWJ2FRJqNJ8ZayKN9BUSajiVqPKtQ7S+UVWeLeuYfPD/60hridzup6GobSGw8TJAtv/0rFWFx1WRYdAFx2ni05URcfpcmWny5W9Llf2XhUd1qUO6+rorKujB10dPajq6GzMFemE3Mq8xX6BGKw7e7AivTLfRa3X0ty1+q/Myrzl/re7j+FN6b0wELcqDMWeCDuDI2EWud+xTmFOHpMUZrMe4wwNwoyff2K7WY/JCdM8Ji0McRMmKYzDJkxamOYxaWF885gJYfxm8xhvT8JQpjQADGkPdEub40yZN+thM0IehNlsTMoIE5rHpIWJm52NzwsTDLVHE8ueWgnrvHXsqpLz6UkJNjQ6tRLWef/ZlSVHMyt58/LlJTd8ktxn80vjw0AFDIyaaE0vlKnj+FxY5yVvqiVf02tlKpG8HaErL3k7JlpacteSytKSr+lFI7VI3i7iKi05t/O5xSVvJ3RLSx6alxeXvMXy0pLHlrEUl7x5eWHJ4zrfGKNb8ra+Xlry9PAZcBAmIJ9W5XH/7PO4gWK/eUv27JSuTSluh+dscH+xyWzh03sr/Vk9u6J74ulBqAbiVCvxWCdxMKZSyTvm1WoO1Wqe3uWtgTlitcy5VuYWqmXua2VOlY79HfNqoyJVOxKl97SUMOf+gSPPMGauOSrOMveaR6J55pqj4ixz1hwV55lrnoTOM1cTFQ90gppQd6SjJpM+0IlqgtKRjppIs6cDRk0ie6SjJiYc6ajq6KBndn2ko0sd1KUO6lLHqhokwKpJcg90SNUgAaRrkHC6Bgmna5DwajLwA52gq7H0bDUd6eiKynq2hY50VKXu3UatLjqqxiwEVR0dQVVHR1QVlRGVqaMqDKKu5BStrjBIutQpvlZKJzrOjeiEwkNowP7Rms60FRc+cg96uQOfPcwUR4ugGG213G3pVa9Fuft6uYNRzD2Efj8RonFj7q5i7rFe7qg5zuS4c73creYYmeNecV+limMk1ax7xTHSVRwjXcUx0lccI33FfdVX3Fe54r7KmuerGe4BFa8TGOxPGaGxCe6KY2SOe6xY96h4rp3hTkZxHpnlrnhsynJXPDbluIPisSnLXfHYlONe/CDMsEzX7XWMlqWp9DSOhrOtSEgjOs7ooqNLHW910Qmq6LAudViXOqVzYjJDGCQYh8HSaW6GTgRddJwuOlETHWesLjqqXNmBKld24FXRQV3qWKOLjqq440iXOhRU0Uk/bguntwqACWf3waTfTu6GpOHsHYbW+FcT8eIm0o/FLmvi4rXwhi5v4vK1SK8JLGuCL24ifUnGsib8xU2k9+SXNeEub+LyTkuX73p0+Vq4y3e99O7r/lBLbwKB35g4wNIn/bOw9PVdeZiTwHgicmVhQQRLX6yShRHIYDJrjmSwKIL5dzdAwn95uMoOwtnTyCF5D2A3IPbe3sXj009HeGUUtDFidRoFUMYoGF6AkcHh0VRz9hh5IAkjQHWM1GmEThsjXqDVrLM9I+v4tKSavOOT7fBmMTr74W7QPvJhXXyCMn3eny5clE+0S/SxYE+RkeJQOnmvbZffweD+8fyOWDwyIlTHSJ1GzulihFNHJak3Edx/92Rx4ohcFxSH64mNd2MUS1ATOWkO5USoidRy2F0H4DBCTeWxGVSQoKay2AxKZItFtlhkK4hsBZGtKGqvKLFlDYpQXoICI0KRCCXpKXbiVpy5WGMxrbsBGnqyHaMmpqQZVPrhjiyKRChRvSbWOnIoL4iGlkGEEtkKJEJFCSqKbEWJLTJWhJoYKX08rbXhCDUxD8yhRLYm5lMZlDUilMgWiWxR3jdSKJFvOBKhRLa8JPeiiTlqDhUkqCDJ2GhiVpZDSWKUMyBCiWyBEaFIhJK0l0OJbzgr0tCKNBTNHJyoLztRhu0m+heeXsaCHsYolqCCyNZE/8qhnAgVBSg/McIiD/tSGMMYFSSoCe/temuPcjBmODF+5VBRgkpfz5JFsQSVvomv21Id2st7M0Z5CcqLbKWP5uVQTBJUMCIUS1DpY0xZVBCgeKJ/5VAiW4AilMSjGEGEciKUxA/Zkgg1oXwYxi82owyWJ+JGDiWyNRUB5lFTESCDciJUlKBYpOHEuEzDIR0ggjGKJaj0Q+RZlBOhogAVJqJNDiVRY2rfNIcS2UIQoZwIJVJ+Yk2fHA8oNmNUkKAmZtkZ1ES+kUN5CWpinS2HYgmKRbZYVK+JLCWHciJUlKCiyA+jxA/jxOr8fN4bJ2b0GdTEjD6HoveifnXf/r59vr/99HD3vcPs//jj8fPL/dPj69eXf771f/n0fP/wcP/147fnp893X3483318ePq8/9vOvP7zB0G8IRv/3L8vovvabczfdJvP+6/77mjR3FjEzmpn+V8=",
      "brillig_names": [
        "revoke_role"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "11282533039261485053": {
            "error_kind": "string",
            "string": "Error: token contract is paused"
          },
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "13380390304262695167": {
            "error_kind": "string",
            "string": "SharedImmutable already initialized"
          },
          "13425536882234742926": {
            "error_kind": "string",
            "string": "error: contract already paused"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "15055901490962513990": {
            "error_kind": "string",
            "string": "Function public_get_issuer can only be called statically"
          },
          "16260118954846068608": {
            "error_kind": "string",
            "string": "Function get_operations can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16807553578335744187": {
            "error_kind": "string",
            "string": "Function _transfer can only be called internally"
          },
          "16910372477825329883": {
            "error_kind": "string",
            "string": "error: address already freezed"
          },
          "16957488177269924912": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "17160554675662999463": {
            "error_kind": "string",
            "string": "Function get_frozen can only be called statically"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17984092444913392600": {
            "error_kind": "string",
            "string": "error: address already unfreezed"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5120381606281950993": {
            "error_kind": "string",
            "string": "error: contract already unpaused"
          },
          "5218808690258254125": {
            "error_kind": "string",
            "string": "Function _transferFrom can only be called internally"
          },
          "6034109891601213547": {
            "error_kind": "string",
            "string": "Renounce Role: Addresses do not match"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6876750609332359971": {
            "error_kind": "string",
            "string": "Function public_get_pause can only be called statically"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "84944219458093315": {
            "error_kind": "string",
            "string": "Function _mint can only be called internally"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/9VUyw6CMBBseURBOaiJ3kz8gyIYOJJ49x8akKMe8OKNT5eabbqpVRKlJkzSbEs3szNlW0oUKESPvAH9tGnIFdhBDCA6aN/tRgFr9hviQKs7JH/O0iQw+BtQ/5OfWtIvIPktnT+bAM+xVfzYi6w77UaIesKWZ/nPbHpe9fhc/MFnh32k1caghm+uIYci3RuYR4Y8iRlRd9prh/eV5YzJei7w++RVO67va/lrWIeafvmOFV/qrDMe1wmv+YFXVVrypcYv4KBzGnMvbGHe1wvY45yo3mjul/J0vZ0b0gNB8gCVxsvQjgYAAA==",
      "debug_symbols": "nZLNCoMwEITfZc8emtjEn1eRIlGjBEIiMRaK+O5dxRZbvCSXJRPmmz3sLNDJZh5qZXo7QVktoG0rvLIG1bIm0DiltRrq8zfctkHI7p9GYTY5eeE8lIwnIE0HJb8j3Sst8VmsjwQIDfSngf57oJ+F+ellfsFofhAFY+zLkIzuEIuBeAyUxUB5BJReHr7gJPtAPOW/0IryKZwSjZZHsfrZtKee+dco/yo3OtvKbnZyK9+pdzgr3EUpxmL0Gw==",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAQC0EAAGAQycCBIBDAAImAgQBAzoNAAIAAyQAAAF6HgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGkABCQAAAGjHgIKAAImAgABAwo4AgMEIwIAAACFAAQkAAABtSwIAQImAgQCAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCBAECJgIEAAQmAgAMBSwMBAEiAAAA3Ao4AQQGIwIAAAEFAAYiAAAA7iwNAwEAKAECAwA4AwQFLA0FAiwMAgElLA0DBhwMAAEHADgFBwguDAAIAAcmAgQBCQw4AQkKIwIAAAEwAAokAAABxy0EAAaAAycABAACgAQkAAAB2S0IgAUACAAoCAIJADgJAQosDgcKADgBAgYOOAEGByMCAAABbQAHJAAAAl8sDggDLAwGASIAAADcJwAEeACABA0AAACABIADIwAAAAGigAMpAQX3ofOvpa3UygABOwEBAiUpAQW+Hj//PqT2+gABOwEBAiUpAQXQTerPrIv9YwABOwEBAiUpAQXonQn+oREtDgABOwEBAiUtAYADgAYLAIAGAAKAByMAAAAB9IAHIgAAAf8tAIADgAUiAAACXi0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAAAACUoAMLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAIhJwEEAAGABSIAAAJeJSkBBUWnynEZQeQVAAE7AQECJS0AGMoYyg==",
      "debug_symbols": "1ZrdbuowDIDfJde9cH7t8CpH01SgTJWqggoc6Qjx7idlpHQUEY2xLb6p6sqJP9lNYic5iGU137+91u1qvRWzPwfRrBflrl63QTocCzHv6qap317HnwX0D+dP+ttN2fbidld2OzGTzkMhqnYZXhEg9LCqm0rMnD8WU2UAG5VB2UFZKrqhbTTRWdtojxdtuNU3SR37JmnlB+2XQqB5Aj2pqBzwf5T+Gb43cvC9S/leWh3ppfUmQe+NdGdtb6y/pid8Kr2Ej/TBglffbSH8ut9vwn7ZhMPBhEOb+us8EMa4BaLruIVPnwQ6NbIPNFKPWFL0QCOtbzVCa+LYRusoEUfEiwU/iiO5G9qohsGBSqdC4ojiRBBe3SQkGlnjG8Ubn7f3LW/vW97ed5I3vmONj8Ab3/DG96zxiXfSQLwnTs962VIq85nHywgSXvUEX1Pm+OQH/HHfZ/xfyDhBDvhWJfCNjxWYHVWE2th3eGQMbzl7PvdkLTFonc0aH2HY7kIw00GbebKGoOAufu7eB7zgu4R22AVyw15gECabk4pyHyv3VwjKvLBJ4Hve3veZVwb38TUY1vgy99w0gZ95YZPAV5kXNil81pWBzv0kIIXP2/u5nwSk8HnPPLmfBCTwHe9lK/Pq7C7+MYh/y64u5011vjOy2reL0RWS3b9NdXWbZNOtF9Vy31X9vZLLlZI+ikSFBHrpj7+DhLrAk9AntWFbjTAYDEb/Aw==",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "get_frozen",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17160554675662999463": {
            "error_kind": "string",
            "string": "Function get_frozen can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "user",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_frozen"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "error_types": {
          "13380390304262695167": {
            "error_kind": "string",
            "string": "SharedImmutable already initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "unfreeze",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17984092444913392600": {
            "error_kind": "string",
            "string": "error: address already unfreezed"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "user",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "value",
            "type": {
              "fields": [
                {
                  "name": "is_freezed",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::enforcementModule::FreezableFlag"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "unfreeze"
      ]
    },
    {
      "name": "private_get_issuer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3639093445553992230": {
            "error_kind": "string",
            "string": "Function private_get_issuer can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "pack_returns_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "_mint",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "11282533039261485053": {
            "error_kind": "string",
            "string": "Error: token contract is paused"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "84944219458093315": {
            "error_kind": "string",
            "string": "Function _mint can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "caller",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_mint"
      ]
    },
    {
      "name": "set_debt_base",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "debt_base_",
            "type": {
              "fields": [
                {
                  "name": "interestRate",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "parValue",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "guarantor",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "bondHolder",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "maturityDate",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "interestScheduleFormat",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "interestPaymentDate",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "dayCountConvention",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "businessDayConvention",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "publicHolidaysCalendar",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "issuanceDate",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                },
                {
                  "name": "couponFrequency",
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "compressed_string::field_compressed_string::FieldCompressedString"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::extensions::debtBaseModule::DebtBaseStruct"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "set_debt_base"
      ]
    },
    {
      "name": "_transferFrom",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "error_types": {
          "11282533039261485053": {
            "error_kind": "string",
            "string": "Error: token contract is paused"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5218808690258254125": {
            "error_kind": "string",
            "string": "Function _transferFrom can only be called internally"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "JgAEAQInAASAQwABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAOicCBIBDAAEmAgQAAjoNAAEAAiQAAAGWHgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGMABCQAAAG/HgIBAAIeAgAAAwo4AgMEIwIAAAB/AAQkAAAB0SwIAQImAgQCAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCAAECJgIEAQQmAgQABSwMBQEiAAAA1go4AQUGIwIAAAEhAAYiAAAA6CwNAwEAKAECAwA4AwUELA0EAhwMAQIDHAwAAwEcDAEBAiYCAQABCjgCAQMjAgAAASAAAyQAAAHjJSwNAwYcDAABBwA4AgcILgwACAAHJgIEAQkMOAEJCiMCAAABTAAKJAAAAfUtBAAGgAMnAAQAAoAEJAAAAgctCIAFAAgAKAgCCQA4CQEKLA4HCgA4AQQGDjgBBgcjAgAAAYkAByQAAAKNLA4IAywMBgEiAAAA1icABHgAgAQNAAAAgASAAyMAAAABvoADKQEF96Hzr6Wt1MoAATsBAQIlKQEFvh4//z6k9voAATsBAQIlKQEFSGzu2nWQmS0AATsBAQIlKQEFnJOcBZPKB/0AATsBAQIlKQEF6J0J/qERLQ4AATsBAQIlLQGAA4AGCwCABgACgAcjAAAAAiKAByIAAAItLQCAA4AFIgAAAowtAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAAAAAoCADC0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAACTycBBAABgAUiAAACjCUpAQVFp8pxGUHkFQABOwEBAiUtABjKGMo=",
      "debug_symbols": "5ZrbjuIwDED/pc99iONcHH5lNRpxKaNKVUEFVloh/n3TFb1AO0Tb6Yyq+AUacGqfOG7tJNdkl20uH+95uT+cktWva1Ictutzfih963pLk02VF0X+8d7/ORH1h8F/8qfjuqybp/O6OicrME6kSVbu/KUVwt9hnxdZsjLulg6FhdCNsJC6FQZJI9IKie7SCp3tpMXYvQmwuTeBhgfptzQxNIP1JBthb/5PWm/nGHsF7dib0NiDxsZ60E4FrHcKzF3aKe2erSeY1XoQj9bXGsx3a3Dq2zW4L2tQWmMz57SB0JyTopnPJME+e82b+3WD5gwC//WfBtWdQE3oJOWUTna8ExnV9DLUi6XxSSJlO0mk6nTQaJSCwnZGGeoGjPSItJVtlFqJIWcYosYZ/tIMnIHAitZwolWsfKtY+Vaz8q3WnGiNYEWrWNESJ9rPCp5IaVlljsTqDUScsgsJcT2THTQVsr/EAS3KuGjJtbROD2kXP5MFtLRaBmjRO/QujU7KviE17PJLoDlhOXlWLz5JngyLYgC7+PpnRtjllz9zwn7qWezBmtvjIqW0Ylq3adoIp3VznLIIF1WtY0W7iG+FGmYRLqo61gopXtCiiMy3wna0JiDtN7lMu4noGzAcncji/GX+jLHVRgFaVr6NbO8vQMuq7kWMa+U1QKvi2jEJ0C6/GJyVNq61yACtiWudOUTLyreWVdxaVs9kYuVbYpVdxLXW8ZL25pu/11W+3hTZ/XD1/lJue2etz3+O2dOx62N12Ga7S5XVB7C7s9d1RDiTeoC3+hykb1lKCetG/ZIDsP4/51V6tX8B",
      "brillig_names": [
        "_transferFrom"
      ]
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8770032609511613072": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "serialized_note",
            "type": {
              "kind": "array",
              "length": 7,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "compute_note_hash_and_optionally_a_nullifier"
      ]
    },
    {
      "name": "set_operations",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "operations",
            "type": {
              "fields": [
                {
                  "name": "operate_blacklist",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "operate_whitelist",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "operate_sanctionlist",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::validationModule::SetFlag"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "set_operations"
      ]
    },
    {
      "name": "get_operations",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16260118954846068608": {
            "error_kind": "string",
            "string": "Function get_operations can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_operations"
      ]
    },
    {
      "name": "mint_batch",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "accounts",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "array",
              "length": 1,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZjbbiIxDIbfZa65iA9x7L7KalXRllZICCpKV1pVfffNUDIDJQtrYKp21RtEiD/PH8dxxrw0d5Ob54fr6fx+8dRc/XhpZovb8Wq6mOfRSwO0/u3pcTxvh0+r8XLVXIFYGDWT+V3+mkJ4HTX309mkuRJ7He0Zo5JujFGlNwYMFWuKYBtrioZHrA0VNtaGFjtrTFqxBlUpsi301kQ1Y8AiBKB11xv/HDXA33GpxiV+x6UaFzk7LgwYN8YMAv1Kg66fkAZ/gp79BKDAxZjItnarFn9TLnpMBXf0VPIGNaaSOJi3bk+/fW39GKr6Q54umgJEObyCWDJa+LDhFzlYCP8QFI1HSg6YdJHH7cSvrTVqSRiB3jHEtNaDl9CDBJ0eC0f0gHC3qyCScC9x6BNq4o/XlJShO+oquqcpfkJNcmFNHOMRTcQlv2mnaL3ld/2aCf35h0DxiJ5EWCpdIk7H9HyRSqQXiUzsI6N4ViWyi+gxLHqYju1ULqPYXaYmO/YnXXkU/oM1wIevAQMSFU2BgXc15dHNcjqbTR+ud5q90H5w/QLLVaZLfdT3ucZ0CsSnQPEUSNxQHkFrW3+/ECqFQMP2wdO/vwIcRsiPsB+JfkT8SPWG0K50Kuseon7E3Ei9mBxGwI+gHyE/wn4k+hHxI/Xd19I2qdkOUileqSunRv0dy7B2r8O6t0HdczjXPUnpKCnxnnsY1j0O656Gdc/Duo/Dupdh3adh3esF3ev+sbJB3ccwrPvqqTUsfYltv+69FdmIfoT8CPuR6EfEjyQ/om5EzI2k4Eequ4/dH4co6X3CJPQj5EfYj0Q/In4k+RH1I+ZGtLr7B18IFPwI+hHyI+xHoh8RP5L8iPoRcyJ5hOt2sZoDsW/e4/ZdYRnMw1/j5XR8M5u0TXg7+zy/LT15Hq5+P5aZ0rU/Lhe3k7vn5aTt3/vWvd1mCiMOeQXQCmEdRepa2fVPgiNJ7XybeVmWcad9PY80Qs2qsrI/",
      "brillig_names": [
        "pack_arguments_oracle_wrapper",
        "call_private_function_internal",
        "enqueue_public_function_call_internal"
      ],
      "verification_key": ""
    },
    {
      "name": "private_get_decimals",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "14575960922920780690": {
            "error_kind": "string",
            "string": "Function private_get_decimals can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "pack_returns_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "renounce_role",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6034109891601213547": {
            "error_kind": "string",
            "string": "Renounce Role: Addresses do not match"
          }
        },
        "parameters": [
          {
            "name": "role",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "callerConfirmation",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "renounce_role"
      ]
    },
    {
      "name": "remove_from_list",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "removeListAddress",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "userFlag",
            "type": {
              "fields": [
                {
                  "name": "is_blacklisted",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_whitelisted",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "is_in_sanction_list",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::validationModule::UserFlags"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "remove_from_list"
      ]
    },
    {
      "name": "public_get_decimals",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAQC0EAAGAQycCBIBDAAImAgQBAzoNAAIAAyQAAAGJHgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGkABCQAAAGyHgIKAAImAgABAwo4AgMEIwIAAACFAAQkAAABxCwIAQImAgQCAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCBAECJgIEAAQmAgAOBSwMBAEiAAAA3Ao4AQQGIwIAAAEUAAYiAAAA7iwNAwEAKAECAwA4AwQFLA0FAhwMAgIDHAwAAwEcDAIBAiwMAgElLA0DBhwMAAEHADgFBwguDAAIAAcmAgQBCQw4AQkKIwIAAAE/AAokAAAB1i0EAAaAAycABAACgAQkAAAB6C0IgAUACAAoCAIJADgJAQosDgcKADgBAgYOOAEGByMCAAABfAAHJAAAAm4sDggDLAwGASIAAADcJwAEeACABA0AAACABIADIwAAAAGxgAMpAQX3ofOvpa3UygABOwEBAiUpAQW+Hj//PqT2+gABOwEBAiUpAQWjscZ4oiVqRgABOwEBAiUpAQXonQn+oREtDgABOwEBAiUtAYADgAYLAIAGAAKAByMAAAACA4AHIgAAAg4tAIADgAUiAAACbS0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAAAACYYAMLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAIwJwEEAAGABSIAAAJtJSkBBUWnynEZQeQVAAE7AQECJS0AGMoYyg==",
      "debug_symbols": "1ZrbjuIwDIbfJde9yNk2r7IajQqUUaWqoAIrrRDvvinbpgxFRMsyO/ENaion/vjTOnHqk1hXy+PHe91utnux+HESzXZVHuptG1qncyGWXd009cf79W0h+x9PF/v9rmz75v5QdgexUJ5kIap2HS5ByjDCpm4qsfB0LubGUrrRWGoXjZXGO9bWIA7W1hBM1vLe2KjMODYqpz5ZvxUC7AvoUY/GAf+/0r9Ce6ui9j6lvXJmpFeObIKerPKDNVlHt/QIL6VX8jN98ED6qz2ER/frXbh/duEhuvDgUk8dSYRx3gLR7byFW38JdOnknuikn/Gk8YlOxtzrBIB26ASodGIeASYPdDWP6O9Yg44vB2iTmhKPOAaCcOlnU2KANb7VvPF5q+94q+94q+8Vb3zPGh8kb3zLG59Y4yPvTQPyDpzEetnSOvPIQ2pMa8OlmeEbzBwfKeJfjz3gf8OOU6qI73QqBYtnCkRT2m+0/gMPjOEdZ+WdZwMPM/hv2Gm+EJ6z8pD5JjkR6zHvpQpkPCUFaeexHl3m+Fo+wqfc1Zcw4fuEdTg89PEIOTTU/O/m/q483FgYmXk6n8Lnrb6yvPEzz4cT+DrvQJvCN5knlCn8zNP5BL7N/DAlhc86HzaOt/q5fwNI4HvekcfzVh94L1uZZ2cP8c+h+bPs6nLZVEOp0ebYrq4qjw6/dtVNEdKu266q9bGr+nKkqRKpl4FUEbKKt75qIrTAF3hp9HvycBqLEBwGp78B",
      "brillig_names": [
        "public_get_decimals"
      ]
    },
    {
      "name": "freeze",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16910372477825329883": {
            "error_kind": "string",
            "string": "error: address already freezed"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "user",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "value",
            "type": {
              "fields": [
                {
                  "name": "is_freezed",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "types::enforcementModule::FreezableFlag"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "freeze"
      ]
    },
    {
      "name": "get_credit_events",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARgABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAYgAoAQICJwIEgEMAAyYCBAMELQQAAoADLQQAA4AELQQABIAFJAAAAfonAgSAQwACJgIEAwM6DQACAAMkAAACQB4CAAACHgIAAAMyOAACAAMABCYCAQECIwIAAACLAAQkAAACaSYCAAACLAgBAyYCBAQEABABBAEmAwQBAwAoAwIELAwEBSwOAgUAKAUCBSwOAgUAKAUCBSwOAgUsDQMEACgEAgQsDgQDLAgBBAAAAQIBLA4DBCYCAAcCJgIEAAMmAgQDBSYCBAEGLAwDASIAAAD5DDgBBQcjAgAAAYUAByIAAAELLA0EAQAoAQIEADgEAwUsDQUCHAwBAgQcDAAEAwAoAQIEADgEBgUsDQUCHAwBAgUcDAAFBCYCBAICACgBAgYAOAYCBywNBwUsCAEBJgIEBAIAEAECASYDBAEBACgBAgIsDAIGLA4DBgAoBgIGLA4EBgAoBgIGLA4FBiUsDQQHHAwAAQgAOAIICS4MAAkACCYCBAMKDDgBCgsjAgAAAbAACyQAAAJ7LQQAB4ADJwAEAASABCQAAAKNLQiABQAJACgJAgoAOAoBCywOCAsAOAEGBw44AQcIIwIAAAHtAAgkAAADEywOCQQsDAcBIgAAAPkBAIADgAWABy0AgAOACC0AgASACQsAgAiAB4AKIwAAAAI/gAotAYAIgAYtAoAGgAkBAIAIAAKACAEAgAkAAoAJIgAAAg4lJwAEeACABA0AAACABIADIwAAAAJogAMpAQX3ofOvpa3UygABOwEBAiUpAQW+Hj//PqT2+gABOwEBAiUpAQXonQn+oREtDgABOwEBAiUtAYADgAYLAIAGAAKAByMAAAACqIAHIgAAArMtAIADgAUiAAADEi0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAAAADBoAMLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAALVJwEEAAGABSIAAAMSJSkBBUWnynEZQeQVAAE7AQECJS0AGMoYyg==",
      "debug_symbols": "5ZvdiqswEMffxWsvZpLJV1/lsCz9sIsgttj2wKH03U8sNbZVDCzuIpmb4pQx+f8yRseJuWa7YnP5+izr/eGUrf5cs+qwXZ/LQ+2t6y3PNk1ZVeXX5/PfGbQ/CPJ+wum4rlv7dF4352yF2kGeFfXOHxoA38S+rIpspd0tHzoDqM4ZhArOKOyIN0lrH94knem9Yaxti7Jr26LCF++P3Mu3M8i3onP2+n9VPs4x+oRh9HVs9FHJTj4qRxH5jlA/vB0pN5AvcFb5CK/y713oH+9C0s934ca60MZ0Z2mLeroLQZYezkJB72zVmB4kGfRo2+sZ9TYihNkIGbumtbUqqLZ6cFEQMWK1fFiVZMTKKK6aUVw1o7gawYhV82G1yIhV8WF1wIiVGLHyeeYI4JNLCDB8WJHPM8e3xYeVUqpLOOzqeP5QDlh1SvPVWRdYnRqwmoXPV8DAqkSEVUrVxVVKjc9C7qgLn64zoi49858TdeGJ//dR3Tvq0vP+OVGTiqozHSq9CvGoEpKK6jQqo6guPF/6NirSOyoSH9SUokoGAqp5vwNLkVJUI6h8oir5RNXyeWOVLqFqmoHwJYwBUkPWhKqkBgRMsFJKVVIDYHpWHfFGBB2+P/IGDscmqfk9WaWhpadYs7IyiqvgU2kkmdJXBjHWlFbyIqyU0sp7hFWltPIeY01pdSvCqlNatYyxMoqrYTRfDaP7sGUUV8sol0ipjjHJevPm33VTrjdV8dh6tb/U26edWOd/x+JtU9axOWyL3aUp2u1Z/c6sdi6gkLln8WPYjiAC5P6d+aPd9tSaiN7UrYl303jTeQ1ex38=",
      "brillig_names": [
        "get_credit_events"
      ]
    },
    {
      "name": "only_role",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "role",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "caller",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "only_role"
      ]
    },
    {
      "name": "unpause_contract",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5120381606281950993": {
            "error_kind": "string",
            "string": "error: contract already unpaused"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "unpause_contract"
      ]
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "pack_returns_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgAEAQInAASARAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAQC0EAAGAQycCBIBDAAImAgQBAzoNAAIAAyQAAAF6HgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAAGkABCQAAAGjHgIKAAImAgABAwo4AgMEIwIAAACFAAQkAAABtSwIAQImAgQCAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCBAECJgIEAAQmAgANBSwMBAEiAAAA3Ao4AQQGIwIAAAEFAAYiAAAA7iwNAwEAKAECAwA4AwQFLA0FAiwMAgElLA0DBhwMAAEHADgFBwguDAAIAAcmAgQBCQw4AQkKIwIAAAEwAAokAAABxy0EAAaAAycABAACgAQkAAAB2S0IgAUACAAoCAIJADgJAQosDgcKADgBAgYOOAEGByMCAAABbQAHJAAAAl8sDggDLAwGASIAAADcJwAEeACABA0AAACABIADIwAAAAGigAMpAQX3ofOvpa3UygABOwEBAiUpAQW+Hj//PqT2+gABOwEBAiUpAQX7Qt7TvBKNAgABOwEBAiUpAQXonQn+oREtDgABOwEBAiUtAYADgAYLAIAGAAKAByMAAAAB9IAHIgAAAf8tAIADgAUiAAACXi0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAAAACUoAMLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAAAIhJwEEAAGABSIAAAJeJSkBBUWnynEZQeQVAAE7AQECJS0AGMoYyg==",
      "debug_symbols": "1ZpdjuIwDIDv0uc+OL+2ucpqNCpQRpWqggqstELcfVO2LR2KiJZlduKXqq6c+JPdJHaSU7Yul8eP96rZbPfZ4scpq7er4lBtmyCdznm2bKu6rj7ep58z6B6eL/r7XdF04v5QtIdsoTxDnpXNOrwiQOhhU9VltvB8zufKAG5QBu1GZaXpjrY1RL22NYxXbbjXNykz9E3KqU/ab3mG9gX0pAflgP9f6V/he6tG3/uY75UzA71ybCP0bJXvtdk6vqUnfCm9gs/0wQLrr7YQft2vN+H+2YTH0YRHF/vrGAiHuAWi27iFT38JdGnknmikn7Gk6YlGxtxrhJq4b4RGmUgcEa8WeBJH8ne0UY+DA7WJhcQTDRNBePWzkBgUjW+1bHzZ3neyve9ke98r2fheND6CbHwrG59F45PspIFkT5wsetnSOvGZh9VQ1oZXM8M3lDj+COJ52neP/w0ZJ6gR3+kIvuWhAnOTitBY9wceBcM7yZ5PPVmLDFrvksZHGLe7EOx80CaerCFoeIifuvcBr/g+oh12gfy4FxiE2eakptTHyuMVghIvbCL4LNv7nHhl8BjfgBWNr1LPTSP4iRc2EXydeGETwxddGZjUTwJi+LK9n/pJQAxf9syT+klABN/LXrYSr84e4p+D+LNoq2JZl/2dkc2xWU2ukBx+7cqb2yS7drsq18e27O6VXK+UdFEkyhXQW3f8HSQ0OV6ELqklnZMNBoPR3w==",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "_mint_internal",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "internal"
      ],
      "abi": {
        "error_types": {
          "14262884792716209954": {
            "error_kind": "string",
            "string": "Function _mint_internal can only be called internally"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16049994897275280777": {
            "error_kind": "string",
            "string": "Non-zero delay change for zero hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2435529361475140548": {
            "error_kind": "string",
            "string": "Non-zero value change for zero hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8193989641828211937": {
            "error_kind": "string",
            "string": "ciphertext length mismatch"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8961250494313784519": {
            "error_kind": "string",
            "string": "Frozen: Recipient"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_public_storage_hints",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_storage_hints",
        "get_public_keys_and_partial_address",
        "random",
        "notify_created_note_oracle_wrapper",
        "get_key_validation_request",
        "get_random_bytes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_app_tag_bytes_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "build_msg_block",
        "emit_encrypted_note_log_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": ""
    },
    {
      "name": "pause_contract",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "error_types": {
          "11038977800835983942": {
            "error_kind": "string",
            "string": "AccessControlUnauthorizedAccount"
          },
          "13425536882234742926": {
            "error_kind": "string",
            "string": "error: contract already paused"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "pause_contract"
      ]
    },
    {
      "name": "mint",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "txs_effects_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::header::Header"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "note_encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"
                  }
                }
              },
              {
                "name": "encrypted_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "randomness",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "txs_effects_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::header::Header"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZjdbuowDMffpde9iD/i2HuVo6OJbWxCQjAxdqSjae9+2o60cIioDHTapN0g0vrn/uM4Tt236mF+9/p0u1g9rl+qm19v1XJ9P9su1qtm9FYBdddenmerdviynW221Q2Ihbqarx6avymE97p6XCzn1Y3Ye31kjEq6M0aVwRgwFKwpgu2sKRqOWBsq7KwNLfbWmLRgDaqSZVsYrIlKxoBZCEDrbjD+XVfAP3EpxiX+xKUYF7k4LgwYd8YMAsNMg3ZPSJM/QS9+AlDgbExke6tVir8pZz2mggd6CnmDGlNOHGyW7ki/fW/9GEr6jXtJxmIjewtM+kfg/gqXdkvUHBmBIfshpk4NXK4GCXo1FkbUgHDst6NIwqP44JdTRJ+tKClDn80qeqSIv5yieFVFHOOIIuKc1XSwJz+yWspqjLKamEZqRCLM2zgRpzE13+P8wnSFuMQhLooX1R69ghrDrIZpbJWason9KWFyYH9eLbfvPgMKnzwDDEjZNwYGPlTUjO42i+Vy8XR70MGE9oeLRwNA6EtTd4IfZhnTORCfA8VzIHFDzQha2/LZLZQLgIb9LXficD2NkB9hPxL9iPiRYv3TvmQq6xGifsTcSHkbnkbAj6AfIT/CfiT6EfEj5dXX/IqiZgdIoXilvpgaDWcrQ+dep3Vvk7rncKl7ktwmUeIj9zCte5zWPU3rnqd1H6d1L9O6T9O61yu61+NtZZO6j2Fa9+WvA5j7Edt/3fsoshH9CPkR9iPRj4gfSX5E3YiYG0nBjxRXH/uvYSjp/4RJ6EfIj7AfiX5E/EjyI+pHzI1ocfVPvhAo+BH0I+RH2I9EPyJ+JPkR9SPmRJoRdu1iMQfi0LzH/bPCGrAZ/pltFrO75bxtwtu7r6v73JM3w+3f53wnd+3Pm/X9/OF1M2/796F1b5eZQs2hmQG0QljrSH0r210SrCW199vMs1hb6rV395Fq1EZVo+wf",
      "brillig_names": [
        "pack_arguments_oracle_wrapper",
        "call_private_function_internal",
        "enqueue_public_function_call_internal"
      ],
      "verification_key": ""
    },
    {
      "name": "public_get_issuer",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15055901490962513990": {
            "error_kind": "string",
            "string": "Function public_get_issuer can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7V3bbhs5DP0XP+dBEiWR7K8UiyBJ08JAkBRJusCi6L+vxvHISUdjwtxJ6hXnJfDEOqbOkUakLsP5uflye/3j2+X2/uvD0+bT55+bu4ebq+ftw325+vnrYnP9uL272367fP3vjRv+ZN6Vf/p+dT9cPj1fPT5vPvnM7mJze/+lfETnyi983d7dbj5l/nUxLexcGgu7kGphH6hROgLRvnQExkNp1/pt8jD+Nvnk35T+62KDcYHaUxgLl+p/aO2X0D76qn2WtPcJxtr7xFGoPUef96U5Jv699oSL1t67t7UvFji8t4XSdd/fRPrPJjJWExmT1OvYEY7tVmr0e7uVf51YoR0oKUBBYymQAgTQApX7L9f7j/JxkSNWC7HcrQfZ2DdKJ8zjrZ0QWRoIcoaxIpnipEmAlq1+iG+qP5iI8P4m3p9FWoAFQawmUpbaObpxyEwxBqE0BOZ9aQAEoXTpCiNZwnDo0wFbg3euHDMchgCAF11o1aWlSw6rLk1dcNWlpQuu/aWty9pfmrrQ2l/auuRVl5Yu7FZdmrqkVZemLrzq0tAluLjq0tRlnQc0dfGrn27rssZ1TV2Ct6sLurrW6Ce6GPbTx3QBw3HdUV0M++mjuhj208d0iYbXd4/qYsVPD2STFee7I2tlpWQgm624yR1ZK75vR9bKQsVAFq14qYEsW+rGbCUuK2TBGerGYGZlbCDrLbWst9SywcpC5o6sodgYwNCsB8DKOuJANhqa9UCMlsgamvWAmbOXO7KGFtzAzCnJHVlLQQVacj1oKahAS66HLLkesjSfZUsty4aCiugMzWejMxRURG+pZX1XQQWGWm0EnpANXYWLEtloiWxXQYVAFrqaz0pku3I9Atm+llIlspYGqL6WUgWyyVDLJtdXy74KFzlMyIaupngUK1lK8Q3Z00oP0vS1wXmSNB5xzP/hcfi9femX072pLxe+pDJ9ucBFlelqVF1Smb72KU9Thmgk6flVLqpRma4mgUsq09cO6KLKGPZNx5Xpa291UWUMe21BmXUEnlGmry3eRZVZ+8yMMrx67TllVq/dVia71WvPKbN67Tll1hF4Rpm+8uosqsw6As8o09chg5OUCS6MyeaDg6kyXZ01WVKZvvLrLKqMXa8tKWPXawvK9JVlZ1Fl7G7fCsr0lZRnUWXsRnqCMh+f7gfqy3yKSCiUxlBfcIMBpNeq5KLHvnT5mN+U3pGNlsiyIbIfn+7nT5JFQ2Q/Pn3/nyOLrqvRmP342+UjTMh+fFKYdyVLXMlympAN596Nna9kUxDIEvrx9WWEr18nyO6F7LkPUEuSBUst+/HHIN+VbKZKFvOEbPSWyFpq2XTufvYksgSH+SDQlGwyRPbs57OLkjXVsuc+nz2NbF0fKmT5DdnGGg7WaUPAV680Br97bAM//jDf/0eatdfMSUML9xpx4dJzHINLzxR+v8MpnHu8teDsl8K5j92nkEVX36KOLk5mvwQ9rWugC+4o2b5a1uGBbBZKe+9q4O3LhZ+Ic/ZzqgUXfejs51RLkk2WWjZ1tbkikO1r20wgi30twQtku9pJEsj2tZMkkTW0uULc1e6vRNZQy7IzdM+yMzQas7fUssFQUMFdrWxIZDs7wXzY/aVwqMk+PRB3dihZIGupZTs7IHucbO7rnLRA1lLLoqWW7etdCuSgkvVTstTX02UC2WiJbF9+9jjZztJhCGT7cj1HyXrXWdYKia2hIaqw7SuTo8DWm2rbvt5NK7ENfU3hJbam2razHMXH2fr2cxeeYj2AQvlw/mR/6K3AmiL5EGu+2vAaBi+o9rEVEaWy1c48L6JYg8qgQmEbhamimCYoDBoUN2e5PvnxDFb5OK0hswIVHKhQqEG139AkotpqZKjtlbOboNrbDyJKZQtAhSINqp16XEK1DyqJqKxBtZMWiyjUoFBlC1W8SNWjSNWjiDUoVvVD1vRDcDPK120pjy5MUahBeZWtuRFAQCUVijWouXFDQKk0nPHLsWbK8DFOxl6YGTckVFKhWIOa8eYSCjUoVKmBKuVJZYtUypNKeVYpzzPKp/qYRMTJaBNnRhsJRRrUTLwhoGZGGwmVNSjwKpTKVlTxmolSJBRrUAlUKFU/zKp+2N6PFOLe2D6VK6KiCkUKVPLtw1txnPJSggmm/aSId6mOGi6nKYo1qPbZDRGFGtSMpyzh1YjySFNU1qDaD/yKqKRBocoWqmyRyhapbLHKFmvaaya5t4iKKhRpUDMRtoRSqRG8CpVPHmtm0rMOi/31ToYpqn0ISkKloEJlDSqreLUfaRFRpBgNZ3KTiSiVLcoaFHsVSmMLnVehkgo14ylzvbscTWaH6KMKpbIVUIOaWfqWUCpbUWUryn2jgUqqvpFU/TCrbGVN7DWTn0FCzUQAEkoTsSEHFUozRpEDFUplywcVStOjKDgVStM3CFQagkpD1cyBTr+Xf5Wrv68et1fXd7dPBTN8+eP+5nn7cL+/fP7n+/jN9eP27m777fL748PN7Zcfj7eXdw83w3cbt//zGQguooOhNsNl2Tu5KDshw+VQtehi+TYXq8Xyvw==",
      "brillig_names": [
        "public_get_issuer"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "000000000000000000000000000000000000000000000000000000003de78269"
            },
            {
              "kind": "string",
              "value": "ValueNote"
            },
            {
              "fields": [
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "000000000000000000000000000000000000000000000000000000000c0c5aaf"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "pause_module",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "validation_module",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "enforcement_module",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "access_control",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "credit_event_module",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "debt_base_module",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "issuer_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::get_operations_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_operations_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "caller",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "account",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::grant_role_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::grant_role_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_mint_internal_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_mint_internal_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "account",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::has_role_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::has_role_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "debt_base_",
                    "type": {
                      "fields": [
                        {
                          "name": "interestRate",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "parValue",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "guarantor",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "bondHolder",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "maturityDate",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "interestScheduleFormat",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "interestPaymentDate",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "dayCountConvention",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "businessDayConvention",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "publicHolidaysCalendar",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "issuanceDate",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        },
                        {
                          "name": "couponFrequency",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::extensions::debtBaseModule::DebtBaseStruct"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_debt_base_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_debt_base_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_issuer_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_issuer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::pause_contract_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::pause_contract_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::total_supply_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "account",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::revoke_role_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::revoke_role_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::_transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "callerConfirmation",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::renounce_role_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::renounce_role_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "role",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "caller",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::only_role_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::only_role_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "fields": [
                        {
                          "name": "is_freezed",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::enforcementModule::FreezableFlag"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::freeze_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::freeze_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "accounts",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_batch_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_batch_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_from_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_from_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "accounts",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "array",
                      "length": 1,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_batch_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_batch_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "operations",
                    "type": {
                      "fields": [
                        {
                          "name": "operate_blacklist",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "operate_whitelist",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "operate_sanctionlist",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::validationModule::SetFlag"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_operations_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_operations_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::unpause_contract_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::unpause_contract_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "removeListAddress",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "userFlag",
                    "type": {
                      "fields": [
                        {
                          "name": "is_blacklisted",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_whitelisted",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_in_sanction_list",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::validationModule::UserFlags"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::remove_from_list_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::remove_from_list_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_pause_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_pause_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "credit_events",
                    "type": {
                      "fields": [
                        {
                          "name": "flagDefault",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "flagRedeemed",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "rating",
                          "type": {
                            "fields": [
                              {
                                "name": "value",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "compressed_string::field_compressed_string::FieldCompressedString"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::extensions::creditEventsModule::CreditEventsStruct"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_credit_events_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_credit_events_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::get_frozen_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_frozen_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_transfer_internal_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_transfer_internal_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::get_debt_base_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 12,
                "type": {
                  "kind": "field"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_debt_base_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "fields": [
                        {
                          "name": "is_freezed",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::enforcementModule::FreezableFlag"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::unfreeze_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::unfreeze_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_issuer_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_issuer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::get_credit_events_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 3,
                "type": {
                  "kind": "field"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_credit_events_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::_transferFrom_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_transferFrom_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "newListAddress",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "userFlag",
                    "type": {
                      "fields": [
                        {
                          "name": "is_blacklisted",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_whitelisted",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "is_in_sanction_list",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::validationModule::UserFlags"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::add_to_list_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::add_to_list_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::arguments::pack_arguments;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "107": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr",
      "source": "use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"
    },
    "108": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        header::get_header_at,\n        key_validation_request::get_key_validation_request,\n        logs::{emit_encrypted_event_log, emit_encrypted_note_log},\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log_hash::{EncryptedLogHash, LogHash, NoteLogHash},\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n        MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    },\n    header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: Header,\n\n    pub note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    pub encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage(),\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert(request.pk_m.hash() == pk_m_hash);\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // The oracle simulates the private call and returns the value of the side effects counter after execution of\n        // the call (which means that end_side_effect_counter - start_side_effect_counter is the number of side effects\n        // that took place), along with the hash of the return values. We validate these by requesting a private kernel\n        // iteration in which the return values are constrained to hash to `returns_hash` and the side effects counter\n        // to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "109": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Deserialize, Empty, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_unencrypted_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // AVM opcodes are constrained by the AVM itself.\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\n// TODO(9396): Remove.\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// TODO(9396): Remove.\n//unconstrained fn function_selector() -> u32 {\n//    function_selector_opcode()\n//}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// TODO(9396): Remove.\n//#[oracle(avmOpcodeFunctionSelector)]\n//unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "113": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::payload::compute_private_log_payload,\n    keys::getters::get_ovsk_app,\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_BYTES,\n    hash::sha256_to_field, public_keys::OvpkM,\n};\n\n/// Computes private note log payload and a log hash\nfn compute_payload_and_hash<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> (u32, [u8; PRIVATE_LOG_SIZE_IN_BYTES], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n\n    let encrypted_log = compute_private_log_payload(\n        contract_address,\n        ovsk_app,\n        ovpk,\n        recipient,\n        sender,\n        plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_payload_and_hash_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> (u32, [u8; PRIVATE_LOG_SIZE_IN_BYTES], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_payload_and_hash(context, note, ovsk_app, ovpk, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    // TODO: We need this because to compute a tagging secret, we require a sender. Should we have the tagging secret oracle take a ovpk_m as input instead of the address?\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_payload_and_hash(*context, e.note, ovsk_app, ovpk, recipient, sender);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    // TODO: We need this because to compute a tagging secret, we require a sender. Should we have the tagging secret oracle take a ovpk_m as input instead of the address?\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_payload_and_hash_unconstrained(*context, e.note, ovpk, recipient, sender)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"
    },
    "114": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    point::Point,\n    public_keys::{IvpkM, ToPoint},\n    scalar::Scalar,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    pub fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    pub fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"
    },
    "116": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, PRIVATE_LOG_SIZE_IN_BYTES},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n    public_keys::{AddressPoint, OvpkM},\n    scalar::Scalar,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    field::bn254::decompose, hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse crate::{\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n    oracle::{\n        notes::{get_app_tag_bytes_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::point::point_to_bytes,\n};\n\npub comptime global PRIVATE_LOG_OVERHEAD_IN_BYTES: u32 = 304;\n\n// 1 byte for storage slot, 1 byte for note type id, allowing 6 bytes for custom note fields.\nglobal MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 = 8 * 32;\n\nglobal MAX_PRIVATE_EVENT_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n    MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES - 32; // Reserve 1 field for address tag.\n\n// PRIVATE_LOG_SIZE_IN_BYTES\n// - PRIVATE_LOG_OVERHEAD_IN_BYTES, consisting of:\n//   - 32 bytes for incoming_tag\n//   - 32 bytes for eph_pk\n//   - 48 bytes for incoming_header\n//   - 48 bytes for outgoing_header\n//   - 144 bytes for outgoing_body\n// - 16 + MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES for incoming_body, consisting of:\n//   - 1 byte for plaintext length\n//   - MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES for the actual plaintext and padded random values\n//   - 15 bytes for AES padding\n\n// Note: Update PRIVATE_LOG_SIZE_IN_BYTES in `constants.nr` if any of the above fields change.\n// This value ideally should be set by the protocol, allowing users (or `aztec-nr`) to fit data within the defined size limits.\n// Currently, we adjust this value as the structure changes, then update `constants.nr` to match.\n// Once the structure is finalized with defined overhead and max note field sizes, this value will be fixed and should remain unaffected by further payload composition changes.\n\npub fn compute_private_log_payload<let P: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; PRIVATE_LOG_SIZE_IN_BYTES] {\n    let extended_plaintext: [u8; MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES + 1] =\n        extend_private_log_plaintext(plaintext);\n    compute_encrypted_log(\n        contract_address,\n        ovsk_app,\n        ovpk,\n        recipient,\n        sender,\n        extended_plaintext,\n    )\n}\n\npub fn compute_event_log_payload<let P: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; PRIVATE_LOG_SIZE_IN_BYTES] {\n    let extended_plaintext: [u8; MAX_PRIVATE_EVENT_LOG_PLAINTEXT_SIZE_IN_BYTES + 1] =\n        extend_private_log_plaintext(plaintext);\n    compute_encrypted_log(\n        contract_address,\n        ovsk_app,\n        ovpk,\n        recipient,\n        sender,\n        extended_plaintext,\n    )\n}\n\npub fn compute_partial_public_log_payload<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let extended_plaintext: [u8; P + 1] = extend_private_log_plaintext(plaintext);\n    compute_encrypted_log(\n        contract_address,\n        ovsk_app,\n        ovpk,\n        recipient,\n        sender,\n        extended_plaintext,\n    )\n}\n\nfn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] =\n        header.compute_ciphertext(eph_sk, recipient.to_address_point());\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext =\n        compute_incoming_body_ciphertext(plaintext, eph_sk, recipient.to_address_point());\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag_bytes = unsafe { get_app_tag_bytes_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = tag_bytes[i];\n    }\n    offset += 32;\n\n    // eph_pk\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = eph_pk_bytes[i];\n    }\n    offset += 32;\n\n    // incoming_header\n    // outgoing_header\n    for i in 0..48 {\n        encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[offset + 48 + i] = outgoing_header_ciphertext[i];\n    }\n    offset += 48 * 2;\n\n    // outgoing_body\n    for i in 0..144 {\n        encrypted_bytes[offset + i] = outgoing_body_ciphertext[i];\n    }\n    offset += 144;\n\n    // incoming_body\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - offset;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n    }\n\n    encrypted_bytes\n}\n\n// Prepend the plaintext length as the first byte, then copy the plaintext itself starting from the second byte.\n// Fill the remaining bytes with random values to reach a fixed length of N.\nfn extend_private_log_plaintext<let P: u32, let N: u32>(plaintext: [u8; P]) -> [u8; N] {\n    let mut padded = unsafe { get_random_bytes() };\n    padded[0] = P as u8;\n    for i in 0..P {\n        padded[i + 1] = plaintext[i];\n    }\n    padded\n}\n\nunconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    address_point: AddressPoint,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, address_point.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's address point --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_address_point =\n        point_to_bytes(recipient.to_address_point().to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_address_point[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n        compute_private_log_payload, MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n    };\n    use dep::protocol_types::{\n        address::AztecAddress, point::Point, public_keys::OvpkM, scalar::Scalar,\n    };\n    use protocol_types::public_keys::AddressPoint;\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x191ac5e29bbc8f80f29ed06b75eaf30c036ed7952d844833860c527077c8c3b4;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x07f696b8b233de2c1935e43c793399586f532da5ff7c0356636a75acb862e964,\n                y: 0x156e8a3e42bfca3663936ba98c7fd26386a14657c23b5f5146f1a94b6c465154,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let randomness = 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(\n            (MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES as u64 + 1 + 30) / 31,\n        );\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getAppTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log = compute_private_log_payload(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            recipient,\n            sender,\n            plaintext,\n        );\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            14, 156, 255, 195, 221, 215, 70, 175, 251, 2, 65, 13, 143, 10, 130, 62, 137, 147, 151,\n            133, 188, 200, 232, 142, 228, 243, 202, 224, 94, 115, 124, 54, 141, 70, 12, 14, 67, 77,\n            132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202,\n            225, 216, 86, 84, 159, 112, 31, 167, 5, 119, 121, 10, 234, 188, 194, 216, 30, 200, 208,\n            201, 158, 127, 93, 43, 242, 241, 69, 32, 37, 220, 119, 122, 23, 132, 4, 248, 81, 217,\n            61, 232, 24, 146, 63, 133, 24, 120, 113, 217, 155, 223, 149, 214, 149, 239, 240, 169,\n            224, 155, 161, 81, 83, 252, 155, 77, 34, 75, 110, 30, 113, 223, 189, 202, 171, 6, 192,\n            157, 91, 60, 116, 155, 254, 190, 28, 4, 7, 236, 205, 4, 245, 27, 187, 89, 20, 38, 128,\n            200, 160, 145, 185, 127, 198, 203, 207, 97, 246, 194, 175, 155, 142, 188, 143, 120, 83,\n            122, 178, 63, 208, 197, 232, 24, 228, 212, 45, 69, 157, 38, 90, 219, 119, 194, 239, 130,\n            155, 246, 143, 135, 242, 196, 123, 71, 139, 181, 122, 231, 228, 26, 7, 100, 63, 101,\n            195, 83, 8, 61, 85, 123, 148, 227, 29, 164, 162, 161, 49, 39, 73, 141, 46, 179, 240, 52,\n            109, 165, 238, 210, 233, 188, 36, 90, 175, 2, 42, 149, 78, 208, 176, 145, 50, 180, 152,\n            245, 55, 112, 40, 153, 180, 78, 54, 102, 119, 98, 56, 235, 246, 51, 179, 86, 45, 127,\n            18, 77, 187, 168, 41, 24, 232, 113, 149, 138, 148, 33, 143, 215, 150, 188, 105, 131,\n            254, 236, 199, 206, 56, 44, 130, 134, 29, 99, 254, 69, 153, 146, 68, 234, 148, 148, 178,\n            38, 221, 182, 103, 252, 139, 7, 246, 132, 29, 232, 78, 102, 126, 28, 136, 8, 219, 180,\n            162, 14, 62, 71, 118, 40, 147, 93, 87, 188, 231, 32, 93, 56, 193, 194, 197, 120, 153,\n            164, 139, 114, 18, 149, 2, 226, 19, 170, 250, 249, 128, 56, 236, 93, 14, 101, 115, 20,\n            173, 73, 192, 53, 229, 7, 23, 59, 11, 176, 9, 147, 175, 168, 206, 48, 127, 126, 76, 51,\n            211, 66, 232, 16, 132, 243, 14, 196, 181, 118, 12, 71, 236, 250, 253, 71, 249, 122, 30,\n            23, 23, 19, 89, 47, 193, 69, 240, 164, 34, 128, 110, 13, 133, 198, 7, 165, 14, 31, 239,\n            210, 146, 78, 67, 86, 32, 159, 244, 214, 246, 121, 246, 233, 252, 20, 131, 221, 28, 146,\n            222, 119, 222, 162, 250, 252, 189, 18, 147, 12, 142, 177, 222, 178, 122, 248, 113, 197,\n            40, 199, 152, 251, 91, 81, 243, 25, 156, 241, 141, 60, 12, 99, 103, 169, 97, 32, 112,\n            37, 244, 255, 126, 46, 114, 226, 113, 223, 249, 27, 3, 31, 41, 233, 28, 8, 23, 84, 99,\n            25, 186, 65, 33, 9, 35, 74, 16, 52, 169, 48, 161, 134, 233, 242, 136, 39, 162, 105, 205,\n            43, 253, 183, 36, 138, 186, 87, 31, 7, 248, 125, 227, 193, 172, 155, 98, 33, 61, 186,\n            158, 241, 192, 23, 28, 186, 100, 222, 174, 19, 64, 224, 113, 251, 143, 45, 152, 81, 67,\n            116, 16, 95, 189, 83, 31, 124, 39, 155, 142, 66, 0, 120, 197, 221, 161, 62, 75, 192,\n            255, 186, 200, 10, 135, 7,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let address_point = AddressPoint {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let ciphertext =\n            compute_outgoing_body_ciphertext(recipient, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 238, 182, 194, 225, 34, 71, 67, 116, 27, 231, 68, 161, 147,\n            94, 53, 195, 83, 237, 172, 52, 173, 229, 26, 234, 107, 43, 82, 68, 16, 105, 37, 125,\n            117, 86, 133, 50, 21, 92, 74, 229, 105, 141, 83, 229, 255, 251, 21, 61, 234, 61, 168,\n            221, 106, 231, 8, 73, 208, 60, 251, 46, 251, 228, 148, 144, 187, 195, 38, 18, 223, 153,\n            8, 121, 178, 84, 237, 148, 254, 219, 59, 62,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"
    },
    "120": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"
    },
    "127": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, header::Header, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: Header,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n                == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path)\n                ,\n                \"Proving public value inclusion failed\",\n            );\n\n            // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n            // we have two scenarios:\n            // 1. The tree entry is initialized, and the value is the same as the one in the witness\n            // 2. The entry was never initialized, and the value is default zero (the default)\n            // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n            let preimage = witness.leaf_preimage;\n\n            let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n            let is_next_greater_than =\n                full_field_less_than(public_data_tree_index, preimage.next_slot);\n            let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n            let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n            let value = if is_in_range {\n                0\n            } else {\n                assert_eq(\n                    preimage.slot,\n                    public_data_tree_index,\n                    \"Public data tree index doesn't match witness\",\n                );\n                preimage.value\n            };\n\n            value\n        }\n}\n"
    },
    "128": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/initializer.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "130": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "133": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr",
      "source": "use crate::utils::point::point_to_bytes;\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, point::Point, scalar::Scalar, utils::arr_copy_slice,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::sha256};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"
    },
    "145": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "147": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "149": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "156": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n        compute_unique_note_hash,\n    },\n    utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "157": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr",
      "source": "/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"
    },
    "158": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "159": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "161": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "165": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice,\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: arr_copy_slice(\n            fields,\n            [0; PUBLIC_DATA_TREE_HEIGHT],\n            1 + LEAF_PREIMAGE_LENGTH,\n        ),\n    }\n}\n"
    },
    "168": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "169": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "17": {
      "path": "std/ec/mod.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1 = 28;\nglobal C3 = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5 = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n"
    },
    "170": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n/// Temporary substitute that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitContractClassLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"
    },
    "172": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n    utils::arr_copy_slice,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_app_tagging_secret_as_sender`, except it returns the derived tag as an array of bytes, ready to be included in a\n/// log.\npub unconstrained fn get_app_tag_bytes_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [u8; 32] {\n    let tag = get_app_tagging_secret_as_sender(sender, recipient).compute_tag(recipient);\n    tag.to_be_bytes()\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivpsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_app_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_app_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getAppTaggingSecretAsSender)]\nunconstrained fn get_app_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "173": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "174": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr",
      "source": "/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"
    },
    "175": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Deserialize<N>,\n{\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "177": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "182": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest,\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::{Deserialize, Serialize},\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateSet<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "185": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "186": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR,\n    traits::{Deserialize, Serialize},\n};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context, let N: u32> Storage<T, N> for SharedImmutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n"
    },
    "188": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr",
      "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub(crate) struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub(crate) fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub(crate) fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub(crate) fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub(crate) fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33)\n            + (self.post.is_some() as u64 * (1 << 32))\n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some {\n                Option::some(pre_inner)\n            } else {\n                Option::none()\n            },\n            post: if post_is_some {\n                Option::some(post_inner)\n            } else {\n                Option::none()\n            },\n            block_of_change,\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "190": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr",
      "source": "use dep::protocol_types::traits::{Deserialize, FromField, Serialize, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub(crate) struct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub(crate) fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub(crate) fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub(crate) fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub(crate) fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T>\nwhere\n    T: ToField,\n{\n    fn serialize(self) -> [Field; 3] {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T>\nwhere\n    T: FromField,\n{\n    fn deserialize(input: [Field; 3]) -> Self {\n        Self {\n            pre: FromField::from_field(input[0]),\n            post: FromField::from_field(input[1]),\n            block_of_change: FromField::from_field(input[2]),\n        }\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"
    },
    "191": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    hash::{poseidon2_hash, poseidon2_hash_with_separator},\n    traits::{Deserialize, FromField, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse crate::state_vars::{\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    storage::Storage,\n};\nuse dep::std::mem::zeroed;\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// Separators separating storage slot of different values within the same state variable\nglobal VALUE_CHANGE_SEPARATOR: u32 = 0;\nglobal DELAY_CHANGE_SEPARATOR: u32 = 1;\nglobal HASH_SEPARATOR: u32 = 2;\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, let INITIAL_DELAY: u32, Context, let N: u32> Storage<T, N> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], VALUE_CHANGE_SEPARATOR)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], DELAY_CHANGE_SEPARATOR)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], HASH_SEPARATOR)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n\n    pub fn schedule_value_change(self, new_value: T) {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change),\n        );\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn get_current_value_in_private(self) -> T {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) {\n        let header = self.context.get_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = unsafe {\n            get_public_storage_hints(address, self.storage_slot, historical_block_number)\n        };\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        if hash != 0 {\n            assert_eq(\n                hash,\n                SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint),\n                \"Hint values do not match hash\",\n            );\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            assert_eq(\n                value_change_hint,\n                ScheduledValueChange::deserialize(zeroed()),\n                \"Non-zero value change for zero hash\",\n            );\n            assert_eq(\n                delay_change_hint,\n                ScheduledDelayChange::deserialize(zeroed()),\n                \"Non-zero delay change for zero hash\",\n            );\n        };\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) -> Field {\n        let concatenated: [Field; 4] =\n            array_concat(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UnconstrainedContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub unconstrained fn get_current_value_in_unconstrained(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    unconstrained fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, let INITIAL_DELAY: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>)\nwhere\n    T: ToField + FromField + Eq,\n{\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number),\n        storage_read(address, dummy.get_delay_change_storage_slot(), block_number),\n    )\n}\n"
    },
    "206": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr",
      "source": "// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"
    },
    "209": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "227": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "238": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr",
      "source": "use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\npub struct MaxBlockNumber {\n    _opt: Option<u32>,\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt.is_some() as Field, self._opt.unwrap_unchecked() as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: if serialized[0] as bool {\n                Option::some(serialized[1] as u32)\n            } else {\n                Option::none()\n            },\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"
    },
    "24": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "25": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "255": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "26": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "262": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n    utils,\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    ec::{pow, sqrt},\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "276": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "278": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedEncryptedLogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage())\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "28": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "280": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash([self.secret, recipient.to_field(), self.index as Field])\n    }\n}\n"
    },
    "289": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "295": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
    },
    "303": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "306": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "318": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"
    },
    "322": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "33": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "338": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_reversed, assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let mut len = 0;\n    for elem in array {\n        if !is_empty(elem) {\n            len += 1;\n        }\n    }\n\n    BoundedVec { storage: array, len }\n}\n\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "339": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "34": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8 = 256;\nglobal TWO_POW_16 = TWO_POW_8 * 256;\nglobal TWO_POW_24 = TWO_POW_16 * 256;\nglobal TWO_POW_32 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "340": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr",
      "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\npub mod arrays;\npub mod field;\npub mod reader;\npub mod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"
    },
    "341": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "345": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{traits::{Deserialize, Serialize}, utils::field::field_from_bytes};\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl Serialize<1> for FieldCompressedString {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n    fn deserialize(input: [Field; 1]) -> Self {\n        Self { value: input[0] }\n    }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "348": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n"
    },
    "350": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/value-note/src/filter.nr",
      "source": "use crate::value_note::ValueNote;\nuse dep::aztec::protocol_types::constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL;\n\npub fn filter_notes_min_sum(\n    notes: [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = U128::from_integer(0);\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < U128::from_integer(min_sum)) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += U128::from_integer(note.value);\n        }\n    }\n\n    selected\n}\n"
    },
    "352": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/value-note/src/utils.nr",
      "source": "use crate::{filter::filter_notes_min_sum, value_note::{VALUE_NOTE_LEN, ValueNote}};\nuse dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\nuse dep::aztec::keys::getters::get_public_keys;\nuse dep::aztec::note::note_getter_options::SortOrder;\nuse dep::aztec::prelude::{AztecAddress, NoteGetterOptions, PrivateContext, PrivateSet};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(\n    amount: Field,\n) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(\n        ValueNote::properties().value,\n        SortOrder.DESC,\n    )\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(\n    // docs:start:increment_args\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    recipient: AztecAddress,\n    outgoing_viewer: AztecAddress, // docs:end:increment_args\n    sender: AztecAddress,\n) {\n    let outgoing_viewer_ovpk_m = get_public_keys(outgoing_viewer).ovpk_m;\n\n    let mut note = ValueNote::new(amount, recipient);\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    balance.insert(&mut note).emit(encode_and_encrypt_note(\n        balance.context,\n        outgoing_viewer_ovpk_m,\n        recipient,\n        sender,\n    ));\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n    sender: AztecAddress,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner, outgoing_viewer, sender);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    max_amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n    sender: AztecAddress,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let notes = balance.pop_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            decremented += note.value;\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if max_amount.lt(decremented) {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner, outgoing_viewer, sender);\n\n    decremented\n}\n"
    },
    "353": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/value-note/src/value_note.nr",
      "source": "use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n"
    },
    "57": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "58": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "67": {
      "path": "std/uint128.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                let ascii =\n                    ascii + 32 * (unsafe { U128::uconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n}\n"
    },
    "69": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/main.nr",
      "source": "mod types;\n//mod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Token {\n    // Libs\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, PrivateSet, PublicMutable, SharedImmutable,\n            SharedMutable,\n        },\n    };\n\n    use crate::types::{\n        access_controlModule::{\n            AccessControlModule, BURNER_ROLE, DEFAULT_ADMIN_ROLE, MINTER_ROLE, Role, RoleData,\n        },\n        balances_map::BalancesMap,\n        enforcementModule::{Freezable, FreezableFlag},\n        extensions::{\n            creditEventsModule::{CreditEvents, CreditEventsStruct},\n            debtBaseModule::{DebtBase, DebtBaseStruct},\n        },\n        pauseModule::{BoolEmul, PauseModule},\n        validationModule::{SetFlag, UserFlags, ValidationModule},\n        balance_set::BalanceSet,\n    };\n    use dep::value_note::{balance_utils, utils::{decrement, increment}, value_note::ValueNote};\n    \n\n    // Changing an address' roles has a certain block delay before it goes into effect.\n    global CHANGE_ROLES_DELAY_BLOCKS = 2;\n    //This global is used when doing batching. We set a\n    global MAX_ADDR_PER_CALL = 1;\n\n    // #[derive(Serialize)]\n    // #[event]\n    // struct Paused {\n    //     account: AztecAddress\n    // }\n\n    // #[event]\n    // struct Unpaused {\n    //     account: AztecAddress\n    // }\n\n    // #[event]\n    // struct Transfer {\n    //     from: AztecAddress,\n    //     to: AztecAddress,\n    //     amount: Field,\n    // }\n\n\n\n    #[storage]\n    struct Storage<Context> {\n\n        pause_module: PauseModule<BoolEmul, Context>,\n        validation_module: ValidationModule<UserFlags, Context>,\n        enforcement_module: Freezable<FreezableFlag, Context>,\n        access_control: AccessControlModule<bool, Context>,\n        credit_event_module: CreditEvents<bool, Context>,\n        debt_base_module: DebtBase<bool, Context>,\n\n        issuer_address: SharedMutable<AztecAddress, CHANGE_ROLES_DELAY_BLOCKS, Context>,\n\n        balances: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n        total_supply: PublicMutable<U128, Context>,\n\n        symbol: SharedImmutable<FieldCompressedString, Context>,\n        name: SharedImmutable<FieldCompressedString, Context>,\n        decimals: SharedImmutable<u8, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.decimals.initialize(decimals);\n        storage.access_control._grant_role(DEFAULT_ADMIN_ROLE, admin);\n        storage.issuer_address.schedule_value_change(admin);\n    }\n\n    //############ AUTHORIZATION MODULE ############\n\n    #[public]\n    // #[aztec(view)]\n    fn has_role(role: Field, account: AztecAddress) -> pub Field {\n        storage.access_control.has_role(role, account).to_field()\n    }\n\n    #[public]\n    fn only_role(role: Field, caller: AztecAddress) {\n        storage.access_control.only_role(role, caller);\n    }\n\n    #[public]\n    fn grant_role(role: Field, account: AztecAddress) {\n        storage.access_control.grant_role(role, account);\n    }\n\n    /**\n     * @roles: onlyAdmin\n     * @notice: revoking a pause contract role when the contract is paused can cause the contract to be stuck in a paused state.\n     */\n    #[public]\n    fn revoke_role(role: Field, account: AztecAddress) {\n        storage.access_control.revoke_role(role, account)\n    }\n\n    #[public]\n    fn renounce_role(role: Field, callerConfirmation: AztecAddress) {\n        storage.access_control.renounce_role(role, context.msg_sender(), callerConfirmation);\n    }\n\n    //############ VALIDATION MODULE ############\n\n    #[public]\n    #[view]\n    fn get_operations() -> pub Field {\n        storage.validation_module.get_operations()\n    }\n\n    #[public]\n    fn set_operations(operations: SetFlag) {\n        storage.validation_module.set_operations(\n            context.msg_sender(),\n            operations,\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn add_to_list(newListAddress: AztecAddress, userFlag: UserFlags) {\n        storage.validation_module.add_to_list(\n            context.msg_sender(),\n            newListAddress,\n            userFlag,\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn remove_from_list(removeListAddress: AztecAddress, userFlag: UserFlags) {\n        storage.validation_module.remove_from_list(\n            context.msg_sender(),\n            removeListAddress,\n            userFlag,\n            storage.access_control,\n        );\n    }\n\n    //############ PAUSE MODULE ############\n\n    #[public]\n    #[view]\n    fn public_get_pause() -> pub Field {\n        storage.pause_module.is_paused().to_field()\n    }\n\n    /**\n     * @roles: onlyAdmin\n     * @notice: The contract must not be paused.\n     */\n    #[public]\n    fn pause_contract() {\n        let admin = context.msg_sender();\n        storage.pause_module.pause(admin, storage.access_control);\n    }\n\n    #[public]\n    fn unpause_contract() {\n        let admin = context.msg_sender();\n        storage.pause_module.unpause(admin, storage.access_control);\n    }\n\n    //############ ENFORCEMENT MODULE ############\n\n    #[public]\n    #[view]\n    fn get_frozen(user: AztecAddress) -> pub Field {\n        storage.enforcement_module.is_frozen(user).to_field()\n    }\n\n    #[public]\n    fn freeze(user: AztecAddress, value: FreezableFlag) {\n        storage.enforcement_module.freeze(context.msg_sender(), user, value, storage.access_control);\n    }\n\n    #[public]\n    fn unfreeze(user: AztecAddress, value: FreezableFlag) {\n        storage.enforcement_module.unfreeze(\n            context.msg_sender(),\n            user,\n            value,\n            storage.access_control,\n        );\n    }\n\n    //############ CREDIT EVENTS MODULE ############\n\n    //Note: as events are only allowed in the main contract, we have decided not to put them yet for this function.\n    #[public]\n    fn set_credit_events(credit_events: CreditEventsStruct) {\n        storage.credit_event_module.setCreditEvents(\n            credit_events,\n            context.msg_sender(),\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn get_credit_events() -> [Field; 3] {\n        storage.credit_event_module.get_credit_events()\n    }\n\n    //############ DEBT BASE MODULE ############\n\n    #[public]\n    fn set_debt_base(debt_base_: DebtBaseStruct) {\n        storage.debt_base_module.setDebt(debt_base_, context.msg_sender(), storage.access_control);\n    }\n\n    #[public]\n    fn get_debt_base() -> [Field; 12] {\n        storage.debt_base_module.get_debt_base()\n    }\n\n    //############ GETTERS ############\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_issuer() -> pub AztecAddress {\n        storage.issuer_address.get_current_value_in_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_issuer() -> pub AztecAddress {\n        storage.issuer_address.get_current_value_in_private()\n    }\n\n    //############ MINT ############\n\n    #[private]\n    #[internal]\n    //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    fn _mint_internal(to: AztecAddress, amount: Field) {\n        assert(!storage.enforcement_module.is_frozen(to), \"Frozen: Recipient\");\n\n        let issuer = storage.issuer_address.get_current_value_in_private();\n\n        increment(storage.balances.at(to), amount,to,to,to)\n\n\n        //note.emit(encode_and_encrypt_note(&mut context, to, to));\n        //encrypt the note for the issuer\n        //note.emit(encode_and_encrypt_note(&mut context, issuer, issuer));\n    }\n\n    /*\n    * @info : wether the contract is paused or not is checked in the _mint function\n    * @TODO: should we restrict the \"to\" address to not be the issuer, in order to prevent a \"malicious\" issuer from not\n    * revealing the \"real\" supply of the token, ex: by minting 100% of tokens to himself, he can hide the supply held by users\n    */\n    #[private]\n    fn mint(to: AztecAddress, amount: Field) {\n        Token::at(context.this_address())._mint_internal(to, amount).call(&mut context);\n        Token::at(context.this_address())._mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    //everyone can call this function, but will revert in _mint if not minter role\n    #[private]\n    fn mint_batch(accounts: [AztecAddress; MAX_ADDR_PER_CALL], amount: [Field; MAX_ADDR_PER_CALL]) {\n        assert(accounts.len() != 0, \"Mint module empty\");\n        assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n        let mut acc = 0;\n\n        for i in 0..accounts.len() {\n            //who is the caller here? contract or issuer, bc if it's the contract, it will fail\n            Token::at(context.this_address())._mint_internal(accounts[i], amount[i]).call(\n                &mut context,\n            );\n            acc += amount[i];\n        }\n\n        Token::at(context.this_address())._mint(context.msg_sender(), acc).enqueue(&mut context);\n    }\n\n    //############ TRANSFER ############\n\n    #[private]\n    #[internal]\n    //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    //in library, so I don't need to emit it again here. Problem is that I cannot emit to issuer here, as I don't have the note.\n    fn _transfer_internal(from: AztecAddress, to: AztecAddress, amount: Field) {\n        assert(!storage.enforcement_module.is_frozen(from), \"Frozen: Sender\");\n        assert(!storage.enforcement_module.is_frozen(to), \"Frozen: Recipient\");\n        storage.validation_module.operateOnTransfer(from, to);\n\n        let issuer = storage.issuer_address.get_current_value_in_private();\n\n        decrement(storage.balances.at(from),amount,from,from,from);\n        //note_sub.emit(encode_and_encrypt_note(&mut context,from,from));\n        //encrypt the note for the issuer\n        //note_sub.emit(encode_and_encrypt_note(&mut context,issuer,issuer));\n        increment(storage.balances.at(to),amount,to,to,to);\n        //note_add.emit(encode_and_encrypt_note(&mut context,from,to));\n        //encrypt the note for the issuer\n        //note_add.emit(encode_and_encrypt_note(&mut context,issuer,issuer));\n    }\n\n    /*\n    * @info : wether the contract is paused or not is checked in the _mint function\n    * NOTE: the nonce here is used to prevent replay attacks. By constraining it to be equal to 0 afterwards,\n    * we assure that the signature of this function call can only be done once \n    */\n    #[private]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n        Token::at(context.this_address())._transfer_internal(from, to, amount).call(&mut context);\n        Token::at(context.this_address())._transfer().enqueue(&mut context);\n        // Transfer { from, to, amount: amount.to_field() }.emit(\n        //     encode_and_encrypt_event_unconstrained(&mut context, from, to),\n        // );\n    }\n\n    /*\n    * as the max number of encrypted logs is 4 per call, and a transfer has 4 encrypted logs, batching the transfers won't work for more than one call, equivalent as not batching.\n    */\n    #[private]\n    fn transfer_batch(\n        accounts: [AztecAddress; MAX_ADDR_PER_CALL],\n        amount: [Field; MAX_ADDR_PER_CALL],\n        nonce: Field,\n    ) {\n        // assert(storage.rule_module.is_issuer(context.msg_sender()), \"Caller is not issuer\");\n        assert(accounts.len() != 0, \"Mint module empty\");\n        assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n\n        for i in 0..MAX_ADDR_PER_CALL {\n            Token::at(context.this_address())\n                ._transfer_internal(context.msg_sender(), accounts[i], amount[i])\n                .call(&mut context);\n        }\n        Token::at(context.this_address())._transferFrom().enqueue(&mut context);\n    }\n\n    //Same pattern as ERC20.\n    #[private]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        //the authwit is used to allow a thrid party to spend funds of a user upon approval.\n        //should we check if the 3rd party initiating this transaction is able to do the transfer?\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        Token::at(context.this_address())._transfer_internal(from, to, amount).call(&mut context);\n        Token::at(context.this_address())._transferFrom().enqueue(&mut context);\n        // Transfer { from, to, amount: amount.to_field() }.emit(\n        //     encode_and_encrypt_event_unconstrained(&mut context, from, to),\n        // );\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    // //############ BURN ############\n\n    // //we need an authwit from the user that has the notes to burn his notes.\n    // //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    // #[private]\n    // fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n    //     assert(!storage.enforcement_module.is_frozen(from), \"Frozen: Sender\");\n\n    //     if (!from.eq(context.msg_sender())) {\n    //         assert_current_call_valid_authwit(&mut context, from);\n    //     } else {\n    //         assert(nonce == 0, \"invalid nonce\");\n    //     }\n    //     let issuer = storage.issuer_address.get_current_value_in_private();\n\n    //     let note = storage.balances.sub(from, amount);\n    //     //note.emit(encode_and_encrypt_note(&mut context, from, from));\n    //     //encrypt the note for the issuer\n    //     //note.emit(encode_and_encrypt_note(&mut context, issuer, issuer));\n\n    //     Token::at(context.this_address())._burn(context.msg_sender(), amount).enqueue(&mut context);\n    // }\n\n    // //can nonce be the same for all accounts?\n    // #[private]\n    // fn burn_batch(\n    //     accounts: [AztecAddress; MAX_ADDR_PER_CALL],\n    //     amount: [Field; MAX_ADDR_PER_CALL],\n    //     nonce: Field,\n    // ) {\n    //     // assert(storage.rule_module.is_issuer(context.msg_sender()), \"Caller is not issuer\");\n    //     assert(accounts.len() != 0, \"Mint module empty\");\n    //     assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n\n    //     for i in 0..MAX_ADDR_PER_CALL {\n    //         //who is the caller here? contract or issuer, bc if it's the contract, it will fail\n    //         Token::at(context.this_address()).burn(accounts[i], amount[i], nonce);\n    //     }\n    // }\n\n    // //############ INTERNAL ############\n\n    #[public]\n    #[internal]\n    fn _mint(caller: AztecAddress, amount: Field) {\n        storage.access_control.only_role(MINTER_ROLE, caller);\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n        storage.total_supply.write(supply);\n    }\n\n    #[public]\n    #[internal]\n    fn _transfer() {\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n    }\n\n    #[public]\n    #[internal]\n    fn _transferFrom() {\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n    }\n\n    // #[public]\n    // #[internal]\n    // fn _burn(caller: AztecAddress, amount: Field) {\n    //     storage.access_control.only_role(BURNER_ROLE, caller);\n    //     assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n    //     let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n    //     storage.total_supply.write(new_supply);\n    // }\n\n\n    // //############ UNCONSTRAINED ############\n\n    // unconstrained fn balance_of_private() -> pub Field {\n    //     storage.balances.balance_of()\n    // }\n\n}\n\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"
    },
    "81": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/access_controlModule.nr",
      "source": "use dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, PublicMutable, Map, PrivateSet};\nuse dep::aztec::context::{PublicContext, PrivateContext};\n\n\n// Type alias for better readability\ntype Role = Field;\n\nglobal DEFAULT_ADMIN_ROLE = 1;\nglobal PAUSE_ROLE = 2;\nglobal ENFORCEMENT_ROLE =  3;\nglobal VALIDATION_ROLE = 4;\nglobal ADDRESS_LIST_ADD_ROLE = 5;\nglobal ADDRESS_LIST_REMOVE_ROLE = 6;\nglobal MINTER_ROLE = 7;\nglobal BURNER_ROLE = 8;\nglobal DEBT_ROLE = 9;\nglobal DEBT_CREDIT_EVENT_ROLE = 10;\n\n\n// Define the storage for role data\nstruct RoleData<Context> {\n    has_role: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n    admin_role: Role,\n}\n\n//Define the AccessControl storage\nstruct AccessControlModule<T,Context> {\n    pub roles: Map<Role, RoleData<Context>, Context>,\n}\n\nimpl<T,Context> AccessControlModule<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            roles: Map::new(\n                context,\n                storage_slot,\n                |context,storage_slot| RoleData::new(context, storage_slot)\n            )\n        }\n    }\n    }\n\n\nimpl<T> AccessControlModule<T, &mut PublicContext> {\n    // Get role storage\n    #[aztec(internal)]\n    fn get_role_storage(self: Self, role: Role) -> RoleData<&mut PublicContext>{\n        self.roles.at(role)\n    }\n\n    // Check if an account has a role\n    fn has_role(self: Self, role: Role, account: AztecAddress) -> bool {\n        let role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).read()\n    }\n\n    // Check role internally\n    #[aztec(internal)]\n    fn check_role(self: Self, role: Role, account: AztecAddress) {\n        assert(self.has_role(role, account),\"AccessControlUnauthorizedAccount\");\n    }\n\n    // Modifier to check role\n    fn only_role(self: Self, role: Role, caller: AztecAddress) {\n        self.check_role(role, caller);\n    }\n\n    fn getRoleAdmin(self: Self, role: Role) -> Role {\n        self.roles.at(role).admin_role\n    }\n\n    fn renounce_role(self:Self, role: Field, caller: AztecAddress, callerConfirmation: AztecAddress) {\n        assert(caller == callerConfirmation, \"Renounce Role: Addresses do not match\");\n        self._revoke_role(role, callerConfirmation)   \n    }\n\n    // Grant a role to an account\n    fn grant_role( self: Self, role: Role, account: AztecAddress) {\n        self.only_role(self.getRoleAdmin(role), account);\n        self._grant_role(role,account);\n    }\n\n    // Revoke a role from an account\n    fn revoke_role(self:Self, role: Role, account: AztecAddress) {\n        self.only_role(self.getRoleAdmin(role), account);\n        self._revoke_role(role,account);\n    }\n\n    fn _grant_role( self:Self, role: Role, account: AztecAddress) {\n        let mut role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).write(true);\n    }\n\n    fn _revoke_role(self:Self, role: Role, account: AztecAddress) {\n        let mut role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).write(false);\n    }  \n}\n\nimpl<Context> RoleData<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n\n        let has_role = Map::new(\n                context,\n                storage_slot,\n                |context,storage_slot| PublicMutable::new(context, storage_slot)\n            );\n        let admin_role = DEFAULT_ADMIN_ROLE;\n        Self { has_role: has_role, admin_role: admin_role }\n    }\n}\n"
    },
    "84": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/enforcementModule.nr",
      "source": "use dep::aztec::{prelude::{AztecAddress, SharedMutable, Map}, unencrypted_logs::unencrypted_event_emission,  context::PublicContext, context::PrivateContext};\nuse dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse crate::types::access_controlModule::{AccessControlModule,ENFORCEMENT_ROLE, Role};\n\nglobal FREEZED_FLAG: u64 = 1;\nglobal CHANGE_ROLES_DELAY_BLOCKS = 2;\n\nstruct FreezableFlag {\n    is_freezed: bool,\n}\n\ntrait FreezableFlagTrait {\n    fn get_is_frozen(self) -> bool;\n}\n\nstruct Freezable<T,Context>{\n    map: Map<AztecAddress, SharedMutable<T, CHANGE_ROLES_DELAY_BLOCKS, Context>, Context>\n}\n\nimpl<T,Context> Freezable<T,Context> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(\n                context,\n                storage_slot,\n                |context, slot| SharedMutable::new(context,slot)\n            )\n        }\n    }\n}\n\nimpl<T> Freezable<T, &mut PublicContext> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    pub fn is_frozen(self: Self, address: AztecAddress) -> pub bool{\n        self.map.at(address).get_current_value_in_public().get_is_frozen()\n    }\n\n    /**\n     * @dev Freezes an account. An account can be unfrozen\n     *\n     * Requirements:\n     *\n     * - The account must not be already frozen\n     */\n    pub fn freeze(self: Self,caller:AztecAddress, address: AztecAddress, val: T, ac: AccessControlModule<bool, &mut PublicContext>){\n        ac.only_role(ENFORCEMENT_ROLE, caller);\n        self._require_not_freezed(address);\n        self.map.at(address).schedule_value_change(val);\n    }\n\n\n    pub fn unfreeze(self: Self, caller: AztecAddress, address: AztecAddress, val: T, ac: AccessControlModule<bool, &mut PublicContext>){\n        ac.only_role(ENFORCEMENT_ROLE, caller);\n        self._require_freezed(address);\n        self.map.at(address).schedule_value_change(val);\n    }\n\n    #[aztec(internal)]\n    fn _require_not_freezed(self: Self, address: AztecAddress) {\n        assert(self.map.at(address).get_current_value_in_public().get_is_frozen() == false, \"error: address already freezed\");\n    }\n\n    #[aztec(internal)]\n    fn _require_freezed(self: Self, address: AztecAddress) {\n        assert(self.map.at(address).get_current_value_in_public().get_is_frozen() == true, \"error: address already unfreezed\");\n    }\n\n}\n\nimpl<T> Freezable<T,&mut PrivateContext> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    fn is_frozen(self: Self, user: AztecAddress) -> bool {\n        let user_roles: T = self.map.at(user).get_current_value_in_private();\n        user_roles.get_is_frozen()\n    }\n\n}\n\nimpl FreezableFlagTrait for FreezableFlag {\n    fn get_is_frozen(self) -> bool {\n        self.is_freezed\n    }\n}\n\nimpl FromField for FreezableFlag {\n    fn from_field(value: Field) -> FreezableFlag {\n        let value: u64 = value as u64;\n        let is_freezed = (value & FREEZED_FLAG) == FREEZED_FLAG;\n\n        Self {is_freezed }\n    }\n}\n\nimpl ToField for FreezableFlag {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_freezed {\n            value = value | FREEZED_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for FreezableFlag {\n    fn eq(self, other: Self) -> bool {\n        self.is_freezed == other.is_freezed\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<1> for FreezableFlag {\n    fn serialize(self) -> [Field; 1] {\n        [self.is_freezed.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<1> for FreezableFlag {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            is_freezed: fields[0] as bool,\n        }\n    }\n}\n\n"
    },
    "85": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/extensions/creditEventsModule.nr",
      "source": "use dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, SharedMutable, Map, PrivateSet, PublicMutable};\nuse dep::aztec::context::{PublicContext, PrivateContext};\nuse dep::aztec::{\n        unencrypted_logs::{unencrypted_event_emission::{emit, encode_event}},\n    }; \nuse dep::compressed_string::FieldCompressedString;\nuse crate::types::access_controlModule::{AccessControlModule,DEBT_CREDIT_EVENT_ROLE};\n\n\nglobal FLAG_DEFAULT_FLAG = 1;\nglobal FLAG_REDEEMED_FLAG = 2;\n\n\nglobal T_SERIALIZED_LEN = 3; \n\n    struct CreditEventsStruct {\n        flagDefault: bool,\n        flagRedeemed: bool,\n        rating: FieldCompressedString,\n    }\n\n    struct CreditEvents<T, Context> {\n        credit_event: PublicMutable<CreditEventsStruct,Context>,\n    }\n\n//NOTE: events can only be used in contracts from what I understand\n    // #[event]\n    // struct FlagDefault {\n    //     newFlagDefault: bool\n    // }\n\n    // #[event]\n    // struct FlagRedeemed {\n    //     newFlagRedeemed: bool\n    // }\n\n    // //the type of newRating should be a string\n    // #[event]\n    // struct Rating {\n    //     newRating: Field,\n    // }\n\n\nimpl<T,Context> CreditEvents<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            credit_event: PublicMutable::new(context, storage_slot),\n        }\n    }\n}\n\nimpl<T> CreditEvents<T, &mut PublicContext> {\n    /** \n    * @notice Set all attributes of creditEvents\n    * The values of all attributes will be changed even if the new values are the same as the current ones\n    */\n    fn setCreditEvents( self: Self, credit_events: CreditEventsStruct, caller: AztecAddress, ac: AccessControlModule<bool,  &mut PublicContext>){\n        ac.only_role(DEBT_CREDIT_EVENT_ROLE, caller);\n        let creditEvents = CreditEventsStruct {flagDefault: credit_events.flagDefault, flagRedeemed: credit_events.flagRedeemed, rating: credit_events.rating};\n        self.credit_event.write(creditEvents);\n            \n        //the below works here\n        //let context = self.credit_event.context;\n        //context.emit_unencrypted_log(  flagDefault_);\n        //the below only works in main contract\n        //FlagDefault{newFlagDefault: flagDefault_}.emit(encode_event(&mut context));\n    }\n\n    fn get_credit_events(self: Self) -> [Field; T_SERIALIZED_LEN]{\n        self.credit_event.read().serialize()\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for CreditEventsStruct {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.flagDefault.to_field(), self.flagRedeemed.to_field(), self.rating.serialize()[0]]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for CreditEventsStruct {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            flagDefault: fields[0] as bool,\n            flagRedeemed: fields[1] as bool,\n            rating: FieldCompressedString::from_field(fields[2]),\n        }\n    }\n}"
    },
    "86": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/extensions/debtBaseModule.nr",
      "source": "use dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, SharedMutable, Map, PrivateSet, PublicMutable};\nuse dep::aztec::context::{PublicContext, PrivateContext};\n\n    use dep::compressed_string::FieldCompressedString;\nuse crate::types::access_controlModule::{AccessControlModule,DEBT_ROLE};\n\n\nglobal T_SERIALIZED_LEN = 12; \n\n\n  struct DebtBaseStruct {\n        interestRate: Field,\n        parValue: Field,\n        guarantor: FieldCompressedString,\n        bondHolder: FieldCompressedString,\n        maturityDate: FieldCompressedString,\n        interestScheduleFormat: FieldCompressedString,\n        interestPaymentDate: FieldCompressedString,\n        dayCountConvention: FieldCompressedString,\n        businessDayConvention: FieldCompressedString,\n        publicHolidaysCalendar: FieldCompressedString,\n        issuanceDate: FieldCompressedString,\n        couponFrequency: FieldCompressedString,\n    }\n\n  struct DebtBase<T, Context> {\n    debt_base: PublicMutable<DebtBaseStruct,Context>,\n  }\n\nimpl<T,Context> DebtBase<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n          debt_base: PublicMutable::new(context,storage_slot),\n        }\n    }\n}\n\nimpl<T> DebtBase<T, &mut PublicContext> {\n\n  fn setDebt(self: Self, debt_base_: DebtBaseStruct, caller: AztecAddress, ac: AccessControlModule<bool,  &mut PublicContext>) {\n    ac.only_role(DEBT_ROLE, caller);\n    self.debt_base.write(debt_base_);\n  }\n\n  fn get_debt_base(self: Self) -> [Field; T_SERIALIZED_LEN] {\n    self.debt_base.read().serialize()\n  }\n}\n\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for DebtBaseStruct {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.interestRate.to_field(), self.parValue.to_field(), self.guarantor.serialize()[0], self.bondHolder.serialize()[0], self.maturityDate.serialize()[0], self.interestScheduleFormat.serialize()[0], self.interestPaymentDate.serialize()[0], self.dayCountConvention.serialize()[0], self.businessDayConvention.serialize()[0], self.publicHolidaysCalendar.serialize()[0], self.issuanceDate.serialize()[0], self.couponFrequency.serialize()[0]]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for DebtBaseStruct {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            interestRate: fields[0] as Field,\n            parValue: fields[1] as Field,\n            guarantor: FieldCompressedString::from_field(fields[2]),\n            bondHolder: FieldCompressedString::from_field(fields[2]),\n            maturityDate: FieldCompressedString::from_field(fields[2]),\n            interestScheduleFormat: FieldCompressedString::from_field(fields[2]),\n            interestPaymentDate: FieldCompressedString::from_field(fields[2]),\n            dayCountConvention: FieldCompressedString::from_field(fields[2]),\n            businessDayConvention: FieldCompressedString::from_field(fields[2]),\n            publicHolidaysCalendar: FieldCompressedString::from_field(fields[2]),\n            issuanceDate: FieldCompressedString::from_field(fields[2]),\n            couponFrequency: FieldCompressedString::from_field(fields[2]),\n        }\n    }\n}\n"
    },
    "88": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/pauseModule.nr",
      "source": "use dep::aztec::{prelude::{AztecAddress, PublicMutable},  context::PublicContext};\nuse dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse crate::types::access_controlModule::{AccessControlModule, PAUSE_ROLE, Role};\n\n    global PAUSED_FLAG: u64 = 1;\n    global T_SERIALIZED_LEN = 1;\n\n    trait BoolEmulTrait {\n        fn get_pause(self) -> bool;\n        fn set_pause(&mut self, arg: bool);\n    }\n\n    struct BoolEmul {\n        is_paused: bool,\n    }\n\n    struct PauseModule<T,Context>{\n        is_paused: PublicMutable<T, Context>,\n    }\n\nimpl<T,Context> PauseModule<T,Context> where T: Eq + Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> + ToField + FromField + BoolEmulTrait{\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            is_paused: PublicMutable::new(context,storage_slot),            \n        }\n    }\n\n}\n\nimpl<T> PauseModule<T,&mut PublicContext> where T: Eq + Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> + ToField + FromField + BoolEmulTrait{\n\n\n    pub fn is_paused(self: Self) -> bool{\n        let val: T = self.is_paused.read();\n        val.get_pause()\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    pub fn pause(self: Self, caller: AztecAddress, ac: AccessControlModule<bool, &mut  PublicContext>){\n        ac.only_role(PAUSE_ROLE, caller);\n        self._require_not_paused();\n        let mut val: T = self.is_paused.read();\n        val.set_pause(true);\n        self.is_paused.write(val);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    pub fn unpause(self: Self, caller: AztecAddress, ac: AccessControlModule<bool, &mut  PublicContext>){\n        ac.only_role(PAUSE_ROLE, caller);\n        self._require_paused();\n        let mut val: T = self.is_paused.read();\n        val.set_pause(false);\n        self.is_paused.write(val); \n    }\n\n    #[aztec(internal)]\n    fn _require_not_paused(self: Self) {\n        assert(self.is_paused.read().get_pause() == false, \"error: contract already paused\");\n    }\n\n    #[aztec(internal)]\n    fn _require_paused(self: Self) {\n        assert(self.is_paused.read().get_pause() == true, \"error: contract already unpaused\");\n    }\n\n}\n\nimpl BoolEmulTrait for BoolEmul {\n    fn get_pause(self) -> bool{\n        self.is_paused\n    }\n\n    fn set_pause(&mut self, arg: bool) {\n        self.is_paused = arg;\n    }\n}\nimpl FromField for BoolEmul {\n    fn from_field(value: Field) -> BoolEmul {\n        let value: u64 = value as u64;\n        let is_paused = (value & PAUSED_FLAG) == PAUSED_FLAG;\n        Self { is_paused }\n    }\n}\n\nimpl ToField for BoolEmul {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_paused {\n            value = value | PAUSED_FLAG;\n        }\n        value.to_field()\n    }\n}\n\nimpl Eq for BoolEmul {\n    fn eq(self, other: Self) -> bool {\n        (self.is_paused == other.is_paused) \n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for BoolEmul {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.is_paused.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for BoolEmul {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            is_paused: fields[0] as bool,\n        }\n    }\n}\n\n"
    },
    "89": {
      "path": "/Users/gustavecharles/Documents/taurus/private-tokens/src/types/validationModule.nr",
      "source": "use dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, SharedMutable, Map, PrivateSet, PublicMutable};\nuse dep::aztec::context::{PublicContext, PrivateContext};\n\nuse crate::types::access_controlModule::{AccessControlModule,VALIDATION_ROLE, Role, ADDRESS_LIST_ADD_ROLE, ADDRESS_LIST_REMOVE_ROLE};\n\nglobal BLACKLIST_FLAG: u64 = 1;\nglobal WHITELIST_FLAG: u64 = 2;\nglobal SANCTIONLIST_FLAG: u64 = 4;\n\nglobal CHANGE_ROLES_DELAY_BLOCKS = 2;\n\nglobal TEXT_ADDRESS_FROM_IS_BLACKLISTED = \"The sender is in the blacklist\";\nglobal TEXT_ADDRESS_TO_IS_BLACKLISTED = \"The recipient is in the blacklist\";\nglobal TEXT_ADDRESS_FROM_NOT_WHITELISTED = \"The sender is not in the whitelist\";\nglobal TEXT_ADDRESS_TO_NOT_WHITELISTED = \"The recipient is not in the whitelist\";\n\nstruct SetFlag {\n    operate_blacklist: bool,\n    operate_whitelist: bool,\n    operate_sanctionlist: bool,\n}\n\nstruct UserFlags {\n    is_blacklisted: bool,\n    is_whitelisted: bool,\n    is_in_sanction_list: bool,\n}\n\ntrait UserFlagsTrait {\n    fn get_is_blacklisted(self) -> bool;\n    fn get_is_whitelisted(self) -> bool;\n    fn get_is_in_sanction_list(self) -> bool;\n}\n\nstruct ValidationModule<T,Context> {\n    map: Map<AztecAddress, SharedMutable<T,CHANGE_ROLES_DELAY_BLOCKS ,Context>, Context>,\n    operationsFlag: SharedMutable<SetFlag,CHANGE_ROLES_DELAY_BLOCKS, Context>\n}\n\nimpl<T,Context> ValidationModule<T,Context> where T: Eq + ToField + FromField + UserFlagsTrait{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(\n                context,\n                storage_slot,\n                |context, slot| SharedMutable::new(context, slot)\n            ),\n            operationsFlag: SharedMutable::new(context, storage_slot)\n        }\n    }\n}\n\nimpl<T> ValidationModule<T, &mut PublicContext> where T: Eq + ToField + FromField + UserFlagsTrait{\n    fn get_operations(self: Self) -> Field {\n        let operations = self.operationsFlag.get_current_value_in_public();\n        operations.to_field()\n    }\n\n    fn set_operations(self: Self, caller: AztecAddress, operations: SetFlag, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(VALIDATION_ROLE, caller);\n        self.operationsFlag.schedule_value_change(operations);\n    }\n    //problem: here the one that has the ADDRESS_LIST_ADD_ROLE can also remove from list by overwritting userFlag\n    fn add_to_list(self:Self,  caller: AztecAddress, newListAddress: AztecAddress, userFlag: T, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(ADDRESS_LIST_ADD_ROLE, caller);\n        self.map.at(newListAddress).schedule_value_change(userFlag);\n    }\n\n    fn remove_from_list(self:Self, caller: AztecAddress, removeListAddress: AztecAddress, userFlag: T, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(ADDRESS_LIST_REMOVE_ROLE, caller);\n        self.map.at(removeListAddress).schedule_value_change(userFlag);\n    }\n}\n\nimpl<T> ValidationModule<T,&mut PrivateContext> where T: Eq + ToField + FromField + UserFlagsTrait{\n\n\n    fn operateOnTransfer(self: Self, from: AztecAddress, to:AztecAddress) {\n        let operations = self.operationsFlag.get_current_value_in_private();\n\n        if (operations.operate_blacklist) {\n            self.detectTransferRestriction_blacklist(from,to);\n        } else if(operations.operate_whitelist) {\n            self.detectTransferRestriction_whitelist(from,to);\n        } else if (operations.operate_sanctionlist) {\n            self.detectTransferRestriction_sanctionlist(from,to);\n        }\n    }\n\n    #[aztec(internal)]\n    fn detectTransferRestriction_blacklist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(!self.map.at(from).get_current_value_in_private().get_is_blacklisted(), TEXT_ADDRESS_FROM_IS_BLACKLISTED);\n        assert(!self.map.at(to).get_current_value_in_private().get_is_blacklisted(), TEXT_ADDRESS_TO_IS_BLACKLISTED);\n    }\n\n    #[aztec(internal)]\n    fn detectTransferRestriction_whitelist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(self.map.at(from).get_current_value_in_private().get_is_whitelisted(), TEXT_ADDRESS_FROM_NOT_WHITELISTED);\n        assert(self.map.at(to).get_current_value_in_private().get_is_whitelisted(), TEXT_ADDRESS_TO_NOT_WHITELISTED);\n    }\n\n    #[aztec(internal)]\n    fn detectTransferRestriction_sanctionlist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(false, \"not implemented.\");\n    }\n\n}\n\nimpl UserFlagsTrait for UserFlags {\n    fn get_is_blacklisted(self) -> bool {\n        self.is_blacklisted\n    }\n    fn get_is_whitelisted(self) -> bool {\n        self.is_whitelisted\n    }\n    fn get_is_in_sanction_list(self) -> bool {\n        self.is_in_sanction_list\n    }\n}\n\nimpl FromField for UserFlags {\n    fn from_field(value: Field) -> UserFlags {\n        let value: u64 = value as u64;\n        let is_blacklisted = (value & BLACKLIST_FLAG) == BLACKLIST_FLAG;\n        let is_whitelisted = (value & WHITELIST_FLAG) == WHITELIST_FLAG;\n        let is_in_sanction_list = (value & SANCTIONLIST_FLAG) == SANCTIONLIST_FLAG;\n\n        Self { is_blacklisted, is_whitelisted, is_in_sanction_list }\n    }\n}\n\nimpl ToField for UserFlags {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_blacklisted {\n            value = value | BLACKLIST_FLAG;\n        }\n\n        if self.is_whitelisted {\n            value = value | WHITELIST_FLAG;\n        }\n\n        if self.is_in_sanction_list {\n            value = value | SANCTIONLIST_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for UserFlags {\n    fn eq(self, other: Self) -> bool {\n        (self.is_blacklisted == other.is_blacklisted) & (self.is_whitelisted == other.is_whitelisted) & (self.is_in_sanction_list == other.is_in_sanction_list)\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<3> for UserFlags {\n    fn serialize(self) -> [Field; 3] {\n        [self.is_blacklisted.to_field(), self.is_whitelisted.to_field(), self.is_in_sanction_list.to_field()]\n        // [self.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<3> for UserFlags {\n    fn deserialize(fields: [Field; 3]) -> Self {\n        Self {\n            is_blacklisted: fields[0] as bool,\n            is_whitelisted: fields[1] as bool,\n            is_in_sanction_list: fields[2] as bool,\n        }\n    }\n}\n\n\nimpl FromField for SetFlag {\n    fn from_field(value: Field) -> SetFlag {\n        let value: u64 = value as u64;\n        let operate_blacklist = (value & BLACKLIST_FLAG) == BLACKLIST_FLAG;\n        let operate_whitelist = (value & WHITELIST_FLAG) == WHITELIST_FLAG;\n        let operate_sanctionlist = (value & SANCTIONLIST_FLAG) == SANCTIONLIST_FLAG;\n\n        Self { operate_blacklist, operate_whitelist, operate_sanctionlist }\n    }\n}\n\nimpl ToField for SetFlag {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.operate_blacklist {\n            value = value | BLACKLIST_FLAG;\n        }\n\n        if self.operate_whitelist {\n            value = value | WHITELIST_FLAG;\n        }\n\n        if self.operate_sanctionlist {\n            value = value | SANCTIONLIST_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for SetFlag {\n    fn eq(self, other: Self) -> bool {\n        (self.operate_blacklist == other.operate_blacklist) & (self.operate_whitelist == other.operate_whitelist) & (self.operate_sanctionlist == other.operate_sanctionlist)\n    }\n}\n\nimpl Serialize<3> for SetFlag {\n    fn serialize(self) -> [Field; 3] {\n        [self.operate_blacklist.to_field(), self.operate_whitelist.to_field(), self.operate_sanctionlist.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<3> for SetFlag {\n    fn deserialize(fields: [Field; 3]) -> Self {\n        Self {\n            operate_blacklist: fields[0] as bool,\n            operate_whitelist: fields[1] as bool,\n            operate_sanctionlist: fields[2] as bool,\n        }\n    }\n}"
    },
    "92": {
      "path": "/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.63.1/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    }
  }
}
