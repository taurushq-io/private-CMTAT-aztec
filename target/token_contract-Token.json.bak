{"noir_version":"1.0.0-beta.1+4ca7394b2efd7aef","name":"Token","functions":[{"name":"_burn","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1195658528669718198":{"error_kind":"string","string":"Function _burn can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"11282533039261485053":{"error_kind":"string","string":"Error: token contract is paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16646908709298801123":{"error_kind":"string","string":"attempt to subtract with underflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["_burn"]},{"name":"public_get_pause","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"6876750609332359971":{"error_kind":"string","string":"Function public_get_pause can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71UUU+DMBAuY0RRl5ip0QdfNDHxsazMzbeZxQdfNHG/oNLWkGBmAI2P++lCcmzdDZAJ7EuaO0r73d3XXg2yggG2S9ZhkAowSuZuwdpgO9p/MxkT+Kb14NgobpP8Y+q6dk59DebPbOA02uGnGX9L+tM94JkuVvx6LVnc/WQcgt8r2dNmvsl5LvU2W+BP4JwU5J9pcAn+UTKOweffHy+f3lzIByFCGUV6X2E9y7ANZ2cLzgvM+fwVBL7yZfj440fxBreZw535HZJfG85LX6cjr19STMDSenAsVEMfbHp215omZ1iTp2gW89j3pjwI/nuA+PI3WRhBhVmkuFmxCOeaCDeaCKdYhFk8D/m7fJVcVNWg6sU0yeblwpwmKW6+FD1SXHP6OGWPfXexvn8C87QGRmNKl3kCv4XyIyi+hdZfwfeBln9muzXyVCPuKMYVH3IhXI/3ET9BOjUd/006kimlmOSuulM7jz9Mgg4ok/eSuYIN2F/xfwGWhwcwQgkAAA==","debug_symbols":"7ZbdaoNAEIXfZa+9mJ2Z/curlBJMYoIgGowplJB3725w1URBmprSi96IK9/sHGd2D3MRu2xzPqzzcl+dxOrtIopqmzZ5VfrV5ZqITZ0XRX5YDz8LCA+JN/50TMuwPDVp3YiV1A4SkZU7/2oA/A77vMjESuM1GcMAKsKAqoMlwQTNzKalmZXuaZja21K3tyWUd/R7IiQtoN5ihG8aflE9L6CeZVd7PVd7qXRHa2lm1DtykXZMPFKvFlUv4V59yKBfnsG8PIP9cQbPxjOnHdJc10DH8+zAqlHX3Df1+BiEJ2LkEzH4RMykAyiyro1RLN1MB9FEWKKzHWwnr5Dk3i704ApN0oYstbRh4JnWGdlZkcEHu5hSAkT9ydP6sdXIf7s0pi/NQMf0zzJCpBlxRgg5E68kOXsHh7Ko/7KMynL1q4+0ztNNkbUzw/5cbgcjRPN5zB6miWNdbbPduc7CXDEYKYJdoE2Igt8EHyBOSPscPs8X","brillig_names":["public_get_pause"]},{"name":"has_role","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"role","type":{"kind":"field"},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1808206654315940758":{"error_kind":"string","string":"Function has_role can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["has_role"]},{"name":"remove_from_list","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"removeListAddress","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"userFlag","type":{"kind":"struct","path":"types::validationModule::UserFlags","fields":[{"name":"is_blacklisted","type":{"kind":"boolean"}},{"name":"is_whitelisted","type":{"kind":"boolean"}},{"name":"is_in_sanction_list","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["remove_from_list"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VTvQ6CMBBu+YmCMqiJbia+QREMjCbuvkMDMuqAixuPLjXX9FKbMLQ18Uuaa+Hy/ZSDEgUKNSIWkCQHqAnUAL0Px3WGM7NDnmi6LvlrVhaJIZ9D/x9+6sm/gOT3dP9sBjyXQfHjLFJ3Pq4UzYSvzPKb+cy8mci5+kHOEcdM08aghmehoYci3zvYZ4Y+iQVR/3Q0uM9V1YxJvRD4Y/LtHevHWv8WzqnmX9TIwmdX8bwreMdPvG3Lhq81foEA3dM/z8Ie9lOzgDMuiZqN/nVvro/nrScTECRvfuFT84YGAAA=","debug_symbols":"ndLNCoQgFAXgd7nrFl4r+3mVGMLKQhALq4EhevfRiJlmaKObi0f8rpuzQSeadail7scZymoDNbZ8kaO2adsjaIxUSg719RqIG4jH+3ni2sV54WaBkhYkAqE7d8qt76USUDK6PyJA6i1ib5F4i9RX0Ns/kJA8Ow0SxOSjkLGDpWGMhbEsjOVBLMZ7hhn7siL9ZbuNT24kb5Q469avur20b3lN4q+Ikxlb0a1GuEpe2mhnhVlEqV1rV78B","brillig_names":["sync_notes"]},{"name":"private_get_symbol","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18192277837884173995":{"error_kind":"string","string":"Function private_get_symbol can only be called statically"}}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_plaintext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8861757336002045335":{"error_kind":"fmtstring","length":99,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"9862881900111276825":{"error_kind":"fmtstring","length":35,"item_types":[{"kind":"field"}]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["process_log"]},{"name":"get_credit_events","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71YS2/TQBBeN14nthslPA78CSS7CX3cihAnJJDoHcnUNkQqFKUtAnHxDQn+NNmyk34ez6ap6u1K1r5mv29mdnZ2k0D9LzurL7DtULVLAPWAje8oR9kkSIB/bR2DEkh0bPvZ/UoeOwzpA/8wm+/HquuwHvWfxRYz8IOfxWyP+sYfWpxXzQ1+IMTGaPU9Um0ZjJsBW6tgPlbtAO15j9d7EHrAX5XZmGxsun6hubBpc+OchrkQ/PmB+cfHHqN/fPjf+OeJQ3+yc2Hbu6tvatvF9y/vvp2el9XLslxWFxcYNxxrU7kL5uAOmM845turs7NFvaiWr38sLi472KGATW2eX3ccerkSthQfphzbOrtfyTWzgWw3e3fu0KFH/mys5AsMeT2d7XnA+JTqxgnyJ8rrWcoDxkf6cP9g/jFzWtB1KsxhDOEc8miB56Gwxsr9JtlmryQeKS/5zome43b9LkD/9oR9QNiRH91z2mPpfBnO5zBuPnqjaNV9Z+Aeaib/BjAz254o9xsnUN1ztuldsynuB4JtE4FPs3WhQ6/bsFGfsAf9UY/oDvq78oMLG7k9v3X3AmbPtv4ZCvKRYOdE8AGtHQs8wcPYvfUdR/yJks/YcT/6rO+4bX8/jDf4fKrkXKUAT9rvSOCRsMIesSguUnUTK0PBJsIdMW4sph+zPsYdrTVv2ae2vX7LnlyeL4tP1fuqKHk8Iifnk7i5HMVyAvN93qvki9Tiue6EBOZR/sTWxs6lbUu/74Zgjylh48WeudHjCvTg+6qBF+1S6sZulOe5KxXkEyZjypTJS/En5UH0ecSwUJeY2YjrCJff/aYMmzbndQ1j5B/awxHKs7kY5sKmzZPYfgg8iEV6aCb/2fYnto5gDa2fCvwR42/pLYzxuzQW5GNB3vi0sG2ztz7j+eAwy9Z3vcXXqv2eUoxfM/mvto8xSnV4Dz3rgyKvZ0VdvCjKcn5aPGb46LPUA//HKq9mdV3PqmJe79cPzl8dHpXZUV0VeZ7vlVl1G78Uz5gfTaEzgWcG5QlPM/mfJLv6ftk2/68M+Yzcnw1ygaO+xhDGwqY9Jp0lzDEkT9xJ09WR5lKYw9xtyq7to78Qi/TQTP637dOeYF6g9VOBf8T4W3oLYzzHpIJ8Ksib/aHh9b0L3H2/Ha85GT6Ocd0odkxc/wNYv9bJVRkAAA==","debug_symbols":"5VvLjuIwEPyXnHNwu9svfmW1GvEIo0gooAArrRD/Pg5KwiNRfGGI5b6gGEpxVcVA2W5fsk2xOn9/ldV2f8wWfy7Zbr9ensp95VuXa56t6nK3K7+/Ht/ORPMC9oY/HpZV0zyelvUpW4B2Is+KauMvjRD+DttyV2QLLa/5ECyE6sBCqh4MKEbQRGRaNJHSd7QYu7fF/t4WJTyh/+YZuDewt7ID3zh8jr0Ub2BP0HuvQ96D0j1agwmwd+g6tCOkAXt4K3sQz+ybHuSv94C/3gON9aCd6nrQzqnpHiRq14KlfyQ92JgxOkD34awfHrEdGxAGLbZoQ4ICA8II1Un1l3IwIBQfqZqPVMNHquUj1bGRioKPVOAjVfKRinykEh+pfNIS8klLyCctIZ+0REl9V43tpRo3kJrSUwVNHdpP5AdSI8/A5i4VXEAqqn6tBjXoaSIosVvEQklPYG+Lijwvz2VL5Nl6Llsiz+GfsUXRqy2RZ/a5bCG2tvS7DCifWTe2RJ4v5rIl8nnDXLZEPsf4kC3u1ZbIk+tctrBNuai6zVdE/fpPpNmm3Glb2KbcaVvYptxpW96bckngNBtpje7A7qFWo2VDUbFRUbHRUbExUbGxUbFxMbExIio2EBUbGRWbqH6LDZ8Vc5PS7paEjrWRcrBiblLa3QKnpqQmtQ/STxC9VAigAQRiT0VoPbAmpdqh6S0im1LtUEBqSrVDAakp1Q4FpKZUOxSQSnykppSuAlJTSlcBqUmlq2mpfKpMLJ+05PikJcclLV1989+yLperXdEeJtyeq/XD2cLT/0PxcszwUO/XxeZcF82Bw/tZw2Z4AJgc0HoLm2TiKAdBvgG3z4TK/YyjacINCr6JnoKn8QM=","brillig_names":["get_credit_events"]},{"name":"add_to_list","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"newListAddress","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"userFlag","type":{"kind":"struct","path":"types::validationModule::UserFlags","fields":[{"name":"is_blacklisted","type":{"kind":"boolean"}},{"name":"is_whitelisted","type":{"kind":"boolean"}},{"name":"is_in_sanction_list","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["add_to_list"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"364657447181031001":{"error_kind":"string","string":"invalid admin"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["constructor"]},{"name":"set_operations","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"operations","type":{"kind":"struct","path":"types::validationModule::SetFlag","fields":[{"name":"operate_blacklist","type":{"kind":"boolean"}},{"name":"operate_whitelist","type":{"kind":"boolean"}},{"name":"operate_sanctionlist","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_operations"]},{"name":"get_operations","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16260118954846068608":{"error_kind":"string","string":"Function get_operations can only be called statically"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VbTYgjRRSuTtKTdHoynTi7q3fBi4LdScaZxcvo4sHLKi6eRKE3PzI4y8rMrCyechIEwYN48SYoCB48eBLEi3jx4NG7ePAqePTi9FAv+fLldSeZ6cpgQejueq/eb9WrqlcVz8yKZ581M188s0LxCuq+sS+B/a4AvHr+O7Tf8dVKEhDfMukfxP1+oOhXovy9wNL03NCPhb4j+8d1S+fOZEYfdRG+jfNfaN9bBW1cynvuz6m9qw7on5dkN0d+scEzVtHt81/b1qcfPHjt/cHD4eil4fBkdHqK44ppFZV1aFbXoPkU07z76Pj4aHw0Onnl8dHp2QLtmkJb3itUV8mRC+uxaP0jK4f2GV+tJD7p8IR9Zr57Dnx3k23y6um9s/TsaHAnPT6+rLEDYl6mYsLft/R8RbYawQT3STDC82CEG2yEl48fDt67++jB/dHJZW1QJd7aYK2axY7mKzQ03aTeoa2nQdcvn3a3ZWlvmXn7GtCpTrqWxLvnET+xNdYh/ybJWnaw9YifyMP2kWAhtmsosrYVGPYZhCGfhsJHo+WTDNg3NuS//mX957uRp9B/vmLX6/SfC1qRWfS3T3w029QL+GB7wQuUdof2Ga9XulzBPhHeyBcX6SX2n71V+7Pwb5pFX7jozwHJk9c3xHZNRda2AuM+2FT4NBU+/yda0kc3NTZaSjsv5yl8uI75aDJHigwN0kdbw/gFfNadXy6rjyZz0bhfl4/jOBFr9gpIj2aJeoSEc1iyHjheQuK97caG041zyw39rtDfcUM/ET9r80K2VnwL6rNfZL99MxuL2LYFcMT/A2i+Y99l7OM6uJnDD2Mp4oc5/Ab2KfZru7Ff/ATQNcQrUOQtkfe4RTpjaSl6c2zvAIzjJOrFsW0XYOgvLlX6RltkNLvejC7jSdH6CM+FoaKHwCJFD20+2iIYxvaQYBgvI4KhPTAZkzePhVDH+FsKPsoVkK4VRZ9V9lWO+ufK+yrhv6l9VZFdjVlchxb1E4Txem/ddZhrWi36Frj2FD5cx3y0XNOyOeUjqMd2eXPKNsAR/zeg+bF91+LFKrbU8iKCr+1p64pukcJP2spYw/hwnXOBloxGHbGg3Jk+H64Qt7Wx0yYYxtEOwXDNi3MRyiKyLvNfqOCjH2RtpfmP15GO1mHO/Sdyr+s/tBP7D+dd9h+ut9l/O2Ze1mX+ixR89IPoofkvona4TufcN8uC+Egjby2KsUvqMaYVnSkI/nf2mX1/a9+1eNokGNosJBjOp9tA//sC+vUC+o0C+kEBfeyXXs7TmNX2kuiD7P3QfsdXLG2z3Fci1w+g648kn+dGvkSTz1PkEFnFbj8Bzs/2PVJkrZIeFTd6dD0zb9uGfWd5eL2h+QV14jXCL4Dz6/Xr3S9b71V0qio64dhqFfAPjZ6jqxHtrRzaUsd5RG2vop6d3jt7eJK+O3pjlA49ooE8mZ/Gm/HE147y3j2xhcTqvPVtA+CI/7t9ZvBPaM6uTmbtfdAnK7WJE336mRyfghzsVx/4ol7GFO9Z2E6Iz7ngrGh7be5/2l4bbb5DtHA+4bkP2wld3Mdw7ulPwHnaNnach5rG0w7IpOndJpkF/y/7xL7mURu0ZdF6raPgtwnHGD1H0yEYtmsQDPNXnDeUNWdNoZ29c95Q8P+2T/EX5rpc5w13SYcO6KDZkffFgh9aopmP/iGbaflAzZ6cR9PygZEid5Psd9ON/aax9RbYoKrIepNsJPj/2uey2Iq53KzUJk70UWOrzIUX8gNf1MuYmd6Iz2PyloKPvhGbtQmfxyd+Iy20+Q7hiw23cvDxTGEO39ojs83X3rx8OKffINlxndIh2Kq5212QeTMxPEk4L49Fy8vzPIXjkHNxNwDG+zfsB+vm88UW6+bzy4hDuAe+kG+yKNd1jFvxQ1Z43OIYrSr4PG6LxrlnFu9FoC+5f+OY2SXYqmOG103YX8Q3OGaKYoan0NXWXBHQlfNIl37dP4hj4S99SuYXLjWAI/6zlgCPp+x5lf3keD9Nxr10nO6lw2F/kPI6Iiu4dyub//1RMuqNx+PeKO2PXxhvnP8oSfcPBnHa3et1k/FBvIw/Xi53fN7Vc3xPMXa8X020fJ7oktnsgMa0wHDthW0xB4r4r3szmi/ady3HID7VznQqBGObI0y7Y+j4bk2/6P6Mdh/mOu7/Cf+mWYzlLs5dtXMYbR/p+M7ONAen5fa1+3jZfLhjFn2G8gkt3G/yuWDRPZetFW1TlPtom8W50ydYRZFByzHy/WHtTBNzg9r488gOeXGiTvhF956Rv0/034S48pjiSkA8EKbd2dDulnBcQf9zXHF0Ttjn9VSeTXfIRoL/tlVey/No53LaeGAZEB/15rU7nr1FZK/Ijb2meYL2Envl7UGHBfbS9A8K7KXl0aICe6EtsS3zZttKu031xWW25b4o+MeKbbW9HOaUslKbONFnT9vL4RzhA9+88YL4q/hfGy9twkd/azGe94DIt0UwjM18rw1jPJ4TPyabLFsf4ppbO/tG2TG3qf05FGlgu0oOjTw+ZgkfoRPk1B/a7/hqZboWElvXzOz8T5NrU+ewwq9uis8jpd5X5K8q+Js6T11Xfm9F+Vsmv19puQq+a4d8xWZO9sUHt4fx7fEoTZKkO4xHy/bF05zKZAbHmJuV+mRmo6qCL/R8wv/MEshiwucQOy5wFX4Z3lcFeF7O84KGUlebzNcFk0X86mQRX3g3J4syCiwEGM4HWdm232gvpCVy+IT/pSUgPmlAG2nfVvg3iP+c3Eod/zk8VPBDBT/zzxe20fQsG3iXvVe84En0sY5lk77jYlz199L9QbqfJLf7yaif7C0bV/8BOZGObkZEAAA=","debug_symbols":"7Z3dbts4EIXfxde5IIfDv75KsSiSNC0MGEmRpAssir77ytmQdiLZBLVqRA/PTRHXM9bofJQ8PJbEX5uvdzc/v3/Z3n97eNp8+vxrs3u4vX7ePtwPr379vtrcPG53u+33L8f/vVH7fzS9xD/9uL7fv3x6vn583nzSLqqrzd391+FPr9TwCd+2u7vNJ0e/r8bBStkUrMjmYG3URDQz+9doZusO0Wrqs4PJnx0M6TfRf11ttFmg+kAp+KWGD6yeF6ieddbelbTX1uVop32h+mhiio5seFS9XbR6rd5Wv9+C++Nb8H98C+F/b2GITWPORTIlasql8RxVsCNqsbKeIYfUjBw9I4dm5EyeAZhNzIepj+f1JW2TvqTjYZwHM3UCiCpVw/H4ZBfcRLQNPn20DVGXThfOhHS6cDa+R0e84q4eH//Dru7LsW2V49oqx390Ocy5HOdK45JDGmnWEhWiDetUtRn2tRAdHMc8io+iKUztJAeVFQlHlRi2LzIGyLiEjBEyLiCjUZBxCRk1ZFxCRoKMS8hoIOMSMjJkXEJGCxmXkNFBxiVkxCxmERk7nsXELKM3riBjYMrR7H0h2liXdpIOthC5SfViEoRI0/lgS+lzLfnj0D3JjidSskhyx3M5YSQ7nk4KI9nxjFYYyY4n1cJIMkgKIdmxtSCMZMfuhjCSHRsswkjC45FCEh7PJZF06TIc6/Q7khYejxSS8HikkITHc0kkc6x7G7onCY9HCkkGSSEk4fFIIQmPRwpJeDxSSMLjkUISHo8Qkg4ejxSS8HikkITHI4UkPB4pJBkkhZCExyOFJDyeZknu8cC4aRoP3Jim8cBiaRmPh2/SNB6YIU3jgcPRNB7YFk3jYeBpGQ8MhqbxwDVoGg9cg6bxwDVoGg9cg5bxBLgGTeOBa9A0HrgGTeOBa9A0HgaelvHANWgZT0RrsDIeMgc8bN/jwcltZTw+F03emNnBe5Y4E14QS+2ceQ3WLry/XT3CbJXDEs6sHJawceWwhOd7SSy9Tx+sfXzfx2oFh1gQTEwaBcGE+ywIJrxqQTAZMOXAhPsjCCbsH0Ew4f8IggkDSBBMOEByYGo4QIJgwgESBBMOkCCYcIAEwWTAlAMTDtAlwYyaEsxIY5hwgATBhAMkCGbjDpBLxQ9cfSHam5AukPGsDoUMP9pORSurU7Sy9Cb6RZnG7ZT1lKHGvYkVlWl8or+iMo3PmldUpvEp6IrKMJQ5oUzjk6MVlWl8prGiMo237Ssqgx74lDLogU8oY9ADn1IGPfApZbhfZXzIyhztY1am3+8m7VIlXns1VkbUd5M/KKNjQZngyCb7zJlja47/U0bUd9OSyrCo76ZFlRH13VSnjDIHZXisjCh/ZlFlRPkziyrDUOaEMqL8mUWVEeXPLKqMqB54UWU67oELynTcA59XxnbcA+frqoILE8p03AMXlOm4By4o03EPbPmgjB0rw1DmhDId98AFZTrugQvKdNwDF5TpuAcuKNNxD3xeGddxD1xQpuMeuKBMvz3w8MNdUsazGyvTbw9cUoahzAll+u2Bhx+2D8r4N8pM7KQP6Xc78vEQbehVx3475mV17Le/XlbHNbvxULpNSUeTHxQbXRidlZZYHoxUkpPo6K6iyer94UYoz0YdB+/LWWI5rCXL0W2VQ22VYz+6nJDLsVqPynFNlRNVW+V89FC2QaVynKJROdRWOaatcnxb5YQPLsf5fCGki3FUTmypHFKqrXKorXI++sjylIeyN4VeajjuOXdHPOrtqPWnVa52lTa1/ujHP6gM6TzAiNRYmX7vINLRnlWm3zuIhtb9oIwuRGutDpM2rY4rf1Wy9ScCrnaPBLX+eL0Vlen3rvuSMv3edV9ShqHMCWX6veu+pEy/PXNJGdzZeEqZjnvmgjId98znlen4yVMlZdADn1IGPfApZfAgx826D3I0B5PTaD4OfuGD1Tna5oMFN5rm0/ozerrng2Ux2uaDlS7a5oPFK9rmw1N8tMp7OvzOE85vATA/DiZFyjCVHcG0gCkH5qRfrfXRT7BWA+aFwPSAKQdmAEw5MCNgioE5/VRJrZ3NMAMaoEuBOTl11KzSZY7DnzgyLwUmA6YcmBYw5cB0gCkH5vQ801LuZq1VgHkhMANgyoEZAVMMzOkntwLmZcLUgCkHJgGmHJgGMOXAZMCUA9MCphyYDjDlwIQDJAjmCQfIU4YZCTAvBGYETDEwnQJMOTA1YMqBSYApB6YBTDkwGTDlwLSAKQfmtGlgdIZpDK4BuhSYATDlwIyAKQamV4ApB6YGTDkwCTDlwDSAKQcmA6YcmBYw5cB0gCkHJhwgQTDhAAmCecIBYp9hOlzQdSEwgwJMOTA1YMqBSYApB6YBTDkwGTDlwLSAKQcmHh0jCKYHTDkwA2DKgRkBUwzMiAVFWuZjppcj9hmPZzNKmexpI6fNRDveiqtP8fUpoT4lVi4hsE+aXvKwlKTnJNGcJDMnieck2TlJbk6Sn5MU5iTNGRFmzogwc0aEmTMizJwRYeaMiOlVHM6eTqbXCogqncYjjVPqD3TW1Vthqk8x9Slcn1J/Aub6EzDXn4B5BpdYnTL9NLrzKbo+ZZq+TSM5ehqlmPoUrk+x9SmuPsXXp4T6lBL9cYqrp+/q6U/fVXs+xdSncH1K/bHv6o99V3/su/pj39Uf+76evq+n7+vp+3r6vp7+9MURXqm8BLHS9niCtE+a/hG+lKTnJE1PJpRVOenogE5JZk4STydxbjRU1KMkOydpuqPRlGZgXnMYJfk5SeFEks1Jzo+SpkcEqZw0zPreJ0U1J0mfSMoLWpN9y+n38Orv68ft9c3u7mnI2b/58/72eftw//ry+Z8f6Z2bx+1ut/3+5cfjw+3d15+Pd192D7f79zbq9Z/PZphQD/PdoRi9f0mRryjG/ct9aUx6eNcMWx22/C8=","brillig_names":["get_operations"]},{"name":"_transferFrom","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[],"return_type":null,"error_types":{"5218808690258254125":{"error_kind":"string","string":"Function _transferFrom can only be called internally"},"11282533039261485053":{"error_kind":"string","string":"Error: token contract is paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/81V20rDQBDdXIq2Cl4R3/RFQRDcmLRp3iLiq4L9gjW7K4VqJa3iYz/dbJ0l6zS9kaR4YJkJSc7MOTMkFslhQXRJCWiSG4hNiLZx38lODNe0HLwmqlslf5cGfrNAX4X9T/mtmvpX0Pw1+U+3gOd+kvObWnTd7ey0jJ2oS7OeWZ2aj5boPId8Nzv7kLOvt6ePZMjFHeepGI30u0WeLcI6nPYanKeY8/FzMOjLvkgfvvuj8Qy3U8Ctc5sUa8N9mc+ZKNoPhRgiLQevgTQcQFSzuzQ82cOe9MQ7F+l/Gh1BUhpk/mpi2ScQlewryLH1CjFEWg6e0n+M9ffGw5S9imfB+KoerOq/Q2ZXFXM6pPhThDnsBfVqXldqob7cOXp0XTznM4hqzteQ75D81+xO/mqPK+g77P72PfVwkvdlektQ/QZ6/gKuW4ZGHd0SfcqQedJnkrUZ50HCDhG/gm34VHX9F+EJX0rpCxbIjtx4/aDbSYTgLGxHNIpu+abrR0nkRwltR37CaCiX1v8Bscw1XKQKAAA=","debug_symbols":"7ZbdjoIwEIXfpddctDNDp/VVNpsNKhoSAgZxk43x3bc18qPUEBE3e+ENoeSbzsmZdpijWKfLw/YrKzblXiw+jiIvV0mdlYVbHU+RWFZZnmfbr/5nIf1DqTO/3yWFX+7rpKrFQmkrI5EWa/fKUrodNlmeioWGUzSEpYwbWELcwgplgCYivtBEse5oGdrbYLu3QVBX9GckFMyg3kADnzX8oXqcQT2p1ns95r2KdUtrxSPqLdqGtoQ0UE+zqlfyWr3PEL88g355Bn46A2loMrhXO3rmGNozZ3hQNfO8nlnvgH1Qj4sBOSFGTYi5012UNe0tAjAj5wPYNjTYDjbBC6qoa0a6V7wgzWjwQjNJGikEq7bRMdwUIqREInbnWuvbwgG+zblvDv13c7gzR421FALZ0NRXHdwaLTfdCq25gr0x8duYsDH6bUzYGL5nDHfG4KB1m0lRdkoUysejTm71nVRZsszTy4y+ORSr3she/+zSm+l9V5WrdH2oUj/H90Z4nx8hQvb/U/+fQxORdDlcnl8=","brillig_names":["_transferFrom"]},{"name":"renounce_role","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"role","type":{"kind":"field"},"visibility":"private"},{"name":"callerConfirmation","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6034109891601213547":{"error_kind":"string","string":"Renounce Role: Addresses do not match"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["renounce_role"]},{"name":"private_get_decimals","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"14575960922920780690":{"error_kind":"string","string":"Function private_get_decimals can only be called statically"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"pause_contract","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13425536882234742926":{"error_kind":"string","string":"error: contract already paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z1hT+M8DMe/y17zInFsJ7mvcjoh4LjTpAlOwD3SI8R3v7Wi6aChVbq1s6e8QRTs5rd/EntOm/Z18/P+9u/v6+3Dr8fnzbfvr5vd493Ny/bxYX/0+na1uX3a7nbb39eHf96Y5oe1rf3zn5uH5vD55ebpZfPNcjRXm/uHn/tfvTH7M/za7u433xjeflxtLMzwcTN8cIYPzfDhGT5+hk+Y4RPLfcDM8JkxDmDGOIDScXA1NDaGOmMDlIytMxlrRPTv1ojEvbXJnTu4dO7gwH6wbujxBPQBOuOWYUV6OgE92qQ9T2lviZM1Wz9BH13srCM6HNDzSemt+UjftOAXbyEs3kI2XhClFohNGG8BGboW9r/GyTHnIY254D/3msvGImLoeZAnPjF57D4xhd445IYcGMPvxmAOpoDH3JkDdMY2uDhhzM6lwUw4YYzczVuLwUwYG04Y1h5Mcp+VIyTj2Peks7aV21a515Qbqtxryu2q3GvKjVXuNeWmKveacnOVe025fZV7TblDlXtNuWOVe0W5sVaVp5abDj7gQO5aVa4qd60qV5W7VpWryo1V7jXlrlXlqnLXqnJVuWtVOS23TdfVLGCYkht6aGAYP7WjdDHKEYVD46Zzag0quHNqxSq3c6jWt4I754KqYZ9uPOA4debTLd/QBRW4Z1LwgmrWMymIVcEjFbygyvJMCl5QsXgmBS+o/juTghdUpJ1JwQuqpM6jIF9QubOcgmPrYFxrkmMVrDXJsQrWmuRYBbEqeKSCtSY5VsFakxyrYLYmcZ66hVDn48RCqE/k/nBLTVbAy++akYXeRu5Q5V5T7ljlXlFub6rca8qdraO8TXt2PXzaV5trwvTXvJq8MmGvXXN/sAv1C82x3/LMU0PQu9Cp59HgB/GaHrrIOu3kGvpeQzu1hZeS4Hyw+9hBaPW+yKpOsN5Y9V5VbzUV48e7Jxp0NaXaEP0E123YpgYYzQQ6cOzQIYRD44YmiKKJkmiCEUVjRdGAKBonigZF0ZAoGhZFIyoWhzPG4mYB7xNNlEQTjSiaU8Ti1IDlwVCIsHQDbukGcOkGaOkGeOkG/NINhKUbiAs3YI1ZvIUTzGUPqQWPcTyyWNdXB45gqtwLjtMS5sH92Plyz7PrQDxH8za1WndYee6r2rdPC042/+jKgOnjBvR9wQoh14pLF4wQeiLgXNC1EVN6tDBuTElGAn9o2oKjVnDSCs5awb1W8KAVPCoFzz9dVgO41QoOWsG1Zk7QmjlBcubk/sukHYBLzpyj4JIz5yi45MyZbPmjaQsuOXOOgTvJmXMUXHLmHAWXnDlHwSVnzlFwyZlzFFxy5hwFl5w5R8ElZ85RcK2Z02nNnKg1c6LWzIliMmdLIyYdtjRiclxLIyZxtTRislFLIybFtDRi8kZLIyYZNDQkJsK3NGLCdksjKhaTqFhMomIxiYrFJCoWk6hYTKJiMYmKxSwqFrOoWMwrj2JwPQ3SZxq/ck95m+4H887NNm7RrVx0y9w/tDAMVs496EV3etFRLzoJRvc+3Ynl4zDCsF50rxc96EWPatGD4Gw6hS45m06gS86mE+iSs+kEuuRsOoGuN5sGvdk06M2mQW82DXqzadSbTaPebBolZ9No006LCEN0ydl0Al1yNp1AXzk4uv4ZAs7igCYKogFjRNFYUTQgisaJokFRNNnvy9akGGINh/EWFlzfjpDQDQ3QWS969vuytQePBiMrFD3oRY9q0a3Ri27z6EwJPQidpvk9shZNenQVGqmqk1501ovu9aLn4zpBijBERih6VIue3y+rA93qRQe96E4vOupFJ73orBfd60XXm03hi2zq00IhRZCJ7oxedKsXHfSiO73oqBed9KKzXvR8SnL9BSDnhNam+a2pKtDzm1N1oFu96KAX3elFR73opBed9aJ7veh6synqzab0RTZFn9BZaFlNVi866EV3etFRLzrpRWe96HovPuY3XOtAj2rR81u5daCvfIPhOE1+z++yL4Y86XsTIb/1d8n3ru01d0l++PDOgUxXRd+9mNPFwQsKIL/7Vw09aabPb/3x/VsW8PPufshv/ojp80YazLD8potxFyh3ceUuWHgTautEc5x4jpOf4xTmOMVyJ5e/h37Kyc5xgjlObo4TznGiOU48x8nPcQpznOaMiPzdomPhZL9ukZ21pns2SoShS/FEd/m7Esdb8eUuodwlFrtAcQB2YMtdoNylvF/ydxWNu1C5C5e75HufupEcPQxcQrlLLHbJ3yUx7mLLXaDcxZW7TPV+xqW891157+efXzzuEspdYrELls99LJ/7WD73sXzuY/ncx/Lex/Lex/Lex/Lex8Lef9sf/XfztL253d0/7z2af/59uHvZPj68H778/6f7z+3Tdrfb/r7+8/R4d//z79P99e7xrvnfxrz/+N4U0M77H80r4vaH+wL2yprQHDYDBny4gmD2re5b/gc=","brillig_names":["pause_contract"]},{"name":"total_supply","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"9599227760297081764":{"error_kind":"string","string":"Function total_supply can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71WXU+DMBQtY2TiXGKmRp989UWTVmBsbzOLD75o4n5BgdaQYGYGGh/304Wkdd1dYV+wkzS3dO2595y2MAMtYYjYRqsw0BYwKsYGItoitpTfzbyNxTM+DMQGeevkH2LXtTX6aqzfsQWn0Qw/lvwN+Y87gmeyWPKrWmTek7x1Rb9XsabJevP9/PfbbIA/B7koqV96cCf6Z3k7F3368/n2Fc4i9hRFc5am6r2CflZhF87WDpw3kPP1O0liHrP582+cZmvcpoZb9ltIrw3Wpc5TobsvBcYi4sNALKChL2Kxdw+KJ1fQk5d0mtEsDic0SfbdQHj46xSGgDALlV9WaMK1YgIGtRr11xoUBl8iYPA0m83pB3tnNNr2MG+7D2aFF6pWcw+tfANkPvkF7iD9B6GABebeiljsiwO0mBotcq1ZkQNpxgwNT9kLexdvAAgcUGvepA3W3AJrdXPLXkYqTw+Vn40uWv7BaS9W147382AF/hBjmdcU/BZa3ys1vwXm34vnU6V+GdsH1Ml9SrhDOfVoFLkh7QN+BHyqO3/ACHPy++Mw6vIBP3r+oef4Lgspfhw5fkDdY+f38szMJUHgEUZHI74p/x+RjX8F9gsAAA==","debug_symbols":"7VjBjuIwDP2XnHuwY8dJ+JXValSgjCpVBRVYaYX4900RTTttdqtlmDkAF9Sgl/i9l9hpfVLrYnl8fyvrzXavFj9Oqtqu8kO5rcPodM7Usimrqnx/G/6toP1BfcHvd3ndDveHvDmoBYqHTBX1OjxagLDCpqwKtRB9zqZgANOBQZsIRoIEmpntFc1spEdDam1HcW1HGj+gf2YK6Q7sne7AFw7fyJ7vwJ4xei9z3qORiBa0M+w9+Q7tmXjC3tyVPcJH9m0E+fII9ssjuE9HCNjuzInXNLdrIN159uDMZNf8f/IJczTcMAdvmKNvmJOsAA7Jd4mHwjM7iNxXABlkhUvlkCVHV7Rl4JndsBiri9WjCpBiAkT9YRIZ757mp1Jrvl2t7dWin+MvFA+mmB5N2qVuDol1gkX6e0aS14zEW8YPEt5fXJGXKwlX7MuVhCvu5UrCFf9yZeoKwUO5El8awqMbutJKxeeRqh9JqtXx/FqisVR6LKkSpbIeS+XnkTr/Emjtv6Wy8xTLHkwyRO4QwP01wDmMfuVNmS+r4tqN2Rzr1aA5c/i9K0Z9ml2zXRXrY1O0HZtBs6Yt0YEXc/sl1xYxg5mhECPE+QM=","brillig_names":["total_supply"]},{"name":"set_credit_events","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"credit_events","type":{"kind":"struct","path":"types::extensions::creditEventsModule::CreditEventsStruct","fields":[{"name":"flagDefault","type":{"kind":"boolean"}},{"name":"flagRedeemed","type":{"kind":"boolean"}},{"name":"rating","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3Rbts6DIbfJde9kCiRlPYqw1C0XTcECNqh7Q5wMPTdj91Ty07D2JCTOaKrm6JpSOvTL1kSbVH9s/l+f/v75/X24cfj8+bL1z+b3ePdzcv28aH59Of1anP7tN3ttj+vh3/emPaHpTf75183D+3H55ebp5fNF0vRXG3uH743v7IxzRV+bHf3my8Er9+uNpZn+IQZPjHfB8wMHzvDB2b4uBk+foYPzvCZ0Q9gRj+A3H5wdWhsDHbGBjAZW2cEa+89v1t7j9RbG+nawaVrBwd2z7qlj2egD9AZvzEsR+/MGei9TdrTlPYWKVmT5Qn66GJnHb3zB/T2rPTW7NO3JcBfL8H99RLE8YKCie9OFIDHS/AEXQnNr3GyzzGkPhf4oNXEsYgYuo5KTGGixuzT/c7Yl8AsGIMx9G4MZnALsJeuHKAztsHFCWNyLnVm9BPGnrr71vpgJowNJQxrBzc5i3KEZBx75Zy1b3JTlXtJubnKvaTcocq9pNyxyr2g3N5UuZeU21a5l5QbqtxLyu2q3EvK7avcS8pdo8pF5a5R5bnlxkEFD+SuUeWicteoclG5a1S5pNxYo8pF5a5R5aJy16hyUblrVDktt02vMS34MCU39NBAMH5ph+ndn0MMQ+O2cXxtnHIbp0asBTdOjW8LbpwVRcOc9nlQnLry+R7f4IoC3AspuKKY9TIK0orC0AspuKLI8kIKrihYvJCCK4r/LqSgrwqeqOCKIqkLKbiicOfvKTj2HIxqTHKqgjUmOVXBGpOcqCDXmORUBWtMcqqCNSY5VUExJnGM3YNQx3HiQSgnch5mMAUpp239TTPyoLeV21e5l5Qbq9xLyk1V7iXlXmUcxYO03COq+D4HnKY6CbvQ9T72pu99cj4u25RfzvAhB1wiMf0Lw3ZS3rNvW2iVcdrZW4j7FrJTGdOYmpMGyd4Owpveq4zqytU7rDIGLFhvNRHj/u6JFl1NqHaIfob3NhFj/0gZxtGt62kcwlT3Cn33CsFNdC+HpuvnDq2f0DDYbosLBD9FjTHdFDS4gxz8L6L/tCL61BEDnygifloROYkYzR51KwtVWSRZuMoiyRKqLJIsscoiyBJNlUWSxVZZJFmgyiLJ8nlX0KOy+CqLJEtd5UqyNAWUrYujpMsgD+HIg1b0vrNGj68fHpw2D1NXVFei0FkTh8O6Fr5Oz6tretkj17XwxXdeXUN6WUUhHta18BX1OetqC18mn7Wuha99z1rXNc05U3UtfJV61rr6T1TXwteTeXV1MdU1mglru/emyn5Yrb5ps6p11nFt2rrK589jAsLB2d5AQgHNO5CugOB5YBzkpX93YQ9m/MJgY7caBrAwNG7B5aPnNYBbreCgFdxpBfdawVErOGkFZ63gQSu41pnTa5055fO1kbqFLpItFBy0gjut4PLMmXxo36UgcNQKTlrBWSt40AoelYLLJ59qALdawUEruNMKrnXmRK0zJ2qdOVHrzCkfX3cxmlgSjXys2sVobFE0UBSNK4rGF0WDRdFQUTRcFE1RYzEVNRZzUWMxFzUWc1FjMRc1FnNRYzEXNRZzUWMxFzUWh4V7MbieZrDftaMRWwrYdjTAzl0qwDhO8YbO8n9lp/4o9WALRQ960aNadDmjSge6uCxoRra0p4kjFooOetGdXnSvFx31opNedNaLHvSiR63oYIxedLWzKRi1sykYtbMpGLWzKRi1sykYtbMpGLWzKciJkk0EkvI5IpSKHtWiy2mMOtD9sg+0XH++mhsktnc0WBQNFUXDRdGEomhiSTRgiqKR18smDQvWDHL1Fh6cIB1c19QCD9BBL7q8XraDk3/RForu9aKjXnTSiy6vly2lc1ebdyZloss5stan43eaXwtVXc6S1YEOetGdXnR5XEdIIwyiKRQd9aKTXnTWix70oke16HLerA50qxcd9KI7veh6Z1N/ZDbl9LgSIxSKTnrRWS960Ise1aKj0Ytu9aKDXnR5SnL9ayjnCo1N5dRUHeikF531oge96FEtupz6qgPd6kUHvehOL7re2ZT0zqZ0ZDb1nNCp0LCaWC960Ise1aKz0Ytu9aKDXnS9Lx/lhGsd6KgXnfSiL7zBcJxGzg3j/uR4f7CzVs4Oiulk/YgfS3FyVs64i813gXwXl7kR783Jz3HCOU40x4nnOIU5TnGG05E95RNOdo4TzHGa0yPsnB5h5/QIO6dH2Dk9ws7pEfIO4bHhxMnbeKPpzoeIcOiSf6PLGyjHS6F8F853Cfku+QOwyx+AXf4A7PLbRd52Nu7i810w30Vu/fS/XSLDgQvnu4R8l5jtIm9fGXex+S6Q7zLV+oJLfuv7/NaXX8ePu3C+S8h3yb/3Mf/ex/x7H/Pvfcy/9zG/9TG/9TG/9TG/9TGz9V+bT//cPG1vbnf3z41H++Xvh7uX7ePD+8eXf39139w+bXe77c/rX0+Pd/fffz/dX+8e79rvNub9x1dHcOWC+9b+a8bmo20mdgu+/di2vgu++ZaaUpuS/wM=","brillig_names":["set_credit_events"]},{"name":"_transfer","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[],"return_type":null,"error_types":{"11282533039261485053":{"error_kind":"string","string":"Error: token contract is paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16807553578335744187":{"error_kind":"string","string":"Function _transfer can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/81V20rDQBDdXIq2Cl4R3/RFQRDckPSSt4j4qmC/YLsXKVQraRUf++l26yxZp+mNJMUDy0xIcmbOmSFxSAYHok8KwJDcQaxDdK373vQkcE2LIaijumXyd2gU1nP0ldj/jN+pqH8Nw1+R/3QHeB4mGb+txdTdnZ6GtRNVaTYzq1LzyQqdl5DvT88h5Ozr7fmDD4W8FyKVo5F5N8+zZdiE092A8xxzPn0OBn3Vl+njd380nuP2crhN7pJ8bbgv+zkbefuhkUCkxRDUkIYjiHp215YnB9iTrnwXMv1PoyNISo0sXk0s+wyiln0DObZeI4FIiyHQ+k+x/u54mLJX+SKZWNeDdf33yPyqYk6P5H+KMIe7pF7F60od1Je/QI+pi+d8AVHP+RbyPZL9mv3JX+1JCX23O799zzycZH3Z3hJUv4aev4LrhqXRRL9An6rNAhUyxZpMiIizY8Sv4Vo+lV2/JwMZKqVCySLVUluvL+OItrgUMqI8pL3etuvHPA5jTptxyBltK7Gq/g+JT/xCpAoAAA==","debug_symbols":"7ZbdjoIwEIXfpddcTGeG/vgqm80GFQ0JAYO4ycb47tsaKYgYIuJmL7whlHzTOTlTpnMU63R52H5lxabci8XHUeTlKqmzsnCr4ykSyyrL82z71f0swD+kPPP7XVL45b5OqlospLIQibRYu1cN4HbYZHkqFgpP0S0MEDcwYBxgSTBAM7O+0MyxamkY2ttQ2NsQyiv6MxISZ1BvsIHPGv5QPc2gnmXwXo15L2MVaCX1iHpLtqEtE9+o51nVS7hW7zPEL8+gXp5BP52BFTYZ3KsdPXMaw5kz+qZq5nk9s/4D9kE9LgZhQoycEHOnu0AcghSYsfOB2jY0WhNgM/iDSm6bkeoUb5DWZOhCawYeKYSWodFp7BViSAkQtedaqX7hkN7m3DeH/7s5ujVHjrUURmhoRhwRQlY33YqsuYK9MfHbmGFj1NuYYWPuXKDAtmMM9lu3mRRlp0QRPB51cqvvpMqSZZ5eZvTNoVh1Rvb6Z5f2pvddVa7S9aFK/RzfGeF9fsKItL9P/T1HJmJwOVyeXw==","brillig_names":["_transfer"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"grant_role","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"role","type":{"kind":"field"},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["grant_role"]},{"name":"private_get_name","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2111772463301017956":{"error_kind":"string","string":"Function private_get_name can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"7Z3Zbty4FkX/xc9+4HA49a80Go0M7oYBww4yXOAiyL+3yrEo2VJUVoq0xK39EqRsUjzkknSoRZb8/erjzftv//59e//Pw5erP/78fnX38OHd19uH++7T9yttHn/25dO7+9PHL1/fff569Yf2SV1f3dx/7P4blPpxffXP7d3N1R/e/LieFBaVzFNh0SbmwlrpH39dX2lbvQW5uAVtlfSFrU1DC1bNlVY6+L640sk+i2ha3piY0lN5Y9JMD1zzPfAre3CqE+bqBBfDU53glSz32kRxfVgxmiGqkOZ6bXzutFVhKG1+9iHuLJ60r3iM2lk8emfxmJ3FY3cWj+wsHrezeGbvodb1dcQMd1Dj56IJOt+kg7XLhXUYMkBI7kxhlY+slY/LhaPPuSIG64fCcW4Io5hcWkI4U7oinehC7qIyEziBcPYLJxLOfuEkwtktHPv2czrjcg7003j0zuJ58zldDLGPJ40OfYpn5rwZTkltRueYmn2G0zY/wpnwrPSpp/YwPZXD9NQB9dSa3FOZ9tQfpqfhMD2NQD11Q0+DnvQ0HaWnog7TU42UZUY9NZOeIs2R8tNDp7n9pKdIc6Tlnspheoo0Rxpdp2mST+Viv2jyOpyx6tyztc3BdAtSuuCD+G7YRJ9Xt5R1Z+AsCYETnEA4+4UD4hcx4YD4RUg4bt/z/aJdffsJv8vqMo2E9C8mEjLEMToT08/YTcOx24Zjl4Zjdw3H7huOPTQce2w49tRu7F41HHvDedU3nFd9w3nVN5xXfcN51TecV33DedU3nFd9w3k1NJxXQ8N5NTScV0PDeTU0nFdDw3k1NJxXQ8N5NTScV0PDeTU2nFdjw3k1NpxXY8N5NTacV2PDeTU2nFdjw3k1NpxXY8N5NTWcV1PDeTU1nFfTvvNq9H3hGNUk9n3n1eXYHfe1FB3t5EffhNPPhntaWELo36chUY0Gb/W3/U4oQb7ZTZRXCeR74ER5lbirEwYl94CioOzaI0sYlposYVgasoRhackShqWQJQxLOh8clpQ+OCxpfXBYUvvgsKT3gWGp6X1wWNL74LCk98FhSe+Dw1LIEoYlvQ8OS3ofHJb0Pjgs6X1wWNL7wLA09D44LOl9cFjS++CwpPfBYSlkCcOS3geHJb0PDkt6HxyW9D44LOl9YFhaeh8clvQ+OCzpfXBY0vvgsBSyhGFJ74PDkt4HhyW9Dw5Leh8clvQ+MCyF3geHJb0PDkt6HxyW9D44LIUsYVjS++CwpPfBYUnvg8OS3geHJb0PDEtH74PDkt4HhyW9Dw5Leh8clkKWMCzpfXBY0vvgsKT3wWFJ74PDkt4HhqWn98FhSe+Dw5LeB4clvQ8OSyFLGJb0Pjgs6X1wWNL74LCk98FhSe8DwzLQ++CwpPfBYUnvg8OS3geHpZAlDEt6HxyW9D44LOl9cFjS++CwpPeBYRnpfXBY0vvgsKT3wWFJ74PDUsgShiW9Dw5Leh8clvQ+OCzpfXBY0vvAsEz0Pjgs6X1wWNL74LCk98FhKWQJw5LeB4clvQ8OS3ofHJb0Pjgs6X1QWBpF72NgWNL74LCk98FhSe+Dw1LIEoYlvQ8OS3ofHJb0Pjgs6X1wWNL7wLDU9D44LOl9cFjS++CwpPfBYSlkCcOS3geHJb0PDkt6HxyW9D44LOl9YFgaeh8clvQ+OCzpfXBY0vvgsBSyhGFJ74PDkt4HhyW9Dw5Leh8clvQ+MCwtvQ8OS3ofHJb0Pjgs6X1wWApZwrCk98FhSe+Dw5LeB4clvQ8OS3ofGJZC74PDkt4HhyW9Dw5Leh8clkKWMCzpfXBY0vvgsKT3wWFJ74PDkt4HhqWj98FhSe+Dw5LeB4clvQ8OSyFLGJb0Pjgs6X1wWNL74LCk98FhSe8Dw9LT++CwpPfBYUnvg8OS3geHpZAlDEt6HxyW9D44LOl9cFjS++CwpPeBYRnofXBY0vvgsKT3wWFJ74PDUsgShiW9Dw5Leh8clvQ+OCzpfXBY0vvAsIz0Pjgs6X1wWNL74LCk98FhKWQJw5LeB4clvQ8OS3ofHJb0Pjgs6X1gWCZ6HxyW9D44LOl9cFjS++CwFLKEYTnrfaqOjNK/GpnHgPwbB2Sc7c8v40bn1zwqbUw/+trY4Ty3MneGeafiU2nv7EBWzwUiSmWwSo/CjjOFrctngXVRjQs/jmLgKBYYxchRLDCKiaN48ShapTiKrxnFEGw/iiHJZBQ1R7HAKBqO4mtGMeo8itHEM4W1UX1hbc8c2QyzOiPiJ3ws+WzMJ8U8HkYvF5Y8+5dkx917RClEiYLSESUKSj6kbozSieTx8OESlHxShkHJx/WNUfrsgI2PZjItpQjYNR9NxbBvPpQXG/MJeai79RO/XLhb6MhLQNHYCUw6FCCYFC4twUxuWIIMcsGMUwu5H5I7Vc4xudP7NMU99WEYpf0l3CmJjsmdRqkC9/yQ291PzxQ+s9CpaZS25lNqScVQPsGgpKfaGGWxJRVDSwWDko5qY5TLdt8I+eyaD53PvvnQzWzMp+CCiqFwAYJJi9ISzGK23NDOHJK7pco5Jnd6n6a4l1olsZREx+ROo1Seu7H5W8DmnO87M++2Qj675kOjtDGfclMfyicYlFRPMCgpnrZGWWyuSZeEglKoh16HMvZb32xScu5xsdzbQ4QaZ2s+pXZiCc0MDErKFhiUQpTboiy2qU6ocGBQUuFsjHJ5f5fQy+ybD2XLvvnQoGzMp+CWOkeHAgSTwqUlmMWWJxztzDG5U+Uck7uQe0vcSy14OUqiY3KnUarAvdzbQxyN0tZ8Si2pOMonGJT0VBujLLak4mmpYFDSUW2Mctnue7qkffOh89k3HyGfbfkUXFDxFC5AMGlRWoJZzJZ72pljcqfKOSZ3ep+muJdaJQmURMfkTqNUnnvBt1MEGqV986FR2phPsalPEKJEQUn1BIOS4mlrlMXmmnRJMCjfXA95a/rSPvlWULqQ6bioJpPHxFG8fBSj4igWGEXNUSwwioaj+JpRDCG/ICskmYyi5SgWGEXhKJZ/IXS5N3xFRz4b8ym1Wzp6okRBGYgSBSUfUjdGWWzje+STMgrKxMf1jVEu78FOFAH75kPFsG8+lBcb8ym47T0JYeLApHBpCWaxLQSJduaY3Klyjsmd3qcp7qU2pSRKoiNy7zpP7uW5F3vDVxcZ+WzMp9CSiijKJxiU9FQboyy1pCJKiBIFJR3VxigX7b4ouqR986Hz2TcfupmN+ZRbUBFF4YIDU9OitASzlC0XTTtzTO5UOcfkTu/TFPdSqyRayP2Q3GmUynMv9wYp0TRK++ZDo7Qxn3JTH8onGJRUTygoDcXT1ihLzTUNXRIMSuqh16Gs9udSlzfVGWqcrfmU2ollhChRUFK2wKCkl9kYZbFNdYYKBwYlFc7GKJf3dxl6mV3zsZQt++ZDg7Ixn4Jb6iwdChBMCpeWYBZbnrBC7ofkTpVzTO70Pk1xL7XgZSmJjsmdRqkC93JvD7E0SlvzKbWkIpRPMCjpqTZGWWxJRWipYFDSUW2Mctnui5DPrvnQ+eybD93MxnwKLqgIhQsQTFqUlmAWs+VCO3NI7o4q55jc6X2a4l5qlcRREh2TO41See4F307hhHx2zYdGaWM+5aY+lE8wKKmeYFBSPG2Nsthcky4JBaV/cz0UMxwTnX2G8jGgN/cWUdkhIJkG9OYP1MnnM0HpMA3I7i0gmQtI+9RvKdVBqeWAgrX9RRhsHJ0Vau4Ct8MZrUfAnPsZjrs8HNH9/SbI+J4wG44xOR5jYhpKn4KbGU2JeTTHW7tmS2sveWS6/7uBlYmzZLXJ67Ja3FA6zZHV1vfnvhatnpV+HErPoSw1lIFDWWIou0/vP9/e3d3++/fdw4d3X28f7r+c6qrTP/OvAvGxv32FUaTaqxOY+VdOLFeJ66uk1VXmvwC+XEWvrzKf3fL0IqppFbu+iqyv4tZXmaUfQ9/9OE4sT1XC+ipxfZW0usr8DuyUZ59JT6vo9VXM+ip2fZVZ+sn2k+Pu1jOp4tZX8eurhPVV4pkqzk2qpNVV5hdtl6vM0499eknjFPBUxayvYtdXkfVV5mdw3ZNOnxaUfz4AM491w1PdaBHGqJ8N+NoNhNoNxNoNpMoNzD95lmxA127A1G7A1m5AajdQ+0r2ta9kX/tK9rWvZF/7Sg61r+RQ+0oOta/kUOIsyl8+8U6/bCCWYOD7x0s/2uTQN5Aq9yCV6EHotZaPbtKArt2Aqd2Ard1AiXwQdG5gch0kV7sBX7uBULuBWLuBVLkBrVT1FnTl251WpnoLtnoLUr0FV70FX72FUL2FWL2FVLsFraq3UP2a1tWvaV33mu4+6VPJ+T8RGJVT2Y6G50u93Qfz65pdgHmXh7KjAOfWk0N2fUG//OKfdnUP7y8/vO0NcpD08vChwOHzEo1/ucdQx7qHT5cfPm9YCCm8OLxRdQ+vLz58zItMUV6eOcYUOHw/c47u5ctvjL388KFHG6eDIwUPn15cVt0Hu3Br6GZCfSNdInvdFaPz9gKtvX/dZbBcJ62v84sTdrmO/o065jfq2N+oI+vr/GLlaTlRyKno/NKQy38PyY3XEp92Xtj1VWR9Fbe+il9Z5Uf38X/vPt++e393c1pdPv322/2HfrG5+/j1/5/63/TL0Z8+P3y4+fjt881pYXpYkz6dhbpbuemS/V+PV9qfHafrbkH8cd52+mjCtbbmcfrwWNZ2H92Q6x/LhGtjhiR++lFXy5rh4j39qEsONmSCp6asuhbVN9St8Dvb9a3r338=","brillig_names":["get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"unpause_contract","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5120381606281950993":{"error_kind":"string","string":"error: contract already unpaused"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["unpause_contract"]},{"name":"get_frozen","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17160554675662999463":{"error_kind":"string","string":"Function get_frozen can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_frozen"]},{"name":"private_get_issuer","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2435529361475140548":{"error_kind":"string","string":"Non-zero value change for zero hash"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3639093445553992230":{"error_kind":"string","string":"Function private_get_issuer can only be called statically"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"16049994897275280777":{"error_kind":"string","string":"Non-zero delay change for zero hash"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_storage_hints","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"set_debt_base","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"debt_base_","type":{"kind":"struct","path":"types::extensions::debtBaseModule::DebtBaseStruct","fields":[{"name":"interestRate","type":{"kind":"field"}},{"name":"parValue","type":{"kind":"field"}},{"name":"guarantor","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"bondHolder","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"maturityDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"interestScheduleFormat","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"interestPaymentDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"dayCountConvention","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"businessDayConvention","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"publicHolidaysCalendar","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"issuanceDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"couponFrequency","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_debt_base"]},{"name":"_mint_internal","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"2435529361475140548":{"error_kind":"string","string":"Non-zero value change for zero hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8961250494313784519":{"error_kind":"string","string":"Frozen: Recipient"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"14262884792716209954":{"error_kind":"string","string":"Function _mint_internal can only be called internally"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16049994897275280777":{"error_kind":"string","string":"Non-zero delay change for zero hash"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_storage_hints","get_public_data_witness","field_less_than","decompose_hint","lte_hint","get_public_storage_hints","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"_mint","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"84944219458093315":{"error_kind":"string","string":"Function _mint can only be called internally"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"11282533039261485053":{"error_kind":"string","string":"Error: token contract is paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["_mint"]},{"name":"public_get_name","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"H4sIAAAAAAAA/71V30uEQBBeT6XsOoirKOilIOh1/VHn48XRQy8F3V+wurshGBdq0eP96SmMuU2eeal9sMysu34z882uaqSCBtYg36GRFtAanl2BtcCOlHU9H3OY026wLRS3T36fep5VU1+P+bsWcGrD8NOSfyD96Q7wLNYVv1pLGXc3H2PwJw3vDJlv3s8vvfUB+HPYhxvyLzU4A38/Hwfgs/eXx9dwxcUt54lIU/VeYT2bsA3naAvOU8z58BbHkYxEcvcRpdkPbr2Gu/RHpL42nJe6T0XdfSkwB0u7wTZRDVOwRe8uFE2OsSb36TJjWRQuWBz/tYH48PdZGEGFmWTzZcUinCgiXKJctf5zFYXARwQJvMxWCXsWT4Lxtoe5bR8mDVqMSfUTM9bVel8fjZlPaRlXB36TVNqrMJR1df85zPeU/EtrdMhTzpgtXSbZNePcC9kU8ROkU9/xA2ELV0rpCubJG/nv8WXgOVxwNwhtx+fU+S3+J3g8HzlaCQAA","debug_symbols":"5ZXNjoJADMffZc4cOm3ny1fZbAzqaEgIGMRNNsZ33xkDIyoJWRf34oXMkF/bP21pT2LjV8fdsqi29UEsPk6irNd5W9RVuJ3OmVg1RVkWu+XwtYD4kHjhD/u8itdDmzetWEjtIBO+2oSjAQgetkXpxULjOXuEAVQPA6oES4IRmplNRzMrfaVhzLel5NsSyhv6MxOSZlBvsYcvGv5RPc+gnmXKvZ7KvVQ60VqaCfWOXE87Jn5Qr2ZVL+FWfYygXx7BvDyC/XOEwPY9px3SVNVA9/3swKqHqrlf6gk2CE/YyCds8Amb0QlgWNvOxvAgCaP5RSTqYERlrxkzboQ2ZCm5Bp6ohpFpuhi8mwAjvSQhSQlnre+rh/w+X3sO16+8KfJV6bs1tj1W68FWa7/3/m7B7Zt67TfHxsdVN9hysYPRZITxF4itGSKTCjFCnB8=","brillig_names":["public_get_name"]},{"name":"transfer","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZnhbuIwDIDfpb/7I7bjJN6rnE4T29iEhGBi7KTTtHe/BJG0QApnQTcm8Qc11J9rO3Ectx/N0/Th/eV+tnhevjV3vz6a+fJxsp4tF3H00QBt/nt7nSzS8G09Wa2bO3Bi2ma6eIqX3pjPtnmezafNncPP9kAY0fmtMGKQIgxga9Jiw1aaDMIJaXCWsni8ZizyGKq2ALpsC1jupEVq2slRVm7B7Ej/bhuwt9gMxoZvsRmMjTs7NtYIboUtYOi8NbB5gh/9CeHsJwAZm4WJevNLpiZtwOcpiNdCOxbVVk8QKctHKh7IT/cATdUDcFBcAOfwRJYVf1HCKVFlihnoUizJHE0xcNxlpPfnpRjCLTRDocErD833bcxIt9AMhcb+R2gCn/DXYomN5W7/k5q7VKp/P0GAeWMOX8Sc4jIymuPmpJzlEn3Xn63tbuyuzyT/5SZ536ufAfyBSeH6TJILm9QXlvpZ1ZW071d1SubQQFX3Roo5/tQmJAbz6U0M8xmZRnARc1xeqAI9l+sTJkxFtzC7c89JhD/fBfpqF9BAKOXDkOxtLnH0sJrN57OX+533BSb92GrAGXKGcK92bZeZJT1i9QjrEadE4giSZP0I6sq6CIZ7IA4fzY4jpEesHmE94vRItVwFLIgNB0jQI6JG6lvycQT0COoR0iNWj7AecXqkPvshd9hBZAep1bG8vZHv6hjFRyX1YVz1Mqp6a8ZVD+Oqx3HV07jq7bjq+YLqAx2od+Oq9+Oqr2atlMZWyO/vI1bUCBs9AnoE9QjpEatHWI04p0e8HqnOfnx1UDotv79gnKgRb/QI6BHUI6RHrB6pzj768u1FDrLSOz3i9UjQI6JGgtEjoETiCG99UTwkbfqiasC5fG3y3K8Y8ZXIZxz+maxmk4f5NPWY6e774jG3nHG4/vua7+Sm9HW1fJw+va+mqT3tOtMUTTKtNdEDSIbEF7BMpWfb/MXSOpvup2kOvg1SJnAYp4IjtRii0dHwfw==","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"public_get_decimals","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{"11795427120478775878":{"error_kind":"string","string":"Function public_get_decimals can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71VTU+DQBBdoETxIzFVoycvmph4WgqlPdY0HrxoYn/BFHYNCaamoPHYny4ks3Y7hdoK+JLNLLD73szbDwy2hIGxw1ZhsC1gbHh3h9HBaGrfrbyN8JnXg+sQ3Sb5h9z3nZL6Gszfc5DTaIefK/6W/Od7yDNeLPn1WpTuft4OsX+8YU6b+ebr+eO31QJ/Dve0In/lwRX2j/J2gn34fHt+D2eRuI+iuUhT/VxRPzdhF05zB85Lyvn0kSSxjMX84StOszVuq4Rb9U1WXhvNSx+no+y8FBhh5PXg2qSGLsZi7W40T86pJ4/pJIMsDseQJH9dQLr5myyMkcJsVn1YqQkXmgm3JFej+VxlYfAZIwZPstkcXsWLgGjbzbztOlhsfeOaZJ7Fyi9qymFW6BXtmFV7XlyO6mfTWaxqjPA9r4HBkHOlayG/TWpgRN8m46/x+UDLX8VOjTzlAFzpgYQ+RJEfQpfwM+JT0/pT4QpPSukJ8GUg/10fvKkbBoMh9Hr9APzgN/1vUW6k+sIJAAA=","debug_symbols":"5ZbhisIwDMffpZ/3IU3atPVVjkOmVhmMTeY8OMR3v1ZcnTpunKeC+GW045fkn6SE7MTCz7araVEt642YfOxEWc/ztqircNvtMzFrirIsVtP+bwHxI/HAb9Z5Fa+bNm9aMZHsIBO+WoSjAQgelkXpxYRxn13DALqDAXWCJcEArZQyR1opzScahnxbSr4toTyjPzMh6Q7qLXbwQcMT1as7qFcy1Z7Hai81J5qlGVHvyHW0U6Su1Ou7qpdwrj5G4IdHMA+PYP8dIbDdm2OHNNY14O49O7D6qmvuj3qCDcINNvIGG7zBZnACGEd0tDFOq9/ri5hgRG1PFTNugDZkk2sFaqQbRqbpYvBiAgy8JQlJSjgzX3YP1Vtlq5+erTllK91YttZ1w71XGUJ70M4vrN28qvZ9uH7lTZHPSn9cfZbbat7bhNrvtb9YitZNPfeLbePjetTbjOLUI8hIx7EZxxlxRjbECHF+AA==","brillig_names":["public_get_decimals"]},{"name":"burn_batch","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}}},"bytecode":"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","debug_symbols":"7ZXbaoQwEED/Jc8+ZCYxJv5KKYuXuARExUuhyP57oxh1aWQfpNAF3zKZY2bmJOBIcp0O95upiroj8cdIyjpLelNXNhoJsHmva5JqCrs+aXsSg1A0ILrK7TKi9BGQwpSaxAIfwS8YUUQLjCjVCgNwH624XGhGEV7QIDgF14ngE7PwKNHLh3LFo2ijlfLRTDBHc6BP9GdAgF9uDt2El5tDN+K/u2HbsDzEF24QULhegIcn3USXm0M38rQbThUuMAeU27QU5grqrysgPV0BGOUOZmx3v4z6aAqRuwK7VuypI9/rkUqtz0d5JoD3nsBGaWvK0txv+z+93f5KWpOkpV7CYqiyXbb/blzGfd+0dabzodXTSXPOHv8D","brillig_names":[]},{"name":"mint_batch","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZjdbuowDMffpde98EecxHuVo6OJbWxCQjAxdqSjae++tCKhQABZ0GlIu5ka6p/zT2o7cz6ap+nD+8v9bPG8fGvu/nw08+XjZD1bLtLoo0Huf3t7nSy64dt6slo3d+gV2ma6eEqPAeCzbZ5n82lz5+mzPTAm8mFjTBS1GCO6mrW6uLFmIDxjjd5xNk/PQsWeYlULks9a0MnWWrXmnT1n5w5hx/pv26D73ZujeyO/e3N0b/zFe+NAaWPskOJ2tYD9DGH0GeLFMyCDy8bMg+/LULMGDPkTpGflHUW16ImqJXy0sgK99RUQVFcAiDKYhs5kmaO8YHKy1aS1tOGSka5LqyxHpJeDV5FTUoeE4LSclLlQfHs/zPrNDtHPk8TfLimEQUxHDAeS3M+TJFeW5KOclkTqy/ExzDTu5dQrNlAshwiwPyMnZXOuqApI5+TczHFG4Qqbo0DbzRG5pAzFq8jxOdAUB/FQj2YVzoU6PYu/uLDrzS+B4buXQICxBDWw7lXeNHpYzebz2cv9ToMD3R9XPScEc9jLIKM2YebYjjg7InbEG5E0ws6yfn77EhcRZADS8fP1NMJ2xNkRsSPejlQrX6SCuHiARDuiZqSefacRtCNkR9iOODsidsTbkfrXj7kliKo7SO0cy+WNw/Yc4zRV5z6O615Hde9gXPc4rnsa1z2P696N616u6D7ygXs/rvswrvtq1mr5d1s57NcRp2ZEwI6gHSE7wnbE2RExI97bkWBHql8/3auUNjTsB4xXMxLAjqAdITvCdsTZkerXp1Aui/UgK4O3I8GORDuiZiSCHUEjkkbUtwTVuaTcYwQZFst0VfKZhv8mq9nkYT7t2qvu7fviMXdbabj+/5rf5H7sdbV8nD69r6ZdZ7ZtyrpgYmgdpBVgJyTdiAiXdqX/SbT1rnvfrTCGNmrR3r8nbikmVUnZFw==","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","enqueue_public_function_call_internal"]},{"name":"transfer_from","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"get_debt_base","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1YTW/TQBBdO14ndlolfBy4cuJqN4WmtyLEFSS4cjGxjSoVFaUFARcsIXFAXLghwY/FW3ba5/HYqIoXUakjrfZr9r2Z2d3Jxp76I9O6eLYdqKZ4UG+xcb8uI7tG1yWsy7guk7pEdYkttiibgpFhv2wd2dqHeYN3YPvJZpJGqh2QofCXyW4ZqaYMbP8ispieG/wkgn10gT+2OI+qC3z0hXjNebmhmjo+xHXE1iqYj8BuB3t8vgeBA/xaVtvkY9WOC80FVZMb5zTMBRDPYxYfF3uM8XERfxOfWx32k58fbdvkprltZ+9eP32zOs6Lh3m+Lk5O8NxwrD65DOboEph3OOaTt0dHh+VhsX78/vDktIUdCNjU9tmY32EXjqNI58PIga2TzSTVzAfy3exd1WHDgPzJNosD+uj4buce41OqfU6QP1ZO71LqMT6yh8eH51btxp6Vx/DRHi3Eh/YyFOYIi35zNGChvgYfUR/btB7H7tl6LmD6zIZQtf3BMdI3Y3eZb/z+SjXh8jGf2SjlTNf52vGdSviZVMNhLwk7dGN7Snss3X3DmcB411nmb0GaR/0XgLmw7Znqfn95qp0D+t5cffd2JPg2E/g0wwoG4MYzFzLukcDt+Kzu9OWDPt/Ggr6U82aqHUtauy3w/O+/e54be9LLnrG+35kh87+ENRoQS19jXWNdMSzzvYjyGr7NfIY7Ydwoph+xPtpKa81/sdu2ff5f7Pnp8Tp7VTwrstxjGMjJ+SRurkd5N4Z5F+9p+ubW9W6IYR71c1sbPz/btvR9Ygz+GAkqJ/7kxo4vYAffVw286JdSF36jPs/TU0E/ZjpG5kxfOn/SbzbGPGRYaEvEfMR1hMvfh0bGVZPzrIYxig/t4QT12VwEc0HV5IltPwAexCI7NNP/YPszW4ewhtbPBf6Q8TfsFsb4t4tI0I8EfRPTtW2bvXV5nveWSUL2Uey1ar65FePXTP+T7eMZpTrYwM5yL0vLRVZm97M8311lNxk+xmzqgP9lkRaLsiwXRbZbPij/OX+x3M+T/bLI0jTdyZPib/zSecb8aITuBN4Z1Cc8zfS/km5dvtk2/9aLfEbvZ4+e11GfYQhjQdUck+4S5hjSJ+64attIc1OYw9xtZMv2MV6IRXZopv/D9mlPMC/Q+rnAP2H8DbuFMZ5jpoL+VNA3+/Od8GyNvg/9P+eMk+HjGLeNzo45178BBbMLJF0cAAA=","debug_symbols":"7VzLjuIwEPyXnHNw+9Xt+ZXVasQjjCIhQDxWWiH+fR1EQoZE+AKblnsuM3hUE1cVoVRJjM/Fspqfvj7rzWp7KD5+nYv1djE71ttNHJ0vZTHf1+t1/fXZ/3Ohmh9AV/xhN9s0w8Nxtj8WH+CDKotqs4wvUal4hFW9rooPry/lEKyUa8FKuw4MRo2grbV4Q1vr/B2txo5Npjs2GQ3f0L/LAsIL2JNuwVcO/4+9Vi9gb6Hz3qe8B+c7tAdMsA8mtOhgjR2wh5eyB/WdfTODfvsM5u0z2LEZUFO4/RMajYkZvKXuXfN3MNIYGOz9dO6BgcZOCDRkWh5W2cQJgcq1UuNLPTghnBypXo5UlCOV5EgNYqQaJUcqyJGq5Ug1cqRaOVLltCUjpy0ZOW3JyGlLRk5bsnLakpXTlmxWn1WkTiqGR6kup3c1MmnR8U7UQCrzDox3qRASUg0Ff0Ob0LtVOkpEk2t90eRNH9zYwrwvT2WL/bFlzBbmPfyNtnRgHXo3rm+2MO/sU9nCvN9PZQvzfvE+W0J3aB1IP9rC/LphIls882uMqWxh3lynsuXFLbd3yTDOxlL7iF87PWBjWLGxrNg4Vmw8KzbIig2xYhM4sUHFig2wYsMqi5FVFiOrLEZWWYysshhZZTGyymJklcXEKouJVRYTqywmVllMrLKYWGUxscpiYpXFxCqLiVUWB1ZZHLJa//X0iWbIaf2XhnZpPWo9eKIZbEZSIbhnUnNa/wXdd2iiVEigAZQxHRXl/cCanNaLPX+EH3JaL5aQmtMalITUnNaLPZcKKqcFYymtctYWxV+CtObUsFJarSCtWXWshFY5pQmUnNYESkptusThn9m+ns3X1W3bgtVps+jtYnD8u6seNjTY7beLannaV83WBvddDZpOAsaW4Fz0sEl3AChBw9XRZqh1HGIzhOuQSjAqcog8/gE=","brillig_names":["get_debt_base"]},{"name":"balance_of_private","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["balance_of_private"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"84944219458093315":{"error_kind":"string","string":"Function _mint can only be called internally"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"364657447181031001":{"error_kind":"string","string":"invalid admin"},"1195658528669718198":{"error_kind":"string","string":"Function _burn can only be called internally"},"1808206654315940758":{"error_kind":"string","string":"Function has_role can only be called statically"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5120381606281950993":{"error_kind":"string","string":"error: contract already unpaused"},"5218808690258254125":{"error_kind":"string","string":"Function _transferFrom can only be called internally"},"6034109891601213547":{"error_kind":"string","string":"Renounce Role: Addresses do not match"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6876750609332359971":{"error_kind":"string","string":"Function public_get_pause can only be called statically"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"9599227760297081764":{"error_kind":"string","string":"Function total_supply can only be called statically"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"11282533039261485053":{"error_kind":"string","string":"Error: token contract is paused"},"11795427120478775878":{"error_kind":"string","string":"Function public_get_decimals can only be called statically"},"13425536882234742926":{"error_kind":"string","string":"error: contract already paused"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"15055901490962513990":{"error_kind":"string","string":"Function public_get_issuer can only be called statically"},"16260118954846068608":{"error_kind":"string","string":"Function get_operations can only be called statically"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"16646908709298801123":{"error_kind":"string","string":"attempt to subtract with underflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16807553578335744187":{"error_kind":"string","string":"Function _transfer can only be called internally"},"16910372477825329883":{"error_kind":"string","string":"error: address already freezed"},"17160554675662999463":{"error_kind":"string","string":"Function get_frozen can only be called statically"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17984092444913392600":{"error_kind":"string","string":"error: address already unfreezed"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"_transfer_internal","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"160132460631502150":{"error_kind":"string","string":"The recipient is not in the whitelist"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"685724590584320826":{"error_kind":"string","string":"The sender is in the blacklist"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"2435529361475140548":{"error_kind":"string","string":"Non-zero value change for zero hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6608029729291342180":{"error_kind":"string","string":"The recipient is in the blacklist"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7273637037612779300":{"error_kind":"string","string":"not implemented."},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8744712499843048689":{"error_kind":"string","string":"The sender is not in the whitelist"},"8961250494313784519":{"error_kind":"string","string":"Frozen: Recipient"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11332022755610627056":{"error_kind":"string","string":"Frozen: Sender"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13107192312614724151":{"error_kind":"string","string":"Return notes not sorted in descending order."},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16049994897275280777":{"error_kind":"string","string":"Non-zero delay change for zero hash"},"16720115783840251250":{"error_kind":"string","string":"Function _transfer_internal can only be called internally"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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QJxXKhFnBinOq8qV016lQJxT5kVxTi1XTjtVgTiv1vJdNdf8//+uGrbvj14G/P3Rverx330zbZT8OI4Ax7E3QxyvVRDHSnAc+zDE8ToFcawCx7EvQxynK4hjNTiO/RjieL2CONaA47g4QxxvUBDHWnAc+zPE8UYFcawDx3EAQxxnKIjjSHAcBzLEcaaCONaD4ziIIY43KYhjAziOgxnieLOCODaC47gEQxxvURDHUeA4LskQx1sVxLEJHMelGOJ4m4I4NoPjOIQhjrcriKMBx3EoQxzvAMaRntle4RjYx52PnsnR8yR6FkIcTwxK/ER7f9q30p6L9gvU66hOU42h9UG5vSPnd9M4vn/7Gobv374TfKJ2hcJDiztHybfxLrSNaCGRQO9i+N2mu4C/JnG34N9tYlw4bL9MoWHh3I20UWuF0/BrAveUE6Xj1wTuLSdKx68J3FdOlI5fE7i/nCgdvyYwq5woHb8m8EA5UTp+TeDBcqJ0/JrAQ+VE6fg1gYfLidLxawKPlBOl49cEHi0nSsevCTxWTpSOXxN4vJwoHb8m8EQ5UTp+TeDJcqJ0/JrAU+gzs24FBvo9JKU5xg/DObz00H/m4xAROjnLuLaiD8dPeIjXb99veA3w9tv4G/YE4Z8UHODk+1ig1k925rIMbzw9DSwa8ztzDKr470UNjnVE9nKt+cKBmTvEN7c1Zr6cOA93/37GidGzzvWccz3vXC8414vO9ZJzvexcrzjXq871mnO97lxvONebzvWWc73tXO8417vO9Z5zve9cHzjXh871kXN97FyfONds5/rUuT5zrs+d6wvn+tK5vhrlGtPd/ZeMWbjg3rMe957zuPe8x70XPO696HHvJY97L3vce8Xj3qse917zuPe6x703PO696XHvLY97b3vce8fj3rse997zuPe+x70PPO596HHvI497H3vc+8Tj3myPe5963PvM497nHve+8Lj3pce9r9x7uWN+99+V3H/9FsxnAG+NZbI0jH0WNBeVgueAb7Od8hBPYUXlIvOPofZ5/z6HXJ/tC37nivwbP/siMBenys2FybHTvuTH51Cez/blrs9lCuJnXwHm4jSBuYhm57LTvto1n+MePtvXujJX3DN+9nVgLk6XlYtYETvtG6X6HCvqs32ztLlC7cTPvgXMxRlSchFr1077dud9TnXgs32ns3PFOoyffReY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","debug_symbols":"","brillig_names":["get_public_storage_hints","get_public_data_witness","field_less_than","decompose_hint","lte_hint","get_public_storage_hints","get_public_storage_hints","get_public_storage_hints","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"unfreeze","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"value","type":{"kind":"struct","path":"types::enforcementModule::FreezableFlag","fields":[{"name":"is_freezed","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17984092444913392600":{"error_kind":"string","string":"error: address already unfreezed"}}},"bytecode":"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","debug_symbols":"","brillig_names":["unfreeze"]},{"name":"freeze","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"value","type":{"kind":"struct","path":"types::enforcementModule::FreezableFlag","fields":[{"name":"is_freezed","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16910372477825329883":{"error_kind":"string","string":"error: address already freezed"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["freeze"]},{"name":"public_get_issuer","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15055901490962513990":{"error_kind":"string","string":"Function public_get_issuer can only be called statically"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["public_get_issuer"]},{"name":"only_role","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"role","type":{"kind":"field"},"visibility":"private"},{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3fbuI6EMbfhWsuPDP2jN1XWa2q/mErJAQVbY90VPXdD0HE0BMT1k7beERuqmWZL/n1s/F4QiZ9nz0u7t+ebpfrP5uX2c2v99lq83D3utysd6/eP+az++1ytVo+3Z7+98w0P4D28S/Pd+vm5cvr3fZ1dgMczHy2WD/u/inG7I7wZ7lazG4YP37PZ2ALNK5AwwUaKdD4Ak3I16Ap0ECBBgs0BfMAC+YB5s6DeTfYGNcGG3QxGMgkoq21coi21vEx2qSO7Ske2xPCp+iGnr+A3mMbvGf4QXr5AnoL0Xu+5D04jtEMcoE+UGijgyXbofdfSg/mM31zhvDdZyDz7WdIrhfEZA8iYub+M6AxfAhGczKLxKZwPLbB4ClcCGaiOB+cvRBsuZ36YL25EGw4YgCcfE4k6aGPwcHHWALYO4iTgwMdpMnBgQ7aycGBDrrJwYEO8uTgQAdlcnCgg35ycKCDYXJwmIPWTA4OdHCqSf7CQXfyC3YcnGqSoQ5ONclQB+3k4EAHp5pkqINTTTLUwakmGergldYkEK/OA1p/yUE8QiNj/6HJxUva5Jw/DW78vtIKZiy/3ZXWO6P5faXV0Wh+111LSfwqkMOlI39die7qLo9GMsVOpnRNqbuIGcmUuuuSkUypu9QYyZS6q4eRTKl7iz+OKVz3PnwkU+reLH+fKX1XJPhad7S9plzrjrbXFDuZ0jXlWne0vaZc646215Rr3dH2mpLe0YprLxyRhAsXjiSSiz+5S9yn7ilX6XbPta7GwTA5OMxBMZODAx2EycGBDmrZhctJ18iZX9QeW5T40lAK+XaOiDXHOZJu8hGI7U+C/2tRSpGY4/cPTc76FN+YrmWX/+Wmy9F0CBdsdHGE+KS9iNDvLbSThUMt1FJBVGzhmPXG5y82GxqpicYn94cuShweBwo5cXhvMRxivZWTYJ8ip7jbt2j6D4wQWkd2izmeBu+4g1HKDUq5USk3KeW2SrmdUm5Wyi1Kub1SbqX5EozShAkmnTG53Xg6hkrBUSs4aQVPJ82o4c+SisCdVnDWCi5awb1W8KAUHIxWcNAKjlrBSSu41swJWjMnaM2coDVzph/FOBpNqIkm/fjI0WigKhqsioaqorFV0biqaLgqGqmKpqq1GKtai6mqtZiqWoupqrWYqlqLqaq1mKpai6mqtZiqWovtD89ipCONdR2a5EihQEuDQjRWgXGeYo9+5hnYfGxz91AputeLHtSiO6MXPf23A0TivUYSXKXoqBed9KJbvehOLzrrRRe96F4velCLnm5q14GuN5uy3mzKerMp682mrDebst5synqzaboJGALEbpKAtaIHtejptlcd6PZnL2jRsRuHwHZoXFU0XBWNVEXjq6IJNdF4UxVNer9s4rIAhv1YixMGjOimc33bo1709H4ZTtqoHVSKbvWiO73orBc9vV/eVS8R3Vf6MU23xoI1sVXbmkpdT3fH6kBHveikFz29rjuMK4xzplJ0pxed9aKLXnSvFz1oRcd036wOdNCLjnrRSS+62myK5kw2lXi50gWsFJ31ootedK8XPahFB6MXHfSio170dEqi49dQRHXWpphuTdWBznrRRS+614se1KKnW191oINedNSLTnrR9WZT1JtN8Uw2tfEvWhJXWlaj6EX3etGDWnQyetFBLzrqRVf75SOmG651oDu96KwX/YdvMOynSTcTCrUwYqkjSXof4nP9g+ueRfIlPl8SsiVn2oXO34i3F0GJCEtEVCKyJSJXIuISkZSIfIkoFIikZEZIyYyQkhkhJTNCSmaElMyI9L3cvctJ+obrYNrnQwTsSvI/6Ok7bnvPkr7TtV9i8yUuX5K/APv8BdjnL8A+f1zS9yn2SyBfgvmS9Oi7diYHwY7E5ktcvoTzJZIv8fmSkCshc2n0E5Ls0SeD+RLKl9h8icuXcL5E8iU+X5L92Scw+ZL80Yf80Yf80Yf80YfM0f/Yvfrnbru8u18tXnaK5s239cPrcrM+vHz997l95367XK2WT7fP283D4vFtu7hdbR6a92bm8OMXIc7J0u/msdy7lxLm3jYvGovJ2t17vDvn7rz/AQ==","brillig_names":["only_role"]},{"name":"revoke_role","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"role","type":{"kind":"field"},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11038977800835983942":{"error_kind":"string","string":"AccessControlUnauthorizedAccount"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["revoke_role"]},{"name":"public_get_symbol","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71VUU+DMBAug0VxLjFTo4kvmpj4WgJue5xZfPBFE/cLbrQ1JJgZQOPjfrqQHFJPhkxgX9LclZbv7r5rwWAFDLQW+wmD1YBR8ewGrY22p62b6ZjhnDeDY5O4bfJPuefZJfW1mL9rI6fRDT/P+TvSn+8hz3xd8Ou15HH30zFAf1jxTpf5pv381tvsgD+Fc7wh/1yDC/QP03GEPny8Pr35KyHvhIhkHOv3iupZhW04e1twnlPOx/cwDFQgo/vPIE5+cZsl3LnfY+W10bz0fTrK7kuGGVreDE6f1DBCm/XuStPklGryEC8SSAJ/DmH43wbSw99mYYwU1mebLysV4UwT4ZrkarSfq8gEPmFE4EWyiuBFPksQdQ9z3T4MK7QYsOInZq2L9bY+GpMp53lcE/n7rNBeh6Wt6/svcX6g5Z9bq0GeagKOckHBLQjh+TAi/Izo1Hb8pXSkq5RyJXhqrHYeX3BPSPAV+NOlEmP3r/hfovsP71oJAAA=","debug_symbols":"5ZXNboMwDMffJWcOjvPhpK8yTRVt0woJQUVh0oR49yUVUApIaIzu0gtK0M/2H9vYNTu5Q3XZJ9k5v7HdR83S/BiXSZ75W91E7FAkaZpc9sPXDMKD452/XeMsXG9lXJRsx7WFiLns5I8E4D2ck9SxncYmmsIAqoMBVQ9zATO0lJJaWkqlHzTM+Tai920E8if6M2JcbKDeYAffNfyjermBesn73Oul3HOle1pzWlBvhe1oK4WcqFebqufwrD5E0C+PQC+PYP4cwbNdz2mLYqlqoLt+tmDUpGr2l3q8DcIKG77CBlfYzE4AItCtDdFgJM3mF1GIFkZU5pExsjM0CdPRJEEuVIN4P10IRxNgppc49FL8Wetx9VC+z9c2/voVF0l8SF27xs5VdhxstfL76kYL7lrkR3eqChdW3WDLhQ5GigSGXyC0po8slI/h4/wA","brillig_names":["public_get_symbol"]},{"name":"mint","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZjdSisxEMffZa/3Yj6TjK9yOByqVimUKrUeOIjvfrKlSbc2VoZ2RcGbsunOb/JPMjPZ5KW7nV8/3/9ZrO4enrqrXy/d8uFmtlk8rHLrpUPe/vf0OFsNzafNbL3prjAY9N18dZsfI8Br390tlvPuKtBrf2RMFOLOmChZNUaUlrVJ2lkzEH5gjUG4mOdnpWpPqakFKRQtKLq3Nmt558DFuSAcWP/uO5SfuXl3bvRnbt6dm3D23AgY7YwFKe1HC7jtIU7eQzq7B2SQYsw8Wl+GljVgLEuQn40PFLWiJ5nV8LHGCOy7j4CgNQITxB1lEsMHOSZUhkuie0XWShqu+ShDUhUxqlsxeAExNW1ICU6LyVkLWjM4jDN+Nzv01QTxJwuKcRTLCeORIPlqgvSigkLS04LIQt0yxtnFWzHNKm0KZQimMZ4Wk/O31FADpI/EfJsNjOLZU2NA+6lRPafwpAuICSVzDUeR0I5iUy5lOT9rOLuM2zcfAMPnDoAAUw1mYHtTaXPrer1YLhf3fw6OMjD8SHNXUCzhrqNM2gWYsB8RP6J+JDiR3MLBsr1XhxoVCXQE0vu76WmE/Yj4EfUjwY80K16iikg6QpIfMTfSzr3TCPoR8iPsR8SPqB8JfqS9+ql8/CezA6S1g5XyxnG/g3HuanCfpnVvk7oXmNY9TuuepnXP07qXad3rBd0nPnIfpnUfp3Xf/u6sn9nG8W0dEXMjCn4E/Qj5EfYj4kfUjYTgR6Ifaa5+vkOph8/4NmCCuZEIfgT9CPkR9iPiR5qrT7FeC9tRVsbgR6IfSX7E3EgCP4JOJLdoeyRo9qX1/iLquFjmC5LX3Pw7Wy9m18v5cLwa3j6vbsppKzc3/x7Lm3Iee1w/3Mxvn9fz4WS2P5QNwcTQC+QR4CAk34Qo1+PK9i+1Psjwfhhhin2yqn37nrinlFVlZf8B","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","enqueue_public_function_call_internal"]},{"name":"transfer_batch","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZnvbuIwDMDfpZ/7If6XxHuV02liG5uQEEyMnXSa9u6XIhIKBJAF3YHEF9RQ/1zbieO4/Wpexk+fb4+T2ev8o3n49dVM58+j5WQ+S6OvBmj138f7aNYNP5ajxbJ5AK+ubcazl3QZnPtum9fJdNw8ePxu94QRfVgLI0YtwgBck1aOa2lyCCekwbODbInnTmYtjxGr8hKLeAgbadWaNHnK0gxuS/p32wDfY3MwNnKPzcHY+GuPDW2cZcETsUFAn20BljNjE+6xORibeHZs2CmuhRkwbrx1sHqCDv0EdGc/AchxFibqzS+5mrSDkKcgXSttWVRbPVG1LB+teAA37wFWPUDRnDdp1Xp/IsuKv6jxlOjNbM1IVx6a/7f7IN9Dcyg0cjo0gfiEv4wlNiybJNeau1RKXD9BQGRljr+IOcVlFHTHzelyVkr0fX+21ltOuD6T4o+bFEKvSEQIeybp1ZlE7sIm+SjHTUL1Je37pYtW5tSLLwZfkj/luxw3Rx3mI4o6kTMyjfAi5vi8UBV6LtcnTIVycU/X4s89DBDdvgv80y6gg1jKhyPd2VzS6GkxmU4nb49bL1Nc98PVNSOQM0R6tWu9zJjsCNsRsSPeiKQRdJL1Q7Qv6yI66YF4+NR6HCE7wnZE7Ii3I9UKGrEgHPeQaEfUjNQrxHEE7AjaEbIjbEfEjng7Up/9mNvIqLqF1OpY3t4obOoYpUd16uOw6nVQ9eyGVQ/Dqsdh1dOw6nlY9XJB9ZH21Pth1Ydh1VezVktjqxR29xFWMyLOjoAdQTtCdoTtiJgR7+1IsCPV2U+vDkqnFXYXjFczEpwdATuCdoTsCNuR6uxjKB8YdC8rg7cjwY5EO6JmJDo7AkYkjfDeF6VD0qovqgZcyieVIP2KkV6JfKfhn9FiMnqajrses7v7OXvOLWcaLv++5zu5KX1fzJ/HL5+LcdeebjrTLprkWnbJA+gMSS9ghUrPtvpLtPXc3e+mOYY2apnAwzgVHKnFmIxOhv8D","brillig_names":["store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7ZfNbuowEIXfxess5sce27zK1VUVIK0iRQEFqFQh3r1Oih1QDVnQVq2UnYd8mjNz7IzJUa2r5eHlqW6fNzu1+HdUzWZV7utNG6KjQh5+223Ltg93+7LbqwWKh0JV7TosLcCpUM91U6mF0Kn4BBOJPcNEzicYUedor92ZZiCcoFE0RzysDSWeXLYWJIm1oDYj7X0uOwvH5Brhiv5fKNSzNze9MbM3N72R2Zub3tiHvdHg6QxrJDd2CzgouG9X8A8rIIOOMPPF/jLkaEAbtyCsPV9VlDs9zvt0fPznDgj+fAeY64BNFNF0cfQkp2AxCVjm+zDasXrrzQQMKTOCuPuwk9SnsywTr6LTlGht7QSN7C2mdxGIJmYOIMRjT4Ee99TJYDnNlv+05Txb/tOW6+xo1MA0ihh9X0TQxEkq6MzEsEOHqQEnF9e3fFRkvqKiYF6saLi4Hxy/8ttqCtGyq5umfnm6+sCB4SsnO7rIufg/iDzDte+nEL6WXV0um6pP1D89tKuYN4T7t218EpW33WZVrQ9d1ddwId9ft6gL9CFtSP0O","brillig_names":["notify_created_nullifier_oracle_wrapper"]},{"name":"burn","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1589673740894288059":{"error_kind":"string","string":"Hint values do not match hash"},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"2435529361475140548":{"error_kind":"string","string":"Non-zero value change for zero hash"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"10132274202417587856":{"error_kind":"string","string":"invalid nonce"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11332022755610627056":{"error_kind":"string","string":"Frozen: Sender"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13107192312614724151":{"error_kind":"string","string":"Return notes not sorted in descending order."},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16049994897275280777":{"error_kind":"string","string":"Non-zero delay change for zero hash"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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6bbl0HLZ0v1MdGi5bOk/W7RctvSfLVouW/rPlsYWtnSfLVouW/rPFi2XLf1ni5bLlv6zRctlS//ZouWypftsObVctvTbouWypfs30anlsqX/bNFy2dJvS2MLW7p/E2m5bOk/W7RctvSfLVouW/rPFi2XLf22aLls6bXlvGm5bOm9bzlvWi5b+s8WLZct/bZouWzpt6WxhS3d9y1aLlv6zxYtly39Z4uWy5b+s0XLZUv/2aLlsqX7bJm0XLZ0ny2TlsuW/rNFy2VL/9mi5V7alsd38vaf62f8G/5V+J+f8ddbL8z/LZAeH1e/1a/2GX8FtTZ/TbQ2f5WzNn/dsjT/WYmszV9brM1fLazNX/+rzb/hX5q//lebv/5Xm7/+V5u//lebv/5Xmv+i/9Xmr//V5q//1eav/9Xm3/AvzV//q81f/6vNX/+rzV//q81f/yvNv+l/tfnrf1fm/+v7fvvPz/7+q+l/tfnrf7X5N/xL89f/Ln3/d64P/vP2GX/9rzZ//a/285/+V5u//lea/6r/1eav/9Xmr//V5q//1ebf8C/NX/+rzV//q81f/6vNX/+rzV//K81/0/9q89f/avPX/2rz1/9q82/4l+av/9Xmr//V5q//1eav/9Xmr/+V5r/rf7X563+1+et/pf/+b9f/avNv+Jfmr//V5q//lf77313/q81f/6v9/Kf/leZ/6H+1+et/tfnrf7X563+1+Tf8S/PX/2rz1/9q89f/avPX/2rz1/9K8z/1v9r89b/a/PW/2vz1v9r8G/6l+et/tfnrf7X563+1+et/tfnrf4X5t9tN/6vNX/+rzV//K/z3X2/89b/a/Bv+pfnrf7X563+F//7zjb/+V5u//lf7+U//K81/0v9q89f/avPX/2rz1/9q82/4l+av/9Xmr//V5q//1eav/9Xmr/+V5j/rf7X563+1+et/tfnrf7X5N/xL89f/avPX/2rz1/9q89f/avPX/0rzX/S/2vz1v9J//7Pof7X563+1+Tf8S/PX/0r//d+i/9Xmr//Vfv7T/2rz1/9K82/6X23++l9t/vpfbf76X23+Df/S/PW/2vz1v9r89b/a/PW/2vz1v9L8V/2vNn/9rzZ//a82f/2vNv+Gf2n++l9t/vpfbf76X23++l9t/vpf6b//2PS/2vz1v9r89b/a/PW/0n//tTX8S/PX/0o//236X23++l9t/vpfbf76X2n+u/5Xm7/+V5u//lebv/5Xm3/DvzR//a82f/2vNn/9rzZ//a82f/2vNP9D/6vNX/+rzV//q81f/6vNv+Ffmr/+V5u//lf6/f+H/lebv/5Xm7/+V5r/qf+V/vufU/+rzV//K/38d+p/tfk3/Evz1/9q89f/avPX/2rz1/9q89f/KvOfbvpfbf76X23++l9t/vpfbf4N/9L89b/a/PW/2vz1v9r89b/a/PW/0vwn/a82f/2vNn/9r/L7v6dJ/6vNv+Ffmr/+V5u//lf57z/efhr8S/PX/2o//+l/pfnP+l9t/vpfbf76X23++l9t/g3/0vz1v9r89b/a/PW/2vz1v9r89b/S/Bf9rzZ//a82f/2vNn/9rzb/hn9p/vpfbf76X23++l/p9/8u+l9t/vpfaf5N/6vNX/8r/f7/pv/V5q//lX7+aw3/0vz1v9r89b/a/PW/2vz1v9r89b/S/Ff9rzZ//a82f/2vNn/9rzb/hn9p/vpfbf76X23++l9t/vpfbf76X2n+m/5Xm7/+V/r9n5v+V5u//lebf8O/NH/9r/T7vzf9rzZ//a/285/+V5u//lea/67/1eav/9Xmr//V5q//1ebf8C/NX/+rzV//q81f/6vNX/+rzV//K83/0P9q89f/avPX/2rz1/9q82/4V37/36H/1eav/9Xmr//V5q//lX7/76H/leZ/6n+ln/9O/a82f/2vNn/9rzb/hn9p/vpfbf76X23++l9t/vpfbf76X2X+bz87/qX563+1+et/tfnrf7X5N/xL89f/avPX/yq//2u+6X+1+et/tfnrf6X5T/pf5fd/zpP+V5u//lf6+W/S/2rzb/iX5q//1eav/9Xmr//V5q//1eav/5XmP+t/tfnrf7X563+1+et/tfk3/Evz1/9q89f/avPX/0q//2fW/2rz1/9K81/0v9r89b/S7/9b9L/a/PW/0s9/S8O/NH/9rzZ//a82f/2vNn/9rzZ//a80/6b/1eav/9Xmr//V5q//1ebf8C/NX/+rzV//q81f/yv9/o+m/9Xmr/+V5r/qf7X563+l3/+16n+1+et/pZ//1oZ/af76X23++l9t/vpfbf76X23++l9p/pv+V5u//lebv/5Xm7/+V5t/w780f/2vNn/9r/T+f9P/avPX/2rz1/9K89/1v9Lv/9n1v9r89b/Sz3+7/leb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29K0XLZ037c0LZct/WeLlsuWflu0XLb029LYwpbu+xYtly39Z4uWy5b+s0XLZUv/2aLlsqX/bNFy2dJ9tqxaLlu6z5ZVy2VL/9mi5bKl/2zRci9ty+M7efvP9TP+Df8q/M/P+OutF+Z/3rbj4+rztrfP+CuotflrorX5q5y1+euWpflvSmRt/tpibf5qYW3++l9t/g3/0vz1v9r89b/a/PW/2vz1v9r89b/S/Hf9rzZ//a82f/2vNn/9rzb/hn9p/vpfbf76X23++l9t/vpfbf76X2n+h/5Xm7/+d2X+v77vt//87O+/Dv2vNn/9rzb/hn9p/vrfpe//zvXBf94+46//1eav/9V+/tP/avPX/0rzP/W/2vz1v9r89b/a/PW/2vwb/qX563+1+et/tfnrf7X563+1+et/lfmfN/2vNn/9rzZ//a82f/2vNv+Gf2n++l9t/vpfbf76X23++l9t/vpfaf6T/lebv/5Xm7/+V/nv/85J/6vNv+Ffmr/+V5u//lf573/PSf+rzV//q/38p/+V5j/rf7X563+1+et/tfnrf7X5N/xL89f/avPX/2rz1/9q89f/avPX/0rzX/S/2vz1v9r89b/a/PW/2vwb/qX563+1+et/tfnrf7X563+1+et/pfk3/a82f/2vNn/9r/TffzX9rzb/hn9p/vpfbf76X+m//2z6X23++l/t5z/9rzT/Vf+rzV//q81f/6vNX/+rzb/hX5q//lebv/5Xm7/+V5u//lebv/5Xmv+m/9Xmr//V5q//1eav/9Xm3/AvzV//q81f/6vNX/+rzV//q81f/yvNf9f/avPX/0r//c+u/9Xmr//V5t/wL81f/yv993+7/lebv/5X+/lP/6vNX/8rzf/Q/2rz1/9q89f/avPX/2rzb/iX5q//1eav/9Xmr//V5q//1eav/5Xmf+p/tfnrf7X563+1+et/tfk3/Evz1/9q89f/avPX/2rz1/9q89f/Cv/9x3G76X+1+et/tfnrf7X563+F//7rjX/DvzR//a/w898bf/2vNn/9rzZ//a82f/2vNP9J/6vNX/+rzV//q81f/6vNv+Ffmr/+V5u//lebv/5Xm7/+V5u//lea/6z/1eav/9Xmr//V5q//1ebf8C/NX/+rzV//K/3+/1n/q81f/6vNX/8rzX/R/0r//c+i/9Xmr/+Vfv5b9L/a/Bv+pfnrf7X563+1+et/tfnrf7X563+l+Tf9rzZ//a82f/2vNn/9rzb/hn9p/vpfbf76X23++l9t/vpfbf76X2n+q/5Xm7/+V5u//lf6/d+r/lebf8O/NH/9rzZ//a/033+s+l9t/vpf7ec//a80/03/q81f/6vNX/+rzV//q82/4V+av/5Xm7/+V5u//lebv/5Xm7/+V5r/rv/V5q//1eav/9Xmr//V5t/wL81f/6vNX/+rzV//K/3+313/q81f/yvN/9D/avPX/0q////Q/2rz1/9KP/8dDf/S/PW/2vz1v9r89b/a/PW/2vz1v9L8T/2vNn/9rzZ//a82f/2vNv+Gf2n++l9t/vpfbf76X23++l9t/vpfZf7TTf+rzV//q/z+z+mm/9Xmr//V5t/wL81f/6v8/u/ppv/V5q//1X7+0/9q89f/SvOf9L/a/PW/2vz1v9r89b/a/Bv+pfnrf7X563+1+et/tfnrf7X563+l+c/6X23++l9t/vpfbf76X23+Df/K7/+b9b/a/PW/2vz1v9r89b/S7/+d9b/S/Bf9r/Tz36L/1eav/9Xmr//V5t/wL81f/6vNX/+rzV//q81f/6vNX/8rzb/pf7X563+1+et/tfnrf7X5N/xL89f/avPX/0q//6vpf7X563+1+et/pfmv+l/p93+u+l9t/vpf6ee/Vf+rzb/hX5q//lebv/5Xm7/+V5u//lebv/5Xmv+m/9Xmr//V5q//1eav/9Xm3/AvzV//q81f/6vNX/8r/f6fTf+rzV//K81/1/9q89f/Sr//b9f/avPX/0o//+0N/9L89b/a/PW/2vz1v9r89b/a/PW/0vwP/a82f/2vNn/9rzZ//a82/4Z/af76X23++l9t/vpf6fd/HPpfbf76X2n+p/5Xm7/+V/r9X6f+V5u//lf6+e9s+Jfmr//V5q//1eav/9Xmr//V5q//Veb/9rPjX5q//lebv/5Xm7/+V5t/w780f/2vNn/9r/L+f77pf7X563+1+et/pflP+l/l9//Mk/5Xm7/+V/r5b9L/avNv+Jfmr//V5q//1eav/9Xmr//V5q//leY/63+1+et/tfnrf7X563+1+Tf8K+9/Z/2vNn/9rzZ//a82f/2v9Ps/Zv2vNP9F/yv9/Lfof7X563+1+et/tfk3/Evz1/9q89f/avPX/2rz1/9q89f/SvNv+l9t/vpf6f1f0/9q89f/avNv+Jfmr/+V3v83/a82f/2v9vOf/lebv/5Xmv+q/9Xmr//V5q//1eav/9Xm3/AvzV//q81f/6vNX/8rvf9Z9b/a/PW/0vw3/a82f/2v9P530/9q89f/Sj//bQ3/0vz1v9r89b/a/PW/2vz1v9r89b/S/Hf9rzZ//a82f/2vdP/f9b/a/Bv+pfnrf7X563+l93+7/lebv/5X+/lP/yvN/9D/avPX/2rz1/9q89f/avNv+Jfmr//V5q//le6/h/5Xm7/+V5u//lea/6n/ld7/nPpfbf76X+nnv1P/q82/4V+av/5Xm7/+V5u//lebv/5Xm7/+V7n/LTf9rzZ//a82f/2vNn/9r3L/X24N/9L89b/Kz3/LTf+rzV//q81f/6vNX/8rzX/S/2rz1/9K959J/6vNX/+rzb/hX5q//le6/076X23++l/t5z/9rzZ//a80/1n/q81f/6vNX/8r/fw/63+1+Tf8S/PX/2rz1/9K979Z/6vNX/+r/fyn/5Xmv+h/tfnrf7X563+ln/8W/a82/4Z/af76X23++l/p/rPof7X563+1n//0v9L8m/5Xm7/+V/r+v+l/tfnrf7X5N/xL89f/Sj//N/2vNn/9r/bzn/5Xm7/+V/r+b9X/avPX/2rz1/9q89f/Sj//rQ3/0vz1v9LPf6v+V/v3v/5Xm7/+V5u//lea/6b/lb7/3/S/2vz1v9rnv/5Xm3/DvzR//a82f/2v9v2f/lebv/73WvzP/f6CzOdvV3/Of3v7ih9Xb+vyi+J0fnJxu93ax8XtNs2/Lj4+pbjfL35ryLffL/4QS1gk1gixdsWSWEPEkkKJNUQsjZVYfyLWvt9fkWU/2ydiibfEGiJWIxax/kCsY3qIdczHFxdP8/0FWabli688t/nxE7a2faKskE3ZZMqe9+95Xufp3y9u2/21a+fy+4/3YbdMz+7r2m0Jwe7r2m3Fwu5cdq+tPeze9v9mtz0Puy9r92HZxO5cdm/r9nj1jvmfIeSwxqLsiylrQUbZF1PW6o2yL6ZsoyxlUym7Hw+Zjnn794un43Z/L/N0zMsnftsA8vvKftsB8vuF/T7X6Q7m3Nv/+U9ZzsLQKBiF91GwXTQKRuF9FKwijcIrj8L5C+O0/adROO0tjYJReB8F+1CjMH4UHvF9mbYvLo58c+Fpdcru69pty8ruXHYHvrnwbOxm92Xtto5l93C75+Xx2RvzV8J+uWE9bVgp+2LK2oRSNpeygRud03KT3de1276S3Ve1++0nYje7c9kdtlV8+zHYze7L2m2ryO4/svu4fx/Lefvi/uFZH8jTbraK7L6u3Y3d7E5ld9xWsd1sFdl9XbstINk93u5vvZvv3z93u90sICmbTNnAm2kLSHZf124LSHZf1u7JApLduewOfFScLCDZfV27LSDZncvuLz5es022ipR9MWUbZSn7Wsra/1E2l7KRH/LaJhtAfl/Zb+tCfr+w34F/IDPZLRoFo/A+ChaRRsEo/DUKs62lUXjlUYj7K7TZitMoGIX3UbAPNQrDRyHyk6nabB9K2RdTtlGWsqmUjXyytDpl93Xttjhl93XttjZldzK7A+uGTSi7r2u35eZL2b3cbverl9s0fWH3vt+bwn78+q63D/aLbV5d9tZXddnb17wY+8f3vdx++07+Yv9B1DrjakQbohcjqnA/nei8PIi246url/tbL9b9t2es2+fv03jA//3r/vUmjE9eu8cT2V+ft/3r6v0uilhMlC5RdFeivJemc3qUpk9FkTCJ0iWKGkiUHlGadEiULlF0RqJ0iSJKEqVLFK2TKF2iNKIQpUcUZfayosyPj2xe2vmFKMd+9+Q4fn3d+XYv+E2Y5cnbted2f53PY/2bJ/+89g3E4/1X8/63N2B98g232+M7bnP7/eIPAxVfBj7XQCmZgc81UKNm4FMNXMVvBj7XQFWdgc81UK5n4HMNtAdg4HMNbAxk4FMNtLlg4HMNtBNh4HMNtBNh4HMNtBNh4HMNtBNh4FMN3OxEGPhcA+1EGPhcA+1EGPhcA+1EGPhcAxsDGfhUA+1EGPhcA+1EGPhcA+1EGPhcA+1EGPhcA+1EGPhUA3c7EQY+10A7EQY+10A7EQY+10A7EQY+18DGQAY+1UA7EQY+10A7EQY+10A7EQY+10A7EQY+10A7EQY+1cDDToSBzzXQToSB3zVw+/UPv2/z7ROprDlIFS6VzQWpwqVqpCLVd6Va14dU+2dS2S+QKlwqKwNShUtlC0CqcKmEfVKFS6XVkyr66e+U30kVLpWiTqpwqRR1UkXfU52KOqnCpWqkIlW0VIo6qcKlUtRJFS6Vok6qcKkUdVKFS6Wokyq4U603RZ1U4VIp6qQKl0pRJ1W4VIo6qcKlaqQiVezT33pT1EkVLpWiTqpwqRR1UoVLpaiTKlwqRZ1U0VJNijqpwqVS1EkVLpWiTqpwqRR1Uv0ILupTIxWpoqVS1EkVLpWiTqpwqRR1UoVLpaiTKvzpT1EnVbRUs6JOqnCpFHVShUulqJMqXCpFnVThUjVSkSpaKkWdVOFSKeqkCpdKUSfVj+CiPivqpAqXSlEnVbRUi6JOqnCpFHVShUulqJMq+ulvUdRJFS5VIxWpoqVS1EkVLpWiTqpwqRR1UoVLpaiTKlwqRZ1U0VI1RZ1U4VIp6qT6EVzUm6JOqnCpFHVShUvVSEWqaKkUdVKFS6Wokyr86U9RJ1W4VIo6qcKlUtRJFS3VqqiTKlwqRZ1U4VIp6qQKl0pRJ1W4VI1UpIqWSlEn1Y/gor4q6qQKl0pRJ1W4VIo6qcKlUtRJFS3VpqiTKvrpb1PUSRUulaJOqnCpFHVShUvVSEWqaKkUdVKFS6WokypcKkWdVOFSKeqkCpdKUSfVj+CivivqpAqXSlEnVbhUijqpwqVS1EkVLlUjFamCn/52RZ1U4VIp6qQKl0pRJ1W4VIo6qcKlUtRJFS3VoaiTKlwqRZ1U4VIp6qQKl0pRJ9WP4KJ+NFKRKloqRZ1U4VIp6qQKl0pRJ1W4VIo6qcKf/hR1UkVLdSrqpAqXSlEnVbhUijqpwqVS1EkVLlUjFamipVLUSRUulaJOqnCpFHVS/Qgu6qeiTqpwqRR1UgVL9fYzk4pU0VIp6qQKl0pRJ1Xw0992U9RJFS5VIxWpoqVS1EkVLpWiTqpwqRR1UoVLpaiTKlwqRZ1U0VJNijqpwqVS1En1I7ioT4o6qcKlUtRJFS5VIxWpoqVS1EkVLpWiTqrwpz9FnVThUinqpAqXSlEnVbRUs6JOqnCpFHVShUulqJMqXCpFnVThUjVSkSpaKkWdVD+Ci/qsqJMqXCpFnVThUinqpAqXSlEnVbRUi6JOquinv0VRJ1W4VIo6qcKlUtRJFS5VIxWpoqVS1EkVLpWiTqpwqRR1UoVLpaiTKlwqRZ1UP4KLelPUSRUulaJOqnCpFHVShUulqJMqXKpGKlIFP/01RZ1U4VIp6qQKl0pRJ1W4VIo6qcKlUtRJFS3VqqiTKlwqRZ1U4VIp6qQKl0pRJ9WP4KK+NlKRKloqRZ1U4VIp6qQKl0pRJ1W4VIo6qcKf/hR1UkVLtSnqpAqXSlEnVbhUijqpwqVS1EkVLlUjFamipVLUSRUulaJOqnCpFHVS/Qgu6puiTqpwqRR1UkVLtSvqpAqXSlEnVbhUijqpop/+dkWdVOFSNVKRKloqRZ1U4VIp6qQKl0pRJ1W4VIo6qcKlUtRJFS3VoaiTKlwqRZ1UP4KL+qGokypcKkWdVOFSNVKRKloqRZ1U4VIp6qQKf/pT1EkVLpWiTqpwqRR1UkVLdSrqpAqXSlEnVbhUijqpwqVS1EkVLlUjFamipVLUSfUjuKifijqpwqVS1EkVLpWiTqpwqRR1UgVLtd8UdVIFP/3tN0WdVOFSKeqkCpdKUSdVuFSNVKSKlkpRJ1W4VIo6qcKlUtRJFS6Vok6qcKkUdVL9CC7qk6JOqnCpFHVShUulqJMqXCpFnVThUjVSkSr46W9S1EkVLpWiTqpwqRR1UoVLpaiTKlwqRZ1U0VLNijqpwqVS1EkVLpWiTqpwqRR1Uv0ILupzIxWpoqVS1EkVLpWiTqpwqRR1UoVLpaiTKvzpT1EnVbRUi6JOqnCpFHVShUulqJMqXCpFnVThUjVSkSpaKkWdVOFSKeqkCpdKUSfVj+CivijqpAqXSlEnVbRUTVEnVbhUijqpwqVS1EkV/fTXFHVShUvVSEWqaKkUdVKFS6WokypcKkWdVOFSKeqkCpdKUSdVtFSrok6qcKkUdVL9CC7qq6JOqnCpFHVShUvVSEWqaKkUdVKFS6Wokyr86U9RJ1W4VIo6qcKlUtRJFS3VpqiTKlwqRZ1U4VIp6qQKl0pRJ1W4VI1UpIqWSlEn1Y/gor4p6qQKl0pRJ1W4VIo6qcKlUtRJFS3VrqiTKvrpb1fUSRUulaJOqnCpFHVShUvVSEWqaKkUdVKFS6WokypcKkWdVOFSKeqkCpdKUSfVj+CifijqpAqXSlEnVbhUijqpwqVS1EkVLlUjFamCn/4ORZ1U4VIp6qQKl0pRJ1W4VIo6qcKlUtRJFS3VqaiTKlwqRZ1U4VIp6qQKl0pRJ9WP4KJ+NlKRKloqRZ1U4VIp6qQKl0pRJ1W4VIo6qcKf/hR1UgVLddwUdVKFS6WokypcKkWdVOFSKeqkCpeqkYpU0VIp6qQKl0pRJ1W4VIo6qX7EFvXjpqiTKlwqRZ1U0VJNijqpwqVS1EkVLpWiTqrop79JUSdVuFSNVKSKlkpRJ1W4VIo6qcKlUtRJFS6Vok6qcKkUdVJFSzUr6qQKl0pRJ9WP4KI+K+qkCpdKUSdVuFSNVKSKlkpRJ1W4VIo6qcKf/hR1UoVLpaiTKlwqRZ1U0VItijqpwqVS1EkVLpWiTqpwqRR1UoVL1UhFqmipFHVS/Qgu6ouiTqpwqRR1UoVLpaiTKlwqRZ1U0VI1RZ1U0U9/TVEnVbhUijqpwqVS1EkVLlUjFamipVLUSRUulaJOqnCpFHVShUulqJMqXCpFnVQ/gov6qqiTKlwqRZ1U4VIp6qQKl0pRJ1W4VI1UpAp++lsVdVKFS6WokypcKkWdVOFSKeqkCpdKUSdVtFSbok6qcKkUdVKFS6WokypcKkWdVD+Ci/rWSEWqaKkUdVKFS6WokypcKkWdVOFSKeqkCn/6U9RJFS3VrqiTKlwqRZ1U4VIp6qQKl0pRJ1W4VI1UpIqWSlEnVbhUijqpwqVS1En1I7io74o6qcKlUtRJFS3VoaiTKlwqRZ1U4VIp6qSKfvo7FHVShZ9UjVSkipZKUSdVuFSKOqnCpVLUSRUulaJOqvCnP0WdVNEn1amokypcKkWdVOFSKeqkCpdKUSdVuFSNVKQKfvo7FXVShUulqJMqXCpFnVThUinqpPquVG9C3KXaf3+lH1Ip6qR6f6EfX3hq2/SFVtt6u3/pbV2m37X6xMHbr4fF2zT/uvj41I79fvGyHrffL34X9ryp9YR9KWFtAgj7UsLaMhA2k7D7fn81lv1snwhrg0HYlxK2EZawiYQ9poewx3x8cfE031/oZVq++Mpze7wc8zpP/37xW/a6f8vnP1PFebP+MTWm5rtTY79lampMzdraY2q2/b9NjQWeqTE1350aG0pT87pTs26PqdmOr+7Q5rtKc2vbJ4/49qpGocgoxD2sTJa7psbUfHdqbJhNjan57tRYc5uaGlMT+Ig/2bWbGlPz3alppsbUlJia7XHxvB3zP8PYZItvFIzC+yhYzRsFo/A+CvbtRqHGKOzHQ9Jj3v794um43f8meDrm5ZO5sXE3N+bm+3NjPW9uzM0netw/LmA69/afmtdsl2/EjNjQEbP4N2JGbOiIeZeAETNi/9Tj/KXHtP23EfOWAiNmxIaOWDNiRuxVR2xeHh9YNH/1Rpwvy9/s/QdGwSi8j4L3HxiFGqMQWQS8VcHUmJrvTo03KpgaU/PdqfE2BVNTZGriatfinQemxtR8d2q8mcDUpJqa4w58OW9f3Ed98+M1v/jwpsXS3ygUGYW4D9RY7PFNjan57tQ0U2NqTM03p8YW39TUmJrAj6FZLPxNjan57tRY+JuaGlPz1cd0LLb4RsEovI+C1bxRMAp/jUKzbzcKNUYh9ENomo27uTE3358b63lzY24+0SPsjcfNLt+IGbGhI9aMmBEzYiNHzLsEjJgR+6cecX810LylwIgZsaEj5v0HRux1R+xJ/7xn81YFU2Nqvjs13tVgampMTeA7RFdvgDA1pua7U+PtD6bmZacm9JM4V+9oMApG4X0UvPPAKNQYhcBN59pMjakxNd+cGu8PMDWm5rtTY+VvaopMTdwWf7XFNzWm5rtTY4tvat6z0XT7lY22v03Nhyk210zpMmWzrWXK/23KdH5mig0lU/pMscBjSp8p9ltM6TOlMYUpXabYYzClzxTt/rKmrA+G67L8zZQP9gp0XfY6al32ymhZ9rvWWZe9elmXvR5Zl73CWJd9w74sexWwLntdry57Xa8ue12vLntdryz7Q9ery17Xq8te16vLXtery75hX5a9rleXva5Xl72uV5e9rleXva5Xlv2p69Vlr+vVZa/r1WWv69Vl37Avy17Xq8te16vL/vOudzxexuk4f33E3vzZj7oc6+MfrjzO9d8vZtUVrNof/1Tpvs1/s+qTn3BbH//IwvbbP+nzpseHggcFKfhcBU8KUvCJCp63242CFHyughMFKfhcBWcKUvC5Ci4UpOBzFWwUpOBzFVwpSMHnKrhRkILPVfC/b0fa7fEv2rdpWv794r928B8Xn7fp4Ctfv+frwVe+vpCv5//Y12O5/8ujx7FOX/u6/PJ1PulN72/pPd3oTe/r6j252+DrC/k685WvL+Tr4vaB3tfVu9Gb3tfVe3W3wdcX8nXjK19fyNf/9W5u2+4XH5tdMl+/66vdHF9fydeTr3x9HV9nyzZ6X1jvid70vq7ednN8fSVfF77y9YV8bW4f6H1dvVd60/u6etvN8fWVfPV3c3x9JV8Pu2S+vpCvdnN8fSFflxtf+fpCvlq20fvCes/0pvd19bab4+sr+dr4ytcX8tWyjd4X1nujN72vq7fdHF9fyVd/N8fXV/L1tEvm6+v42uzm+PpKvvrUSb6+kq+WbfS+sN4+pJLeF9a7udvg6wv56lMn+fpKvlq20fvCeu/0pvd19bab4+sr+erv5vj6Qr6uN7tkvr6Qr3ZzfH0lX33qJF9fyVfLNnpfWO9Gb3pfV2+7Ob6+kq8+dZKvr+SrZRu9L6z3QW96X1dvuzm+vpCvm7+b4+sr+TrZJfP1hXy1m+PrK/nqUyf5+kq+NjmB3tfV24dU0vvCetvN8fWVfPWpk3x9JV8t2+h9Yb1PetP7snrvdnN8fSVf/d0cX1/J19kuma8v5KvdHF9fydfGV76+kK+WbfS+sN4+pJLeF9bbbo6vr+SrT53k6yv5atlG7+vqfdzoTe/r6m03x9dX8tXfzfH1lXxd7JL5+kK+NucrX1/IV586yddX8tWyjd4X1tuHVNL7wnrbzfH1lXz1qZN8fSFfT8s2el9Y74ne9L6u3nZzfH0lX/3dHF9fyddml8zXF/J15StfX8jXgN3cPN8vbvP+xRPX2ab7d3+2/Qu53zg8Xpe3/14bven9Pb13etP7unof9Kb3dfU+6U3vq+o93W70pvd19Z7oTe/r6j3Tm97X1fu/LwrXN6vu3/y6LBSk4PcUbBSk4HMVXClIwecquFGQgs9VcKcgBZ+r4EFBCj5XwZOCFHyqgtONghR8roITBSn4XAVnClLwuQrajlDwyQq2/67gut//P9at3b5QcF+Xx5fe1/PLDfQ6P36A27r60xSCf1PwleAEv7LgG8EJfmXB91cSfJsITvDvCX4kF9y7QAn+nwQ/CU7wCws+3whO8CsLPhGc4FcWfCY4wa8s+PK/Fnzbpofg+7x9cfnbd/IL0XnbCE7w7wnekgt+ng9T3nwkOMG/KfhKcIJfWfCN4AS/suA7wQl+ZcEPghP8yoKfBCf4hQVfbgQn+JUFnwhO8CsL/j/fZJ7LQ8H93HbGMvZ7xi6MZexLGdv+x8Yet/Oh4PF2j8BYxn7P2IDl4fZ4zdft+OoNS8eyH48v3SZvWGLsN43d/tfGrrdfZ+y6HP9++Zsc96vb/NsHqf91Nv/zG2m3x6vY5vbvF5sFs/B/z8JuFsyCWXifhcMsmAWz8D4Lp1kwC2bhr1loN7NgFszC+yxMZsEsmIX3WZjNglkwC++zsJgFs2AW3mehmQWzYBbeZ2E1C2bBLLzPgr2zWTALP2fB3tksmIWfs2DvbBbMws9ZsHc2C2bhfRZWe2ezYBZ+zoK9s1kwCz9nwd7ZLJiFn7Ng72wWzMLPWWhmwSyYhfdZsHc2C2bh5yzYO5sFs/BzFuydzYJZ+DkL9s5mwSz8nAV7Z7NgFt5nYbN3Ngtm4ecs2DubBbPwcxbsnc2CWfg5C/bOZsEs/JyFZhbMgll4nwV7Z7NgFn7Ogr2zWTALP2fB3tksmIWfs2DvbBbMws9ZsHc2C2bhfRZ2e2ezYBZ+zoK9s1kwCz9nwd7ZLJiFn7Ng72wWzMLPWWhmwSyYhfdZsHc2C2bh5yzYO5sFs/BzFuydzYJZ+DkL9s5mwSz8nAV7Z7NgFt5n4bB3Ngtm4ecs2DubBbPwcxbsnc2CWfg5C/bOZsEs/JyF9uksECWpKMdyv/jY9r+J8sFzxfPJPN9+v9x5vr16X1w9n/v9BZnP33+RbOsnV2/r7fi4+u0X0PTvp3273dr998ht+u2kOD59rff7d73sZ/v94g+xNmIRa4RYO7GI9QdiHdNDrGM+vrh4etw0LdPyxVee2/z4CVvbPlH2oCxlcyl73r/neZ2nf7+4bY/ny/Nvj5cfdp/sZvdV7T5v7Gb3Ze2e2M3uVHavrT3s/j1Z/YndM7vZfVm7F3azO5Xd27o9Xr1j/mcIORtlKftaylqQUfbFlLV6o2wuZffjIdMxb/9+8XTcHu9BOeblE79tAPl9Zb+tC/n9wn6f63QHc+7tvzUOu0WjYBTeRuFNA6NgFIzCX6Nga2kUXnkUzl8Yp+2/jYIVp1EwCu+jYB9qFMaPwiO+L9P2xcWB79Sab43d7L6s3bas7M5ld9w7teabhSy7r2u3dSy7h9s9L/evvMxfCfvVhnW+2bBS9sWUtQmlbC5lAzc6k+Umu69rt30lu69rtxUku5PZHbdVnGwV2X1duxu72f0ndh/372M5b1/cPzzr003myVaR3de121aR3bnsDtwqTraK7L6u3RaQ7B5v97fezffvH2I8TxaQlE2mbNzN9GwBye7r2m0Bye7r2m0Bye5cdgc+Ks4WkOy+rt2N3exOZfcXH685z7aKlH0xZa0KKftiytr/UTaXspEf8jrPNoD8vrLf1oX8fmG/A/9AZrFbNApG4X0ULCKNglF4HwVbS6PwyqMQ91doixWnUTAK76PQjIJRGD0KoZ9MtdiHUvbFlLUPpWwuZSOfLK1O2X1duy1O2X1du61N2Z3M7ri60WxC2X1duy03X8ru5fb4vpfbb9/JX3Z/ELWjuxpRq6anE12mB9HfD/5Prz7m+f475Zj3L/n/+szN9tt3/dcC55NX73Ga//VZnb+u3u+qNKpQpU8VKxCqfNypntPjTvVTVaweqNKpio5PlU5VRHGqdKqiMFOlT5VVrqVKpyraJ1U6VRFVqdKpilp7YVXmx0dALu38QpVjv38bx/GLyny7d/21MYUpf117bvdX+jzWv5nyz2vfUDw2uvP+t5XuJz9gu93/gGRtc/v94g8HVWAOPttBeZmDz3ZQt+bgsx0UxDn4bAeVdg4+2cFNwufgsx20G+Dgsx20dODgsx20zeDgsx1sHOTgkx20J+Hgsx20J+Hgsx20J+Hgsx20J+Hgsx20J+Hgkx3c7Uk4+GwH7Uk4+GwH7Uk4+GwH7Uk4+GwHGwc5+GQH7Uk4+GwH7Uk4+GwH7Uk4+GwH7Uk4+GwH7Uk4+GQHD3sSDj7bQXsSDj7bQXsSDj7bQXsSDj7bwcZBDj7ZQXsSDj7bQXsSDj7bQXsSDj7bQXsSDj7bQXsSDn7fwe3XP0i7zbd/anVafdBqgFa2GbQaoJUFBa3+QKt1fWi1f6aVnQOtBmjVaEWreK1sBmg1QCuxn1YDtNLvaTXgSVCSp9UArVR2WoVrtdxUdlqF31stN5WdVgO0UtlpNUArlZ1WA7RqtKJVvFYqO60GaKWy02qAVio7rQZ0K5WdVgO0UtlpFa/VpLLTaoBWKjutBmilstMq/klwUtlpNUCrRitaxWulstNqgFYqO60GaKWy02qAVio7rQZopbLTKl6rWWWn1QCtVHZa/YFWX1T2WWWn1QCtVHZaDdCq0YpW8Vqp7LQaoJXKTqsBT4IqO60GaKWy02qAVio7reK1WlR2Wg3QSmWn1QCtVHZaDdBKZafVAK0arWgVr5XKTqs/0OqLyr6o7LQaoJXKTqsBWqnstBqglcpOq3itmspOq/gnwaay02qAVio7rQZopbLTaoBWjVa0itdKZafVAK1UdloN0Eplp9UArVR2Wg3QSmWn1R9o9UVlX1V2Wg3QSmWn1QCtVHZaDdBKZafVAK0arWgV/iS4quy0GqCVyk6rAVqp7LQaoJXKTqsBWqnstIrXalPZaTVAK5WdVgO0UtlpNUArlZ1Wf6DVF5V9a7SiVbxWKjutBmilstNqgFYqO60GaKWy02rAk6DKTqt4rXaVnVYDtFLZaTVAK5WdVgO0UtlpNUCrRitaxWulstNqgFYqO60GaKWy0+oPtPqisu8qO60GaKWy0ypeq0Nlp9UArVR2Wg3QSmWnVfyT4KGy02qAVo1WtIrXSmWn1QCtVHZaDdBKZafVAK1UdloN0Eplp1W8VqfKTqsBWqnstPoDrb6o7KfKTqsBWqnstBqgVaMVreK1UtlpNUArlZ1WA54EVXZaDdBKZafVAK1UdlqFa9VuKjutBmilstNqgFYqO60GaKWy02qAVo1WtIrXSmWn1R9o9e+Vvd1UdloN0Eplp9UArVR2Wg3QSmWnVbxWk8pOq/gnwUllp9UArVR2Wg3QSmWn1QCtGq1oFa+Vyk6rAVqp7LQaoJXKTqsBWqnstBqglcpOqz/Q6ovKPqvstBqglcpOqwFaqey0GqCVyk6rAVo1WtEq/ElwVtlpNUArlZ1WA7RS2Wk1QCuVnVYDtFLZaRWv1aKy02qAVio7rQZopbLTaoBWKjut/kCrLyr70mhFq3itVHZaDdBKZafVAK1UdloN0Eplp9WAJ0GVnVbxWjWVnVYDtFLZaTVAK5WdVgO0UtlpNUCrRitaxWulstNqgFYqO60GaKWy0+oPtPqisjeVnVYDtFLZaRWv1aqy02qAVio7rQZopbLTKv5JcFXZaTVAq0YrWsVrpbLTaoBWKjutBmilstNqgFYqO60GaKWy0ypeq01lp9UArVR2Wv2BVl9U9k1lp9UArVR2Wg3QqtGKVvFaqey0GqCVyk6rAU+CKjutBmilstNqgFYqO63itdpVdloN0Eplp9UArVR2Wg3QSmWn1QCtGq1oFa+Vyk6rP9Dqi8q+q+y0GqCVyk6rAVqp7LQaoJXKTqt4rQ6VnVbxT4KHyk6rAVqp7LQaoJXKTqsBWjVa0SpeK5WdVgO0UtlpNUArlZ1WA7RS2Wk1QCuVnVZ/oNUXlf1U2Wk1QCuVnVYDtFLZaTVAK5WdVgO0arSiVfiT4Kmy02qAVio7rQZopbLTaoBWKjutBmilstMqXKv1prLTaoBWKjutBmilstNqgFYqO63+QKt/r+zrrdGKVvFaqey0GqCVyk6rAVqp7LQaoJXKTqsBT4IqO63itZpUdloN0Eplp9UArVR2Wg3QSmWn1QCtGq1oFa+Vyk6rAVqp7LQaoJXKTqs/0OqLyj6p7LQaoJXKTqt4rWaVnVYDtFLZaTVAK5WdVvFPgrPKTqsBWjVa0SpeK5WdVgO0UtlpNUArlZ1WA7RS2Wk1QCuVnVbxWi0qO60GaKWy0+oPtPqisi8qO60GaKWy02qAVo1WtIrXSmWn1QCtVHZaDXgSVNlpNUArlZ1WA7RS2WkVr1VT2Wk1QCuVnVYDtFLZaTVAK5WdVgO0arSiVbxWKjut/kCrLyp7U9lpNUArlZ1WA7RS2Wk1QCuVnVbxWq0qO63inwRXlZ1WA7RS2Wk1QCuVnVYDtGq0olW8Vio7rQZopbLTaoBWKjutBmilstNqgFYqO63+QKsvKvumstNqgFYqO60GaKWy02qAVio7rQZo1WhFq/AnwU1lp9UArVR2Wg3QSmWn1QCtVHZaDdBKZadVvFa7yk6rAVqp7LQaoJXKTqsBWqnstPoDrb6o7HujFa3itVLZaTVAK5WdVgO0UtlpNUArlZ1WA54EVXZaxWt1qOy0GqCVyk6rAVqp7LQaoJXKTqsBWjVa0SpeK5WdVgO0UtlpNUArlZ1Wf6DVF5X9UNlpNUArlZ1W8VqdKjutBmilstNqgFYqO63inwRPlZ1WA7RqtKJVvFYqO60GaKWy02qAVio7rQZopbLTaoBWKjutwrV6+6lpRat4rVR2Wv2BVv9e2bebyk6rAVqp7LQaoFWjFa3itVLZaTVAK5WdVgOeBFV2Wg3QSmWn1QCtVHZaxWs1qey0GqCVyk6rAVqp7LQaoJXKTqsBWjVa0SpeK5WdVn+g1ReVfVLZaTVAK5WdVgO0UtlpNUArlZ1W8VrNKjut4p8EZ5WdVgO0UtlpNUArlZ1WA7RqtKJVvFYqO60GaKWy02qAVio7rQZopbLTaoBWKjut/kCrLyr7orLT6v9v79t2bNeRI//Fz/uBl+TtWwYHhu0xBg003EbbHmDQOP8+qou4VFvkUjFL5KKU4Qejdh/FylRmBEUFKakDreCyg1YdaAWXHbTqQCu47KBVB1oRaAVanX4naOGyg1YdaAWXHbTqQCu47KBVB1rBZQetOtAKLjtodT6tCC47aNWBVnDZQasOtILLDlp1oBVcdtCKQasDl50ItAKtzqcVXHbQqgOt4LKDVh1oBZcdtOpAK7jsoFWHO0G47KDV+bRycNlBqw60gssOWnWgFVx20KoDreCyg1YdaEWgFWh1Pq3gsoNWHWgFlx206kAruOygFYNWBy67g8sOWnWgFVx20Op8Wnm47KBVB1rBZQetOtAKLjtodf6doIfLDlp1oBWBVqDV+bSCyw5adaAVXHbQqgOt4LKDVh1oBZcdtOpAK7jsoNX5tApw2UGrDrSCyw5aMWh14LIHuOygVQdawWUHrTrQikAr0Op8WsFlB6060AouO2jV4U4QLjto1YFWcNlBqw60gssOWp1PqwiXHbTqQCu47KBVB1rBZQetOtAKLjto1YFWBFqBVufTCi47aMWg1YHLHuGyg1YdaAWXHbTqQCu47KBVB1rBZQetzqdVgssOWp1/J5jgsoNWHUYruOygVQdawWUHrTrQikAr0Op8WsFlB6060AouO2jV4U4QLjto1WG0gssOWnWgFVx20Op0WgUFlx206kAruOygVQdawWUHrU6/EwwKLjto1YFWBFqBVufTCi47aNWBVnDZQat2Wi2UWGkVtrXOtILLDlp9ltr6XGqvD4jlnVp/2jurt8QqsFA9bhzV9hRjkR9hPdi6qLYHf1IWDj4oezHKYnUAlL0WZTVWHkDZuSgbwlprGxIVKItVDVD2YpTFigkoOxdlo86UjSYeHKzNWmqr7cEvG8rlMEupnx+8mGBryqlgW2gsCUE30E27bgi6gW6E6MYRZd348DPdYFEPuoFu2nWDVUvo5sq6cT7rxsejeZpZyWSIfOFmH2utEIMYMZx404IFX+gGumnXDVadoRvoplk3Bkvf0I0U3Zx4s2+w/g7dQDftusEmAOhGim58Ptj4aPYmmcHKPsQAMXyKgSAGiAFi+BAD1uAhBiliCDHTNBr//GAd1frssI7GFpSDVXgoB8rhKAdL9lAOlFMkyNoWnQL9zP/C+j5EBpF1Fhk2A0BkEFlfkVnsHIDIILISQdKDINr/TGTYZgCRQWSdRYY9CRDZhUVmbH69kTnannPoAlrsSYAYIIZPMRDEADEIEcOZ3gC2L0A30E27brB5AbqBbtp1g60L0I0Y3ZzofGE3AnQD3bTrBhsMoJvJdBPXltukDmZTja/kPHjVE2EjAMQgRgznvXqDsLYP3UA37brBcj10A9206wYr+9CNFN2c+MoaIugGuoFumnWDTQDQjRTdHL3Qg7CyDzFADJ9iwHI9xAAxfIoBa/AQgxQxnPrCGsIqPJQD5TCU47BkD+VAOUWCnLYp2WF9HyKDyDqLDJsBIDKIrLPIsHMAIoPISgQ575kCRxAZRAaR9RUZ9iRAZFcW2Ys+E+qwfQG6gW7adYOdDtCNFN2cuHfUYVMEdAPdtOsGWyKgmwvr5tS3d3rscoAYIIZPMWA3AsQgRQwnrn16bDCAbqCbdt1gzwB0A92064agG+hGim7OW9n3WNmHbqCbdt1gZR+6+bSQtHpYSP6Lbj65gtVscOW7XMEKLriy54pOJa5g1RJc+SZXAhb1wJXvcgVrXuDKd7mCdR5w5btcwdoGuPJdrhC4cl+uuNxFZ+0Xrnx2H6605O7DW5XcfbilkrsP/1Ny9+FoCu5+hEcpuftwHSV3Hz6i5O7DGZTcfUL3BXcfXp/k7sPrk9x9eH2Suw+vT3L34fUJ7n6C1ye5+/D6JHcfXp/k7sPrk9x9QvcFdx9en+Tuw+uT3H14fZK7D69Pcvfh9cntflTw+iR3H16f5O7D65PcfXh9krtP6L7g7pe9vpgLqWN6vLDPlE7WRpc/jhmTe34weHUPXoX8QdTgzRdeFc7Ru/z5Br/5YNBCkE8SepAQJHw1CQNICBK+moQRJAQJX03CBBKChC8moVYgIUj4ahJqkBAkfDUJDUgIEr6ahBYkBAlfTUICCUHCV5Pw5ysmpNz6ESfS2j4/OKa0fjwpKR3BWDC2lbEejAVjL8XYMJixMRcmRqePGWsfjDUJBAfBWwkeQXAQ/M4ET5hzgLFXYqxRYCwYeynGakwiQPA7E9yA4CD4nQluMecAYy/FWAJjwdhLMXb0ep3368HRY4UZjG1nLNbrwNhrMTaAsWDspRiLBTgQ/NYETyA4CH5jglus14Gx12KsBmPB2EsxFgtwIPitCW5BcBD8zgQnzDnA2EsxFs/XgbHXYqzHCjMYeynGYr0OjL0WYyMYC8ZeirFYgAPB70xwUiA4CH5ngmO9Doy9FmMNGAvGXoqxWIADwW9NcALBQfA7ExzrdWDstRiL5+vA2GsxNmCFGYy9FGOxXgfGXouxeGMlGHspxjoswIHgtyY4XnAJgt+a4FivA2OvxVi8sRKMvRZjCZMIEPzOBHcgOAh+Z4JjvQ6MvRZj8XwdGHstxkasMIOxl2Is1uvA2Esx1uONlWDstRiLBTgQ/NYExwsuQfBbExzrdWDstRhLYCwYeynGYgEOBL81wT0IDoLfmeBYrwNjr8VYPF8Hxl6LsQkrzGDslRgbsF4Hxl6LsXhjJRh7LcZiAQ4EvzXB8YJLEPzWBCfMOcDYSzEWb6wEY6/FWCzAgeC3JngAwUHwOxMc63Vg7LUYi+frwNhLMTYqrDCDsZdiLNbrwNhrMRZvrARjr8VYLMCB4LcmOIHgIPidCY71OjD2WozFGyvB2GsxFgtwIPitCR5BcBD8zgTHeh0YeynGJjxfB8Zei7EaK8xg7KUYi/U6MPZajMUbK8HYazGWYC2A4HcmOF5wCYLfmuBYrwNjr8VYvLESjL0WY7EAB4LfmuAJBAfB70vwpLBeB8Zei7F4vg6MvRZjDVaYwdhLMdaCsWDspRhLP2esMevBZMLBvVcivWafKBzQe+mEXfm9/O0IBAfBWwnuQHAQ/M4E9yA4CH5nggcQHAS/M8EjCA6C35ngCQQHwW9McK1AcBD8zgT/+eKhW3i1nquzFiQECVtJaEBCkPDVJLQgIUj4ahISSAgSvpqEDiQECV9NQg8SgoSvJmEACUHCV5MwgoQg4atJmEBCkPDFJDQKJAQJX01CrJiAhC8n4QkrJi6sMZwndUDC4Gz+6eDS4cq0M/kElHN4gAUUb6a4BcVB8XtTnEBxUPzeFHdXorjXoDgo3kpxPznFsUsUFP8hxQMoDorfm+IRFAfF703xBIqD4remuFWgOCh+b4rr0RT3XmeKB+MPDl8yeTQpKQ+Kg+KtFDeTUzylzJWFkaA4KN5McQuKg+L3pjiB4qD4vSnuQHFQ/N4U96A4KH5vigdQHBS/N8UjKA6K35viCRQHxW9NcRq+urnMjTLFkw/gLDjbylkNzoKzF+Ps6PXHqFImYVxmCuAsONvK2RMWFH2uuvPxaCtTtCHmnyaNrUzgbDNnaTRnnXqMs84efLt2ocd6NJnNy9jfxud9IqTWnX2ODD0/GGqAGvZqcFAD1AA1fKrBQw1QA9TwqYYANUANUMOnGiLUADVADZ9qSFAD1AA1fKjBKagBaoAaPtWgoQaoAWr4VIOBGqAGqOFTDRZqgBqghk81ENQANUANn2rAWjTUADWsasBaNNQANaxqwFo01AA1rGrAWjTUADWsasBaNNQANXyqwWMtGmqAGlY1YC0aaoAaVjVgLRpqgBpWNWAtGmqAGlY1ENQANUANn2rAWjTUADWsasBaNNQANaxqwFo01AA1rGrAWjTUADWsasBaNNQANXyqIWAtGmqAGlY1YC0aaoAaVjVgLRpqgBpWNWAtGmqAGlY1ENQANUANn2rAWjTUADWsasBaNNQANaxqwFo01AA1rGrAWjTUADWsasBaNNQANXyqIWItGmqAGlY1YC0aaoAaVjVgLRpqgBpWNWAtGmqAGlY1ENQANUANn2rAWjTUADWsasBaNNQANaxqwFo01AA1rGrAWjTUADWsasBaNNQANXyqIWEtGmqAGlY1YC0aaoAaVjWU16JBlVmpQjZThYL/cvRnRy06+uKOWr2Kzlkbjjoa1vbH+KidWc7gs5+Efl6pn8mv9ViWr770s9/F/pMpDkwBU77FFA+mgCnfYkoAU8CUbzElgilgyreYksAUMOWQKaSW/wNTwJRvMUWDKWDKt5gCxxNM+R5T4KSCKd9jCoEpYMq3mAKPFkz5HlPg0YIp32MKPFow5XtMgUcLpnyPKfBowZRvMUXDowVTvscUeLRgyveYAo8WTPkeU+DRginfYwqBKWDKt5gCjxZM+R5T4NGCKd9jCjxaMOV7TIFHC6Z8jynwaMGUbzHFwKMFU77HFHi0YMr3mAKPFkz5HlPg0YIp32MKgSlgyreYAo8WTPkeU+DRginfYwo8WjDle0yBRwumfI8p8GjvyxSvaGWKN2rffAvbVXDz4aQKbj7M0Rs3P79Tl3woNR9+p+DmE5ovt/lwJQU3H0aj4ObDOxQ824cdKLj5cPjkNp/g8Mm95hMcPsHNh8MnuPlw+AQ3n9B8uc2Hwye4+XD4BDcfDp/g+3w4fIKbD4dPbvMdHD7BzYfDJ7j5cPjkzvYdHD7BzSc0X27z4fAJbj4cPsHNh8MnuPlw+AQ3Hw6f3OZ7OHyCmw+HT67D5+HwCW4+HD7BzSc0X27z4fAJbj4cPsGzfTh8gpsPh09w8+HwyW1+gMMnuPlw+AQ3Hw6f4ObD4RPcfELz5TYfDp9chy/A4RPcfDh8gpsPh09w8+HwyW1+hMMnd7Yf4fAJbj4cPsHNh8MnuPmE5sttPhw+wc2Hwye4+XD4BDcfDp/g5sPhk+vwJTh8gpsPh09w8+HwCW4+HD7BzSc0X+xsP8HhE9x8OHyCmw+HT3Dz4fAJbj4cPrHN1woOn+Dmw+ET3Hw4fIKbD4dPrMOnFaH5cpsPh09w8+HwCW4+HD7BzYfDJ3i2D4dPbvM1HD7BzYfDJ7j5cPgENx8On+DmE5ovt/lw+AQ3Hw6f4ObD4ZPr8Gk4fIKbD4dPbvMNHD7BzYfDJ7j5cPjkzvYNHD7BzSc0X27z4fAJbj4cPsHNh8MnuPlw+AQ3Hw6f3OZbOHyCmw+HT67DZ+HwCW4+HD7BzSc0X27z4fAJbj4cPsGzfTh8gpsPh09w8+HwyW0+weET3Hw4fIKbD4dPcPPh8AluPqH5cpsPh0+uw0dw+AQ3Hw6f4ObD4RPcfDh8cpvv4PDJne07OHyCmw+HT3Dz4fAJbj6h+XKbD4dPcPPh8AluPhw+wc2Hwye4+XD45Dp8Hg6f4ObD4RPcfDh8gpsPh09w8wnNFzvb93D4BDcfDp/g5sPhE9x8OHyCmw+HT27zAxw+wc2Hwye4+XD4BDcfDp9chy8Qmi+3+XD4BDcfDp/g5sPhE9x8OHyCZ/tw+OQ2P8LhE9x8OHyCmw+HT3Dz4fAJbj6h+XKbD4dPcPPh8AluPhw+uQ5fhMMnuPlw+OQ2P8HhE9x8OHyCmw+HT+5sP8HhE9x8QvPlNh8On+Dmw+ET3Hw4fIKbD4dPcPPh8Ilt/nLiaL7c5sPhE+vwLW1D8+U2Hw6f4OYTmi+3+XD4BDcfDp/g2T4cPsHNh8MnuPlw+OQ2X8PhE9x8OHyCmw+HT3Dz4fAJbj6h+XKbD4dPrsOn4fAJbj4cPsHNh8MnuPlw+OQ238DhkzvbN3D4BDcfDp/g5sPhE9x8QvPlNh8On+Dmw+ET3Hw4fIKbD4dPcPPh8Ml1+CwcPsHNh8MnuPlw+AQ3Hw6f4OYTmi92tm/h8AluPhw+wc2Hwye4+XD4BDcfDp/c5hMcPsHNh8MnuPlw+AQ3Hw6fXIePCM2X23w4fIKbD4dPcPPh8AluPhw+wbN9OHxym+/g8AluPhw+wc2Hwye4+XD4BDef0Hy5zYfDJ7j5cPgENx8On1yHz8HhE9x8OHxym+/h8AluPhw+wc2Hwyd3tu/h8AluPqH5cpsPh09w8+HwCW4+HD7BzYfDJ7j5cPjkNj/A4RPcfDh8ch2+AIdPcPPh8AluPqH5cpsPh09w8+HwCZ7tw+ET3Hw4fIKbD4dPbvMjHD7BzYfDJ7j5cPgENx8On+DmE5ovt/lw+OQ6fBEOn+Dmw+ET3Hw4fIKbD4dPbvMTHD65s/0Eh09w8+HwCW4+HD7BzSc0X27z4fAJbj4cPsHNh8MnuPlw+AQ3Hw6fWIfPKjh8gpsPh09w8+HwCW4+HD7BzSc0X+ps3yo4fIKbD4dPcPPh8AluPhw+wc2Hwye3+RoOn+Dmw+ET3Hw4fIKbD4dPrsOnCc2X23w4fIKbD4dPcPPh8AluPhw+wbN9OHxym2/g8AluPhw+wc2Hwye4+XD4BDef0Hy5zYfDJ7j5cPgENx8On1yHz8DhE9x8OHxym2/h8AluPhw+wc2Hwyd3tm/h8AluPqH5cpsPh09w8+HwCW4+HD7BzYfDJ7j5cPjkNp/g8AluPhw+uQ4fweET3Hw4fIKbT2i+3ObD4RPcfDh8gmf7cPgENx8On+Dmw+GT23wHh09w8+HwCW4+HD7BzYfDJ7j5hObLbT4cPrkOn4PDJ7j5cPgENx8On+Dmw+GT23wPh0/ubN/D4RPcfDh8gpsPh09w8wnNl9t8OHyCmw+HT3Dz4fAJbj4cPsHNh8Mn1+ELcPgENx8On+Dmw+ET3Hw4fIKbT2i+2Nl+gMMnuPlw+AQ3Hw6f4ObD4RPcfDh8cpsf4fAJbj4cPsHNh8MnuPlw+OQ6fJHQfLnNh8MnuPlw+AQ3Hw6f4ObD4RM824fDJ7f5CQ6f4ObD4RPcfDh8gpsPh09w8wnNl9t8OHyCmw+HT3Dz4fDJdfgSHD7BzYfDJ7b5pODwCW4+HD7BzYfDJ3a2v1z10Xy5zSc0X27z4fAJbj4cPsHNh8MnuPlw+AQ3Hw6f3OZrOHyCmw+HT67Dp+HwCW4+HD7BzSc0X27z4fAJbj4cPsGzfTh8gpsPh09w8+HwyW2+gcMnuPlw+AQ3Hw6f4ObD4RPcfELz5TYfDp9ch8/A4RPcfDh8gpsPh09w8+HwyW2+hcMnd7Zv4fAJVj4cPsHNh8MnuPmE5sttPhw+wc2Hwyd4tg+HT7Dy4fAJbj4cPrnNJzh8gpsPh09w8+HwyZ3tExw+wc0nNF9u8+HwCW4+HL77Nn9p3Nr8sK1Ibj4cvks1Xy+GfC6I1wft907Fz6P9Emfb/gJX1OPmQGnzODgWuxjWg62LanvwJ7HgHoJYXYgFZxLE6kEsB9cTxOIQK4S1IjYkKhALjiqI1YVYcGtBLA6xos7EiiYeHKzNWhCr7cEvG0przsYZ/fzgxY5YU06FW1MHOxrsvi+7CewGu6dityPK7PbhZ+zGggLYfV92Y8UE7O7Pbuczu308mpmYteVmWdAr3CpinQeUnYyyJ06msdgEdt+X3VjxArtvy26PZTewey52n3ir6LH2B3bfl91YgAS752K3zwcbH83eCPFYVQRlL0ZZAmVB2WtRFut/oOxclA0xkyka//xgHdVaPB2NLfAbK4Dg9535jeVC8PvC/E5ufexRp0A/8ziwtggpQArvUsBCJKQAKbxJIWDVElK4shTSo43a/0wKWOKEFCCFdylgPRRS6C4FY/OLDMzRAv6h0xOwHgrKXoyyBMqCslNR9sw7Syydgt33ZTcWTsHu+7Iby6Zg92TsPtHdwEoo2H1fdmNxE+xmsTuujbFJHcwfGl83dfBSh4hFSFB2Msqe92BwxLoi2H1fdmOpEOy+L7uxqgh2z8XuEx97jwR2g923ZTcWIMHuudh99LhxxKoiKHsxymKpEJS9GGWx/gfKzkXZUx96j1gBBL9vzO+E5ULw+8L8PnGjXsLaIqQAKbxLAQuRkAKk8C4FrFpCCleWwnm7YRNBCpACpPAmBayHQgr9pfCiz+8kLJ2C3fdlN1ZZwe652H3iTq2EBVmw+77sxnIs2N2d3We+mcoprLCCshejLFZCQdm5KHveio5TWNwEu+/LbqxXgt33ZTeB3WD3XOw+bVXRKawqgt33ZTdWFa/F7qjVwybwX9j92VGspN2to1g9um5H3y4k+45ixeRmHdVYULhbR+G3362j8Jjv1lH4qnfrKKGjr+5o3tXpSNsvR3/2CI7Y/D2CrzN/j+DUzN8jeC/z9whuyvQ9MvBH5u8RHI/5ewQPY/4ewZWYv0eEHk3fI/gM8/cIPsP8PYLPMH+P4DPM3yP4DNP3yMJnmL9H8Bnm7xF8hvl7BJ9h/h4RejR9j+AzzN8j+Azz9wg+w/w9gs8wf4/gM0zfI4LPMH+P4DPM3yP4DPP3CD7D/D0i9Gj6HsFnOL9HMa2JmLT9MsWj6nAOzq96ovw9EKXsgTKScespJms3OvJ+7ZFQ58Co/PScUaSOemSDzfWwwW3eKaNKmZhFHGvexiQTvxz/WXmhfsAElT/lLl/n+hhtzLY+H1Fc7T41D5uaok/Poywnsx6dtu89SlQeG2IeG7ZfhdClo7Unux6+/O0eP25i+YRN/va5pgchTErFvvk8qpFWX47+rI8+oT5JmUd9nHteH/t4IZPe8MitT8A6c0pGfqV30io+z+jtSpFVlpzzJ7Db2VucBY0+i2Vcipngyib9NavlX//697/89a9/+T///Ne//du//Pdf/vYf//WGVm//r7Lv3PgsyOXvuH0TmS9lEEwuSyD/5eilKpWN0ycHcSOC+BFBwoggcUSQ4vUqelpBixDswehNMV+uKG4uV5ZK7+bTS0Z5+DbBxYMTsKTzG/e+vOzu4wTKW8OudAL66idgrn4C9uonQFc/AXf1E/BXP4Fw9ROI5RPIs8EYrD84gUj5WhkphIOjbf4wE5nNTUjxIqxT/i6T2dxqFQ8+uzAJhSkWhhQKUy6MRmHKhTEoTLkwFoUpF4ZQmHJhHApTLoxHYcqFCShMuTCY+VYKg5lvuTAOM99KYTDzrRQGM99KYTDzrRSGUJhyYTDzrRQGM99KYTDzrRQGM99KYTDzLRfGY+ZbKQxmvpXCYOZbKQxmvpXCEApTLgxmvpXCYOZbLkyYevB9fN3VmO2m5RGFmVpKQT+2HFo7tjBTS+mVhZn6JvKVhZn6JvKVhZn6JvKFhYlT30S+sjBT30S+sjBTz2NeWZipbyJfWRhCYcqFqTxEFJR+BAnuIEhQ69Q9uM3nLX3pcUMK6/M2lNKXY9/S8aPTsZkCbvNd+TWdMFc6ca500lTpJDVXOnqudMxc6dgz0vHpkU48SCd6sz5hGr3dDoT0nhDNlpCbLSE/PqH8vo0lIdolFGZLKM6WUJosIa3UdBnp6TIy02X0gtE6+JxRLGRE02XkpsvoBQO2o0dGbp9RmC6jOF1GabaMtJouIz1dRma6jMaP2SG/pSh+fTfGZ0Y0XUZuuozGj9lB+0dG4UtGJa8q5leChfQ42prP/MPF848Xz/8FL6CJKr+MzUQyB7VZjNF1rmm9DX/+Zkhqoy5/BvryZ2Aufwb28mdAlz8Dd/kz8Jc/g3D5M4iXP4MbPT5wbmXsjZ4fOLkyN3qA4OTK3OgJgpMrc6NHCE6uDKEylcrc6CGCkytzo6cITq7MjR6gPbkyN3qC9uTKYA5cqcyd3pt4cmUwB65VBnPgWmUwB65VhlCZSmUwB65VBnPgWmUwB65VBnPgWmUwB65U5k5vUDy5MpgD1yqDOXCtMpgD1ypDqEylMpgD1yqDOXCtMlPPZ9peJ3NuZeZ+y1nb48YnV+ZGT6ifXJmpr00vrcyN3s50cmVu9Hqmkytzo/cznVyZG72g6eTK3OgNTedWJtzoFU0nV+ZG72g6uTK1J+LyAyxLFJf2OMvEERPnmDjPxAUmLjJxiYeLionTTByTL5HJl8jkS5p6NmrVeqyxmsYqPk09G31pZaaejb60MlPPRl9amalnoy+sjFFTz0ZfWpmpZ6Mvrczcrz5PJldGucGVmdqRfWllCJWpVGbqOfBLKzP1HPillZl6DvzSykw9B35pZeZeYX5hZfTUc+CXVmbqOfBLK4OZXq0yN3IhTn09vNE3ciHOrYy5kQtxcmVu5EKcXJmpXYiXVmbqa9NLK0OoTKUyN3IhTq7MjVyIkytzIxfi5MrcyIU4uTI3ciHOrczc7297aWVu5EKcXJkbrcSdXJkb+TMnV4ZQmUplMNOrVKb8tL0za/bOhG1Cb5DyY+jPIbodYtohth1C7RDXDvHtkNAOie2Q9u779u77cvfzM5n+6yOZ7xDTDrHtEGqHuHaIb4eEdkhsh6RmSPkRh+eQ9u6H9u6H9u6XtzY/eRrgHVTeB+/zyon2Ue9AngMKHFDkgBIDVPmOaMgf29IhuR1Ic0CGA7IcEHFAjgPyHFDggCIHlNpBVikOSHNAhgOyHBBxQI4D8hxQmRFJrxNKncweFDmgxABVPol2ACqWfGGXWuexajOWh0+Q44A8BxTKIHqAvNqBIgeUyiCbJ/RqcxvyCSqvtx6BiiU/7XPltrwEcdpXkm3ZyD/x90Pn34+dfz/1/f2ywXni7+vOv1+8njR9nizlG6CYvnwa1nxEsN0jUPcIrnsE//MIecfTEsF9iVAYtTyt36sj7x9D/dtYXDg45CFu46N8MihcNvN42czTVTMvv8z8Epnr0ZknlTNPcZv5ezpmrnTsXOnQ4HSCydTZWidrOm54OtmDD2R26fi50vnxFWTJZmVDUtHvrq4Uu0dIvSM49fMIPuUI23uVNYLuHsGcEGG93UpaxX0E2z0CdY/w49EiaetyBO/2EXz3COGECJQjBLuP8HNNG5XPwdjCOaQTIuRzMF8+3fwRwavuEfQJEWyO4Pbjkv+5ppf1iDXCdo9ojmC7R6ATIuQqWWP2EX6u6ce6erKF64P33SOEEyJkxdm070NlbUDldSm9DJ1//uaaVtYGDkBlJ1jbvPCjnd6BUjuIKmsDByDNARkOqLw2sIzpGRTjDkQcULnklD3n5c99eokBqpjvByDNAZVL7h4bVZxTO5DlgIgDchyQ54ACBxQ5oMQAldcGjkCaA+IwwlQYEfJqkUtmByIOyHFAngMKHFDkgBIDZBUHVG6ufazqLYb9DmQ5IOKAHAfkOaDAAUUOKDFAZZfxCKQ5IA4jiMMIqjCC8nPO1u8GFnIckOeAAgcUOaDEADnFAWkOyDDmEWXb4ghEHJBjgMr3RyGvrAeyO0iRD4lWiifndpDYDknNkPI+vucQ3X6HQZXX2x6ALAdEHJDjgDwHFDigyAElBqjyGtsDEIcRkcOIyGFE5DAichgROYwob9V8OpyUN2qmjfm1g6R2oZe3Tj6PQu0Q1w7x7ZD2ATi1D8CpeQB2SrVDdDvEtENsO6TcfZdXQYLZQVw7xLdDQjsktkNSM6TszTyHHHW/AGnvvm7vftmTeQ5x7RDfDgntkNgOade+ade+ade+ae++ae++ae++ae++aez+8g/9dmAZ5+PDrN8sUnwsxJcdm+eQ2A5JzZCyV/McotshRdaEtBp3Ue0hth1C7RDXDik/9RnW04/R7iChHRLbIakZUjZzNnMfvYfodohph9h2SHnMyDPfRHEHce0Q3w4J7ZB4ANmMTCskNUPKxs1zSLn7MW+viWkHMe0Q2w6hdkjtpsw/7q++FmC/6urVut3Eb3aAG/URwPcOEHoHiL0DpM4BvOodQPcOYHoHsL0DUO8AvZXseyvZ91ay761k31vJobeSQ28lh95KDmewiPLD7dsdLR8B4hk98Ov9ld/al58BUuczSGecQVj34vjodgF07wCmdwDbO8AZ14Ogc4CdDpLrHcD3DhB6B4i9A6TOAbRS3SPozsOdVqZ7BNs9AnWP4LpH8N0jhO4RYvcIqXcErbpH6K5p3V3Tuq+ml3+ZtyPLazBROZXd0fD1Wc7lH7aOXBLUOcEvD4UU8ts8h6+3e/7fC+D6/rz/+c/njeGB0u8/H074+bV5wdvffz72/fn085+PeTdCCr/9vFF9f17/+Ofj420D9DtzjDnh59eZc/zyRND7z9uf/3zehBv3xaETfz79JqvlH/RkaFhmQmuQr8/tPVGMpsczEd5/TwbPMakdUyHsc4xmYAwDYxkYasdUVp6eXyjc26HlpSGn19HTbdcSl+WIP2pLQ88h1A5x7RDfCFn+5d+OLNPB53WYuHl9q3amzobnENsOoXaIa4f4dkh5QXXzKt24g8R2SGqGVF7K/hSi2yGmHWLbIdQOce0Q3w4pdz9vQIjbx+Nd8T3K+Wk6Gx6PSlqKT5beT/v51PXny0v65/287vvzpu/P274/T31/3p3485vNIOvP+74/H/r+fHnLhHk8dh1+H0cqWyaeQSpbJp5CdDvEtENsO4TaIa4ZUl46fQ4J7ZBi902etBoffidMecHyKaS8BPkcotshph1i2yHUDil234T1kS2TdqosP9XyHBLaIbEdkpoh5cXP5xDdCFn+Fd7vkss7OU1e/N3eg33cfpRvRJ9DdDvEtENsO4QaIcu/4nvdytqJMT4q/nis8O1O9g2a3u/CyjfLxtOKXf6O2xdrFD+7EczjRe/kvxxdPbGzg7gRQfyIIGFEkDgiSOU7ZpTvc/xmLCh//YWiWo+muHkRjiVXOPrkb7rUPjd2nRPQVz8Bc/UTsFc/Abr6Cbirn4C/+gmEq5/A1J8q1fmNacZ8/TZP/8JM/aXSFxaGpv5Q6SsLM/V3Sl9ZmKk/U/rKwkz9ldJXFoZQmHJhHApTLszUH299ZWECClMuDGa+lcJg5lsujMPMt1IYzHwrhcHMt1IYzHwrhSEUplwYzHwrhcHMt1IYzHwrhcHMt1IYzHzLhfGY+VYKg5lvpTCY+VYKg5lvpTCEwpQLg5lvpTCY+ZYLE6YefI19FIbc2MJMLaWgH1sOrR1bmKml9MrCTH0T+crCTH0T+crCTH0T+cLCxKlvIl9ZmKlvIl9ZmKnnMa8szNQ3ka8sDKEw5cJUHiIKSj+CBHcQZPOaJbd5aLP4BWMK6/M2tH0UeDn2LR0/Oh2bKeA2b1pd0wlzpRPnSidNlU7lna8vS0fPlY6ZKx17RjotX06P/vHKLW+3AyG9J0SzJeRmS8iPTyjkl7B9fTTzI6EwW0JxtoTS8ISCjXlK9eX52PeEam/zfWVGerqMzPiM8jtFl4zCl4xK89WYXx+xffeiNZ/524vnTxfP/wWPf0aVv+hsvr4w05dvjtZ7GOu3r3n5uCmpvKf5UmcQLn8G8fJnkK5+Blpd/gz05c/AXP4M7OXPgC5/BjfarHFyZW60W+Pkytxoo/LJlbnRTuWTK3OjrcrnVsbcaK/yyZW50Wblkytzo93KJ1fmRtuVT64MoTKVymAOXKsM5sC1ymAOXKsM5sC1ymAOXKmMxRy4VhnMgWuVwRy4VhnMgWuVIVSmUhnMgWuVwRy4VhnMgWuVwRy4VhnMgSuVudN7ik+uDObAtcpgDlyrzNTzmbZHyk+uzI0ehD25Mjd6Evbcysz9JtGXVuZGz8KeXJkbPQx7cmVu9DTsyZUhVKZSmRu9CebkytzoVTAnV+ZG74I5uTK1B+LyAyxLFJf2uMTDecXEaSbOMHGWiSMmzjFxnokLTByTL57Jl8Dky9xvZrFqPdZYTWMVP/erWV5amalnoy+tzNSz0ZdWZurZ6EsrM/Vs9KWVmXo2+tLKTO3ImmRyZdRgrzpO7ci+sjJpakf2pZWZeg780srM/ZrlV1Zm6jnwSytDqEylMnOvML+yMlPPgV9amannwC+tDGZ65coYNfUI3HbfdOorYo26kQtxcmVu5EKcXJkbuRAnV2ZqF+KllZn62vTKyuipXYiXVuZGLsTJlbmRC3FyZW7kQpxcGUJlKpW5kQtxcmVu5EKcXJkbuRAnV+ZGK3EnV+ZG/sy5lZn7/W0vrQxmepXKlJ+2d2bN3pmwTegd4tshoR0S2yGpGVJ+1PU5RLdDTDvEtkOoHdLefWrvPpW7n5/J9F8fyXyHxHZIaoaUHyZ7DtHtENMOse0Qaoe4dohvh7R337V337V3v7y1+cnTAO+g8j54n1dOtI96BzIckOWAiANyHFB543vIX9vRIbkdKHBAkQNKDFD5O6tHIM0BGQ7IckDEATkOiMOIyGFE5DAichiROIxIHEYkDiMq34hLep1Q6mT2IOKAHAfk20G2/P2r076factfszrts322/G2qE3/fdv596vz7rvPv+86/Hzr/fnFwa/pWVsqz8Zjs9pN35iNC6h2hvBp3agTdPYL5eYS8/WaJ4L5EKIxantaPp5H3j9mqV8WDQx7iNjf1Hwwqr95cInO6bObuspn7y2YeRmeeVM48xW3m7+nEudJJU6Vj1OB0gsnU2d7Hr+no4elkQziQ2aVj5krnx1eQJZuVDUlFv7u6GuoewXWP4H8ewaccYXuvskYI3SPEEyKst1tJq7iPkHpHsKp7hB+PFklblyN4t49gukewJ0SgHCHYfYSfa9qofA7GFs7BnRAhn4P58h3hzwi+e4RwQgSbI7j9uGR/runFNlwjbDcs5gipdwRSJ0TIVbLG7CP8XNOPRd5kC9cHMt0j2BMiZMXZtO9DZelC5UUSvQydf/5m4VWWLg5AxdFDa5tXIbTTO5DjgDwHFDigyAGVjeplTM+guKteZeniAFQuOal12rP8uUuvsjZwAPIcUOCAyiV3j10TzqkdKDFAlbWBA5DmgAwHZDkg4oAcB+Q5oMABcRiRKowIeenCpd9XlEkpDkhzQIYDshwQcUCOA/IcULm59rHEtEzed6DEAJU97SOQ5oAMB2Q5IOKAHAfkOaDAAXEYoTmMMBVGUH7o1nq1A2kOyHBAlgMiDshxQJ4DChxQbJ9HUNm2OACVnYgjkGaAyvdHwa4z7EB2BynyIdFK8eTcDkLtENcO8e2Q0H6HQeVNhUegxACVNxYegTQHZDggywERB+Q4IM8BcRjhOIxwHEZ4DiM8hxGew4jya3OfDiflN+amjfm1h7QLvfze2qdRyvs6n0N0O8S0Q9oH4NA+AIf2ATi096VshzyHxHZIaoaUjZDk8ipI2N1DlHdwPoeYdohth1A7xLVDfDvkqPsFSHv3Y3v3y57Mc4huh5h2SLv2U7v2U7v2U7v2U7v2U3v3U3P3nVLtEN0Oaez+8o837+Af/5Qqz3TSakRFnx43L5qo9PzXciF/WLpK+y/HL+nVXl91ahCt1JAoekgUc0oUpx9RnNlHsUOi0JAobkgUPyRKGBIlDomSRkTRakgUPSTKEO3rIdrXQ7Svh2hfn6P9tImSClHCkChxSJQ0IopRQ6LoIVHMkCh2SBQaEsUNiTJE+2aI9s0Q7Zsh2renaH9ZU8tRtC1E0UOimCFR7JAoNCSKGxLFD4kShkSJQ6KkEVFoiPZpiPZpiPZpiPbpHO3np6ze/o77KG5IFD8kShgSJQ6JkkZEcWpIFD0kihkSxQ6JMkT7boj23RDtuyHad0O0707RvlExRzEq7aJ4NSSKHhLFDIlih0ShIVHckCh+SJQwJEocEmWI9sMQ7Ych2g9DtB/PUaU1jyjk9lFOYXKkR5S42d2Vo8QhUdKIKEkNiaKHRDFDotghUWhIFDckih8SZYj20xDtpxHaN0oNiXKO9qN6RNm8cjNHMUOi2CFRaEgUNySKHxIlDIkSh0RJI6Kcs1PlMMoQ7esh2tdDtK+HaP+cnSpJP+b8Sad9FD8kShgSJQ6JkkZEOWenymEUPSSKGRLFDolCQ6IM0b4Zon0zRPtmiPbP2amSNrsH0373oDlnp8phFD0kihkSxQ6JQkOiuCFR/JAoYUiUOCTKEO3TEO3TEO3TEO2fs7sjBXpEiW4f5QyOLSN7forZfHmp2xoljYhyyo6I4yh6SBQzJIodEoWGRHFDovghUcKQKM3a/6P6SacjVPuOhXeUZqEMC2VZKGKhHAvlWajAQrG44VncCCxuBBY3AosbgcWNwOJGYHEjsLgRWNwILG4EFjciixuRxY3I4kZkcSOyuBFZ3IgsbkQWNyKLG5HFjcTiRmJxI7G4kVjcSCxuJBY3EosbicWNxOJG4nDDKsVCaRbKsFCWhSIWyrFQnoUKLFRkoVjc0CxuaBY3KuuDwawvv4jBpj3KslDEQjkWyrNQgYWKLFTioCrrU0cozUKxuGFY3DAsbhgWNwyLG4bFDcPihmFxw7K4YVncsCxuWBY3LIsblsUNy+KGZXHDsrhhWdwgFjeIxQ1icaPy5GPU63aN5U+9RxEL5Vgoz0IFFiqyUImDqvjSRyjNQhkWisUNx+KGY3HDsbhR8VFTNkaTDV93je59VHpsMqUY9zO8iot6bozUP0bFoT03hh4QwwyIYX8ew1H+MqCj7Ydu/cenLirO8rkx3IAYfkCMMCBGPCOGW+8WXTTpS4z90d6vJPTbV0Orj49B+jRXPkFNlo8enQ/p/L2DBed3DApmuozsdBnRdBm56TLy02UUpssoTpdRmi2jqKbLaLoxO043Zsfpxuw43Zgdpxuz43RjdpxuzI6dx+w/qp+UPDdGUgNinDFSxrwF1cXN97lyDDMghh0Qg86OEfYx3IAYfkCMM0aFZHKMZAv9iANipO4xKt/gbI1BKccIfh/jhH54nzeBe5/iPkb5KyA2P8iZyMU/f+SYVb7teW6M8lr7yTHsgBg0IIYbEMMPiNGZV/ujl6X0z4OXBcZ87GIJv+dT3j/wwnz0ZPmYyfKxk+VDk+XjJsvHT5ZPmCyfOFk+k43PdrLx2U42PtvJxmc72fhsJxuf7WTjs51sfLaTjc92svHZTjY+02TjM002PtNk4zNNNj7TZOMzTTY+02TjM002PtNk4zNNNj67ycZnN9n47MaPz2l9txNt3uyU87GT5UOT5eMmy8dPlk+YLJ/h4zOl9aedDl/yKRzr88G0XWnx6iP5dOHkvbpy8nrq5IPJGyOCtbvkzeTJ+5w8mV3y9srJD79aLUd/O/kQ8rpuCDHtkndXTt5fOPkwXrA2DyC0n5SG4Uzw+QOJ2635OZ/x18H8qAAFtcsnqsny0ZPlYybLx06WD02Wj5ssHz9ZPmGyfOJk+Uw2PqfJxuc02ficJhuf02Tjc5psfE6Tjc9psvE5TTY+p8nG5zTX+OzUXOOzU3ONz07NNT47Ndf47NRc47NTc43PTs01Pjs11/js1Fzjs1OTjc96svFZTzY+68nGZz3Z+KwnG5/1ZOOznmx81pONz3qy8VlPNj6bycZnM9n4bCYbn81k47OZbHw2k43PZrLx2Uw2PpvJxmcz2fhsJxuf7WTjs51sfLaTjc92svHZTjY+28nGZzvZ+GwnG5/tZOMzTTY+02TjM002PtNLx+e4z4cmy2f8+Ny01ZbWzV3k/Zc9k6WD88a0tHlPTfo4Ty/kPIOQ85x8c/5p5zn5Pv6zznP8w15tm3DzK/JC2LzK7GMTrhv/ZNiZyZsrJ28nT97k5MORPOJDS9Ftnsz4ONHJN6m3nGhSNg8E2v12oj5MfaLRrHmEuHlz/ycdfbxy8unCyYe5rx9Rp0fy6ScDQZh7xGs60acDwQt2ujedaMgjXlL0/ETt40FTS+b3E00TzR7e83nhLfyyfrvPZ/gt6nKXvubj0z6f4ZdiF9fPrS3B9/mEyfKJk+WTpsrHj9/CepCPniwfM1k+drJ8aLJ83GT5zDU+ezXX+OzVXOOzV5ONz3qy8VlPNj7rycZnPdn4rCcbn/Vk47OebHzWk43PerLxWU82PpvJxmcz2fhsJhufzWTjs5lsfDaTjc9msvHZTDY+m8nGZzPZ+GwnG5/tZOOznWx8tpONz3ay8dlONj7bycZnO9n4bCcbn+1k4zNNNj7TZOMzTTY+02TjM002PtNk4zNNNj7TZOMzTTY+02Tjs5tsfHaTjc9usvHZTTY+u8nGZzfZ+OwmG5/dZOOzm2x8dpONz36y8dlPNj77ycZnP9n47Ccbn/1k47OfbHz2k43PfrLx2U82PofJxucw2fgcJhufw2Tjc5hsfA6Tjc9hsvE5TDY+h8nG5zDZ+BwnG5/jZONznGx8jpONz3Gy8TlONj7HycbnONn4HCcbn+Nk43OabHxOk43PabLxefwnMJYl9s+Df//kVuGXz3pFhB//aY0XnacTcp5eyHkGIecZ5z7PZ19t9eMfEj0v+TD+idKm5J9+cjaMf/y0MfknX20N459VrX/usjBvMCk/WG+V3yVvp07emjzrsdbtkqcrJz/RV1JLyedh3tmwT95PnrzPyUfaJR+mTp5Ups32k/Rr8vEyyZuwSz7NnTxl2pDbJa/VlZPXcycfbU4+7aYHeu4r7EHyc19hD5Kf6Ar7ns9cnxYPeqJLyVs+5ediY1LrG7mSDfYggkv5RsMrtTna+48Y9ucxvAk5hlV6H4MGxHADYvgBMcKAGHFAjNQ/hlUDYugzYlB4GsMMiGEHxKABMc7QuTXZL7AU9jH8gBhhQIw4IEbqH4PUgBh6QIwzdG6zA+RJFWLYATFoQAw3IMYpOs9LeUuMuI8RBsSIA2Kk/jGcGhBDD4hhBsSwJ8fYvK43x6ABMdyAGGfonMJjLIn7scSFATHigBipfwx/hs6J4iPGV30U7oJ19kXMw4Q16sMX8XqyfMxk+djJ8qEX5kNqn4+bLB8/WT5hsnzi6Hx8yD5f9Pt80lz5BDVZPnqyfMxk+djJ8qHJ8nHj88kT0uj2+fjJ8gmT5RMny2ey8TlONj7HycbnONn4HCcbn+Nk43N0k+Uz2fgcJxuf42Tjc0xz5ZMmG5/TZONzmmx8TpONz2my8TlNNj4nP1k+Z4zP7hHCbWKsnmk6Y8z1Yf0Mmt8+dJBjpO4xolIDYugBMcyAGHZADBoQww2I4QfECANixAExBuhcD9C5HqBzPUDneoDO9QCd6wE61wN0rgfoXA/QuR6gczNA52aAzs0AnZsBOjcDdG4G6NwM0LkZoHMzQOdmgM7tAJ3bATq3A3RuB+jcDtC5HaBzO0DndoDO7QCd2wE6pwE6pwE6pwE6pwE6pwE6pwE6pwE6pwE6pwE6pwE6dwN07gbo3A3QuRugczdA526Azt0AnbsBOncDdO4G6NwP0LkfoHM/QOd+gM79AJ37ATr3A3TuB+jcD9C5H6DzMEDnYYDOwwCdhwE6DwN0HgboPAzQeRig8zBA52GAzuMAnccBOo8DdB4H6DwO0HkcoPM4QOdxgM7jAJ3HATpPA3SeBug8DdB5GqDzNEDnaYAGK3u8PK0PzC2z1aO3Vmmj1PqSluVv7Q+Ot8atb7OzJjxeuRreMkqVHWGvzEi/ICOb36lrLblNRvtjSefsSQf3e/bm0tnbS2dPl87eXTp7f+nsw6Wzj5fOPl05e60unf2lr7X60tdafelrrb70tVZf+lqrL32t1Ze+1upLX2v1pa+15tLXWnPpa6259LXWXPpaay59rTWXvtaaS19rzaWvtebS11pz6WutvfS11l76Wmsvfa21l77W2ktfa+2lr7X20tdae+lrrb30tdZe+lpLl77W0inXWpuX2Ze/jfly/HuUc8Zlax41ejvm9yjnjJ9eP6KEtI/ih0QJQ6LEIVHSiChODYmih0QxQ6LYIVFoSJQh2ndDtO+GaN+don2dD1/+9nofJY2I4tWQKHpIFDMkih0ShYZEcUOi+CFRwpAoQ7Tvh2g/DNF+OEX7xvgcxRRmsMEMiWKHRKEhUdyQKH5IlDAkShwSJY2IEtWQKEO0H4doPw7RfjxF+0euQnRDovghUcKQKHFIlDQiSlJDogzxx5IZEsUOiTJE+2mI9k954kcbn6Noc/hd+6fP12h1yiM/J6ekX5DSWQ74kr65dvr22unTtdN3107fXzv9cO3047XTT5dOX6trp3/tq66+9lVXX/uqe8oDQC9M/9pXXX3tq66+9lVXX/uqq6991TXXvuqaa191zbWvuubaV91THgV6YfrXvuqaa191zbWvuubaV11z7auuvfZV1177qmuvfdW1177qnvJQ0AvTv/ZV1177qmuvfdW1177q2mtfdenaV1269lWXrn3VpWtfdU955OuF6V/7qkvXvurSta+6dO2rrjtn3E95j6i2+uvxH2HMmDCnjKPWq0eYaAthThnvHk1c/nahEMaNCePHhAljwsQxYdKQMKc87PaNMHpMGDMmjB0TZswo4MeMAn7MKHDKM2+aTH6CS5MrjNCnPPT2jTBpSJhTHnv7Rhg9JowZE8aOCUNjwrgxYfyYMGNGgTBmFAhjRoFTHoDTzjwmt84V5tCnPAH3jTBmTBg7JgyNCePGhPFjwoQxYeKYMGlImDRmFEhjRoE0ZhQ45Wk47fVjcrtAC2FoTBg3JowfEyaMCRPHhEkjwuhzngw8DqPHhDFjwtgxYWhMGDcmzDmjQMovqNJh//DtEiaMCRPHhElDwpzzVNNxGD0mjBkTxo4JQ2PCuDFhxowCeswocM5TISG4R5ikC2HSkDDnPGVxHEaPCWPGhKEhYcr7Ed8eq8ormUqnx6rs++dn/3xDvh1e9kiWFd3107XLiu4m6NtnbHdHG59XM43frCy/r/+W3ZEzA1DvAK53AN87QOgdIPYOkDoHKHseZwbQvQP0VnLqreTUW8mpt5JTbyWn3kpOvZWceiu5YlycGkF3j2C6R7DdI1D3CK57BN89QugeIXaP0F3TurumdXdN62ZNf8zvWShioRwL5VmowEJFFipxUEaxUGUeGVqZQWa7aYnBo/Lt66kRbPcI1D2C6x7Bd48QukeI3SOk3hHKDyOfGqG7pm13TdvumrbdNW2bNf2O8ixUYKEiC5U4KFIslGahDAtlOShX6Vf2M5c/C6hyDW1cjXoiHXeo8ub3Q5RmoQwLVVFVXoBY/kx7lGOhPAsVWKjIQiUOKigWSrNQhoWyLBSLG4HFjcDiRmBxI7C4EVjciCxuRBY3IosbkcWNyOJGZHEjsrgRWdyILG5EFjcSixuJxY3E4kZicSOxuJFY3EgsbiQWNxKLG4nDDaMUC6VZKMNCWRaKWCjHQnkWKrBQkYVicUOzuKFZ3NAsbmgWNzSLG5rFDc3ihmZxQ7O4oVncMCxuGBY3DIsbhsUNw+KGYXHDsLhhWNyouEvWZBfY2q93bXtXwye1fmraJ/3bCxJMxV06M4I5IULUOUI06fcItnsE6h7BnRHB2xwh7vrgu0cI3SPE7hFS7wikukfQ3SOY7hFs9wjUPUJ3TVN3TVN3TVN3TVN3TbvumnbdNe26a9p117TrrmnXXdOuu6Zdd0277pp23TXtu2vad9e0765p313TvrumfXdN++6a9t017btr2nfXdOiu6dBd06G7pkN3TYfumg7dNR26azp013TorunQXdOxu6Zjd03H7pqO3TUdu2s6dtd07K7p2F3TsbumY3dNp+6aTt01nbprOnXXdOqu6dRd06m7plN3Tafumk69NW2V6h5Bd49gukew3SNQ9wiuewTfPULoHiF2j9Bd07q7pnV3TevumtbdNa27a1p317TurmndXdO6u6b1GZp+tl/DGtU9gu4ewXSPYLtHoO4RKpquPxPyq+no9xh+QIzw8xhPd+fYypOKZ0ZIvSNYdUaEZ2OT1d0jmO4RbPcI1D2C6x7Bd48QukeI3SOk3hGou6bpDE0/vQqR6R7Bdo9A3SO47hF89wjNint/VaB5O7g2V8mTobh9yaD5WE9uh4R2SGyHpGZI7eL9DFJUrstfy3N+DzHtENsOoXZIsfsurI9yu5B2EN8OCe2Q2A4pdt+ltZVe2d8h5WH+OUS3Q0w7xB5AtN5BqB3i2iHF7vug85VO7SChHRLbIakZUt5c6qPLIy3tILodYtohth1S7H5Q69dBw/YC8Alx7RDfDgntkHgAMX4HSc2Q8jbE55Bi90Na+xLVri/ljYLPIbYdQu2Q8vu/8+nHfV8qX/p7CgntkNgOKb8v2+ZXMpP5HVL5Mt5TiG6HmHaIPYC43ThW+ZLcU4hrhxS7n/JnINJeL+V9Vs8hsR2SmiHlrU3JrheLRLsLX3mv0nOIaYfYdkix+ynP+pLfn75rh/h2SGiHxANI2I1j5T0zTyHlTTDPIcXua+Xy96OU3ymmvFHlCGQ5IGoG/fn2hqq3g8uLNz5/MTtsPynodclG9uuE0Rn15dg/3l7S0ffnU9efL6/ZnPfzuu/Pm74/b3/688487k3DwbFaqQeb1ePuz7iPR7pppmTcTMn4mZIJY5PRlJMxdpdMnCmZNFEyVs2UjB6bjI05GQq7ZMxMydiZkqGZknEvS8a5XTJ+pmTCTMkMHoFDysnEuEsmTZQMqZmS0dMk83bfQu/3LUWFGxfW+37j7fYG8/P7WO4dW14aDY9Vn22On1H926FljhgV1uU5Y7T6GrXWy6egt4Dh7eDy/vEUH6pSD0vAxI+bovKW8COQ5oAMB2Q5IOKAHAfkOaDAAUUOiMMIzWGE5jBCcxihOYzQHEZoDiM0hxFlY2VxvR4g2oMiB5QYoLK1cQTSHJDhgGwr6M8Ps+kfVctJre1a/tysHi9D7x91I+kpqGYPPQdpDshwQJYDIg7IcUCeAwocEIcRhsMIy2GE5TDCchhhOYywHEZYDiNqN0p5XWr50+1AgQOKHFBigKoT+QfI0w6kOSDDAVkOiDggxwF5DihwQJEDSgyQ4zDCcRjhOIxwHEY4DiMchxGOwwhfSS+GDNrcaK6g8tYVHTZ7V8IOlBiRQmUvSt70GdR2K9YnqLxPRNmc3tYXW0HEATkOyHNAgQOKHFA6BLmv16fC6tjiNqyOgQkbCySVHBBS2QIhQ9uD/6jtSHhdOnqudMxc6di50qG50nFzpePnSie0pvNHbV/MESgxQElxQJXRIj9/sPxpdiDLAREH5DggzwFVZgz546JB+331IgeUGKCKL3yI0iyUYaEsC1WmhSabUU7vUY6F8ixUYKEiC5U4KK1YKM1CGRbKslAsbmgWNzSLG5pzn1Fxio9QlUcnn698pbdDyxNmr/LC3vLnZhk+1Ge1BxjNwBgGxjIwxMA4BsYzMIGBiQwMgweJwYPE4EFi8CAxeJAYPEgMHiQGD8pzEK8pP0CqN/7IJyYyMKkdU5mAHIE0B2QOQZtHCFdQpXYpe0tG/17vyoXTU8ggSnuQ5oAMB2QZoMrCVsjf+PXBmx1Ic0CGA7IcEHFAZdWGx3OFIdkdyHNAgQOKHFA6BsXfQZWVo2geD1janQgrK0cHIMcBeQ4ocEDl6sX8ifPlz93AUlkwOQCV54UmW8lh+2mzT1BtcUHlh3qTcjuQ5oAMB1S563eP22q/I2zt4dbnIMcBeQ4ocECRA0oMUO1B1+egSp+MyiCzGyPKD4gGYzbP1O4uNZVVlgNQZEijvDRzAKoszRyANAdkOCDLAREH5DggzwFxxr3AYUTgMCJyGBG/Me7tWB6JA3IckOeAao/2PxwIvbt8por1Y8PDIlE7kOWAiANyHFDF9rFF22cFBQ4ockCpHWRqVvFzkOaADAdU6VN8cC+pHej4+kRpBwocUOSAEgNUsW0PQJoDMhyQ5YAq1ydn6lOCygepn88jKt+jPgIFDihyQIkBMooBKm+QWe5b1PoOkeXv3Whe+cLXMSyWYc7mZ0dpWUbdwRILVp7CHcM0D2Z4MMuDEQ/meDDPg4UKLN9ov8F2Y3yIPFhiwaLiwTQPZtphf35sOP9H5T1Ei3tpH7vjg/tddd6wUJaFIhbKsVCehQosVGShEgdVGba8ybsCl7/N7w5LZdQ6QhkWyrJQVEHlly4uf9MO5ViocuW9pZBRNvw+YFWGAm/T47xI/T5tqYwERyjDQlkWqlJ5ovRA+d/HquhYKM9CBRYqslCJg0qKhapwg/Ku5eXvsFtiMyyUZaFq3Njoi8IXfRWe3F0UmIMYCvbgcPeY0i9/71ZfkpswJz9hTmHCnOKEOaX5cqosib86KT1jUmbGpOxLkso7yt6S2q3eqJMGc3KPpOLOV1RuSBQ/JEoYEiUOiZJGRNFqSBQ9JEptZNGbSZ3dwywPRjyY48E8DxZ4sMiDJRbMKB5M82A8lhgeS0yFJe7xfj2/fSnjCnM8mOfBAg8WWTBbabdXj8HAm906pdU8WKUk/mF2ek+7CYGtUDnEx+1X2C8Qk+LBNA9meDDLgxEP5ngwz4MFHqxC5Zjf2bz8TbsZGqUa7EGu6Pzz69qJj6VV9o29MiE9W0JmtoTsbAnRbAm52RLysyUUJkvI10gdHo59DN/ceqh90nmJxaf9MFxZz/FJPUbvpPwOlliw2orOEUzzYIYHszwY8WCOB/M8WIXtyWxZspvShciDJRastvp0BKuxxD9uM1LcbciurT8dwSwPRjyY48E8DxZ4sDJLgsqfrln+1ruRq7IMdQSrrEMdwjQPVmNJ2sJ2k+PaUtQRjHgwx4N5HizwYJEHq7HkYQQH5X4fFCq7OI9hmgczPJitwOwWZncw4sEcD+Z5sMCDRR4ssWC6xpLHnCuo6HcwzYMZHszyYDWW+C3sm7tJj2GeBws8WOTBEgtmFA9Wm5eQf8C+Pm9YcPBtSo+NcUrtthjWvNm2KKS0fUQxu43JNSv35Cg0JIobEsUPiRKGRIlDoqQRUWpWemsUax5R9rtcrT7/XApRzJAodkgUGhLlJO3ntzItf+92URrrh0QJQ6LEIVHSiCikhkTRQ6KYIVFO0n7YqDLu7oOIzj+XQhQ3JIofEiUMiXKS9tPjmSitd2MypRFRnBoSRQ+JYoZEsUOi0JAobkiUc7SvHx8FJG12poUL559LIUocEiWNiOLVkCiasxJnvOHBLA9GPJjjwTwPFniwyIMlFqy6pnkA47Ek8FgSeCwJrB1gtcddvX/s8fbLP3awyIMlFqy2yngE0zyY4cEsD0Y8mOPBPA/GY0nksSSyWGIr6xAHz/fbyjrEEUyzHp232vJgxIM5HszzYIEHizwY6wUL1igejPXovDWGB7M8GPFgjgfz7bA/f71/Uu4f/1R5bYrPLxkMQW8+T+V9YXoXl1W9z6Pjl61cH18yrbxk5dQQvn+I0D9E7B8idQ9ReZVMY4j8RvJojTo42qj1emQ2X+9dJgIfK5dzpWPmSsfOlQ7NlY6bKx0/VzphrnTiXOmkqdKxx6OyCQcBKK3f4XTbN5p/BtC9A5jeAWzvANQ7gOsdwPcOEHoHiL0DpM4BqLeS6Qwlm3WPh9vuI1kCFEY5ym8ZjBS26ZjC0dat9httH/YsDog6rasBxmizPfiP2pdv73eaVsZpkozTdDJO08s4zSDjNKOM00wiTtMpGacpYxbkZMyCnIxZkJMxC3IyZkFOxizIyZgFORmzICdjFuRlzIK8jFmQlzEL8jJmQV7GLMjLmAV5GbMgL2MW5GXMgryMWVC4zQXl8UkQ8+WLIB+neZshKOT3x5pg7e+neZsh6Plp3mYIen6atxmCnp5mvM2N2PPTvM2N2PPTvM2N2PPTvM118/lpkozTvM2N2PPTvM0Fxea3yRq7faLo/TTTbS4oz0/zNheU56d5mwvK89O8zQXl+Wne5oLy/DRvc0F5fpq3ua02+ROayxn/7h6k29xWPz/N29xWPz/N28yCnp5m5RODNzzP28yDDs7zNhOhg/O8jyX9/DxJyHneZi50cJ4yZgmVbwS6/J0KtznLFRLbIakZUn5u/TlEt0NMO8S2Q6gd4tohvh3S3n3T3v3ys7cur2T63UJm5TOBzyG6HWLaIbYdQu0Q1w7x7ZDQDontkPbuU3v3qb375b32z03X6gfb/OMdTNtv036CiANyHJDngAIHVPlwQXi8iDDtrjaVlyQ+B1XeeXgA0hyQ4YAsB0QckOOAPAcUOCAOIzyHEYHDiMBhROAwInAYETiMqHx6Len8Sv9k9iDPAQUOKDJAlVf4qcenlpWPO5DngMrnpB9f2tFuN+5VXt53AEoMUOXzYAcgzQGVWb4MOBkUd9WrfBjsAFR5F97jo9Gk9ulFDii1g2rf2joAlUvuTC65c2oHMhyQ5YCIA3IckOeAAgcUOaDEAFW+q3UA4jCi8uZMF/Jg6ZLZgSwHRByQ44A8BxQ4oMgBJQao8spL+7ioWbsbIyovvDwAWQ6IOCDHAXkOKHBAkQNKDFDlm0oHIA4jLIcRlQ8YWcqfb7N+N7BUvkd0AHIckOeAAgcUOaDEAFW+tHMA0ox5ROU7OAcgywERA1R5Zt+uM+xAdgcp8iHRSvHk3A4S2iGxHZKaIRUX4ukdRu1DCgcgwwFZDog4IMcBeQ4ocECRA0oMUOAwInAYETiMCBxGBA4jAocRladbng0nZTshqdXjTWYPaRd6ec/70yjl/ePPIdQOce2Q9gE4tg/AsX0Aju19KdshzyG6HWLaIeXuu5XJKezuIcobJ59DXDvEt0NCOyS2Q1IrxKqj7hcgzd23yrRDbDuE2iGuHeLbIaEdEtshzdq3WrVD2ruv27uv27uv27uvG7v/58eL7f/xT7X0gstI+vrW63esfTu4fDvi8ldpnXsobvGz3hIt34w8h1A7xLVDfCPkz4+X3/+j8vkEl/fUBJc2SLsgl3/+33/5+1/+5V//+u//tUDe/uv//Me//fdf/vYfn//87//3n+t/+de//+Wvf/3L//nn//z73/7t3//3//z93//5r3/7t7f/9k/q8//9L7c4987RH297kpZ/Ljexv5b7t7d/6vf/qn45a97y1StiWXH/tSyavhHn7V/a/9LGr3htwi+9AD7xb+sC2rr3830nzPsx4Zd5/0mb/6cF9RGF8v9kzS8b3v4n9/Y/vYVaciG1BqK4JPb2n31GLOO7z5nH8Cumt/8eVvhbjLDCbfxF7/D4SIt+6XdEyrVRaQmSQy421i/z8c/32ij/y6n4XptcTq0X1Sw1sZ/lif5XehTnvTrb8rzXUpN+/5FcYbusjNtInz8R1K+Yc7BO/7LOrz+weAO/rP/oz6bA6v1X3//XR40XR8F9HEn7Vmi3r4P2xdItJ0jvjdG5tEuxU3hQwC09V+9HxFwXWn7Vu5U0Ri+H6IxYeq0/ArxXhZb/+tEdnXuxeB6/llvXzx/w4VcIj77Y5SziCl+sr6VN72dvcl/sQkTr1pLS0teU4YvYTMrRlwnHr2U68Phmzjt8udewD/JprZYCu9yFJTf7kbDZdGFhi3qMd3UGm0c/3s5kYdSfi87/Pw==","brillig_names":["get_public_storage_hints","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","get_public_storage_hints","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","store_in_execution_cache_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient","directive_to_radix"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Token::remove_from_list_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::remove_from_list_parameters","fields":[{"name":"removeListAddress","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"userFlag","type":{"kind":"struct","path":"types::validationModule::UserFlags","fields":[{"name":"is_blacklisted","type":{"kind":"boolean"}},{"name":"is_whitelisted","type":{"kind":"boolean"}},{"name":"is_in_sanction_list","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"Token::grant_role_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::grant_role_parameters","fields":[{"name":"role","type":{"kind":"field"}},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Token::revoke_role_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::revoke_role_parameters","fields":[{"name":"role","type":{"kind":"field"}},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Token::_transfer_internal_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_transfer_internal_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::set_debt_base_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::set_debt_base_parameters","fields":[{"name":"debt_base_","type":{"kind":"struct","path":"types::extensions::debtBaseModule::DebtBaseStruct","fields":[{"name":"interestRate","type":{"kind":"field"}},{"name":"parValue","type":{"kind":"field"}},{"name":"guarantor","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"bondHolder","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"maturityDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"interestScheduleFormat","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"interestPaymentDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"dayCountConvention","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"businessDayConvention","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"publicHolidaysCalendar","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"issuanceDate","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"couponFrequency","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]}}]}}]},{"kind":"struct","path":"Token::public_get_issuer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::public_get_issuer_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::set_credit_events_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::set_credit_events_parameters","fields":[{"name":"credit_events","type":{"kind":"struct","path":"types::extensions::creditEventsModule::CreditEventsStruct","fields":[{"name":"flagDefault","type":{"kind":"boolean"}},{"name":"flagRedeemed","type":{"kind":"boolean"}},{"name":"rating","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]}}]}}]},{"kind":"struct","path":"Token::cancel_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::cancel_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::get_debt_base_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::get_debt_base_parameters","fields":[]}},{"name":"return_type","type":{"kind":"array","length":12,"type":{"kind":"field"}}}]},{"kind":"struct","path":"Token::total_supply_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::total_supply_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Token::public_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::public_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::private_get_decimals_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::private_get_decimals_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"Token::public_get_decimals_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::public_get_decimals_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"Token::private_get_issuer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::private_get_issuer_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::_transferFrom_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_transferFrom_parameters","fields":[]}}]},{"kind":"struct","path":"Token::_burn_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_burn_parameters","fields":[{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::mint_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::transfer_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::_transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_transfer_parameters","fields":[]}}]},{"kind":"struct","path":"Token::get_credit_events_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::get_credit_events_parameters","fields":[]}},{"name":"return_type","type":{"kind":"array","length":3,"type":{"kind":"field"}}}]},{"kind":"struct","path":"Token::private_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::private_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::add_to_list_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::add_to_list_parameters","fields":[{"name":"newListAddress","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"userFlag","type":{"kind":"struct","path":"types::validationModule::UserFlags","fields":[{"name":"is_blacklisted","type":{"kind":"boolean"}},{"name":"is_whitelisted","type":{"kind":"boolean"}},{"name":"is_in_sanction_list","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"Token::has_role_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::has_role_parameters","fields":[{"name":"role","type":{"kind":"field"}},{"name":"account","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Token::set_operations_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::set_operations_parameters","fields":[{"name":"operations","type":{"kind":"struct","path":"types::validationModule::SetFlag","fields":[{"name":"operate_blacklist","type":{"kind":"boolean"}},{"name":"operate_whitelist","type":{"kind":"boolean"}},{"name":"operate_sanctionlist","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"Token::private_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::private_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::freeze_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::freeze_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"value","type":{"kind":"struct","path":"types::enforcementModule::FreezableFlag","fields":[{"name":"is_freezed","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"Token::get_operations_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::get_operations_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Token::unpause_contract_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::unpause_contract_parameters","fields":[]}}]},{"kind":"struct","path":"Token::pause_contract_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::pause_contract_parameters","fields":[]}}]},{"kind":"struct","path":"Token::transfer_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::transfer_batch_parameters","fields":[{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::burn_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::burn_batch_parameters","fields":[{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::_mint_internal_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_mint_internal_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::unfreeze_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::unfreeze_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"value","type":{"kind":"struct","path":"types::enforcementModule::FreezableFlag","fields":[{"name":"is_freezed","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"Token::mint_batch_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::mint_batch_parameters","fields":[{"name":"accounts","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"amount","type":{"kind":"array","length":1,"type":{"kind":"field"}}}]}}]},{"kind":"struct","path":"Token::only_role_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::only_role_parameters","fields":[{"name":"role","type":{"kind":"field"}},{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Token::transfer_from_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::transfer_from_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::burn_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::burn_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},{"kind":"struct","path":"Token::renounce_role_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::renounce_role_parameters","fields":[{"name":"role","type":{"kind":"field"}},{"name":"callerConfirmation","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Token::public_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::public_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::get_frozen_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::get_frozen_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"Token::_mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::_mint_parameters","fields":[{"name":"caller","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Token::public_get_pause_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Token::public_get_pause_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"pause_module","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"validation_module","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"enforcement_module","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"access_control","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"credit_event_module","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"debt_base_module","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"issuer_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000b"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000d"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000e"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000f"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n        for i in 0..MaxLen {\n            if i >= len {\n                array[i] = zeroed;\n            }\n        }\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"60":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            /*@safety : euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n                Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n            */\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            //@safety : cf div() above\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            //@safety: testing context\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            //@safety: testing context\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"62":{"source":"mod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n//TODO: add the events\n//TODO: look into burn batch\n//TODO: add possibility to modify the issuer address\n//TODO: look into the token note structure. Is it good to have value_note from library and then utils for increment and decrement?\n#[aztec]\ncontract Token {\n    // Libs\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        prelude::{\n            AztecAddress, Map,PrivateSet, PublicMutable, PublicImmutable,\n            SharedMutable,\n        },\n    };\n\n    use crate::types::{\n        access_controlModule::{\n            AccessControlModule, BURNER_ROLE, DEFAULT_ADMIN_ROLE, MINTER_ROLE\n        },\n        enforcementModule::{Freezable, FreezableFlag},\n        extensions::{\n            creditEventsModule::{CreditEvents, CreditEventsStruct},\n            debtBaseModule::{DebtBase, DebtBaseStruct},\n        },\n        pauseModule::{BoolEmul, PauseModule},\n        validationModule::{SetFlag, UserFlags, ValidationModule},\n        token_note::utils::{decrement, increment},\n    };\n    use dep::value_note::{balance_utils, value_note::ValueNote};\n\n    \n\n    // Changing an address' roles has a certain block delay before it goes into effect.\n    global CHANGE_ROLES_DELAY_BLOCKS: u32 = 2;\n    //This global is used when doing batching. We set a limit of 1 address per call for now due to the 4 encrypted logs limit.\n    global MAX_ADDR_PER_CALL: u32 = 1;\n\n    // #[derive(Serialize)]\n    // #[event]\n    // struct Paused {\n    //     account: AztecAddress\n    // }\n\n    // #[event]\n    // struct Unpaused {\n    //     account: AztecAddress\n    // }\n\n    // #[event]\n    // struct Transfer {\n    //     from: AztecAddress,\n    //     to: AztecAddress,\n    //     amount: Field,\n    // }\n\n\n\n    #[storage]\n    struct Storage<Context> {\n\n        pause_module: PauseModule<BoolEmul, Context>,\n        validation_module: ValidationModule<UserFlags, Context>,\n        enforcement_module: Freezable<FreezableFlag, Context>,\n        access_control: AccessControlModule<bool, Context>,\n        credit_event_module: CreditEvents<bool, Context>,\n        debt_base_module: DebtBase<bool, Context>,\n\n        issuer_address: SharedMutable<AztecAddress, CHANGE_ROLES_DELAY_BLOCKS, Context>,\n\n        balances: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n        total_supply: PublicMutable<U128, Context>,\n\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        decimals: PublicImmutable<u8, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.decimals.initialize(decimals);\n        storage.access_control._grant_role(DEFAULT_ADMIN_ROLE, admin);\n        storage.issuer_address.schedule_value_change(admin);\n    }\n\n    //############ AUTHORIZATION MODULE ############\n\n    #[public]\n    #[view]\n    fn has_role(role: Field, account: AztecAddress) -> pub Field {\n        storage.access_control.has_role(role, account).to_field()\n    }\n\n    #[public]\n    fn only_role(role: Field, caller: AztecAddress) {\n        storage.access_control.only_role(role, caller);\n    }\n\n    #[public]\n    fn grant_role(role: Field, account: AztecAddress) {\n        storage.access_control.grant_role(role, account);\n    }\n\n    /**\n     * @roles: onlyAdmin\n     * @notice: revoking a pause contract role when the contract is paused can cause the contract to be stuck in a paused state.\n     */\n    #[public]\n    fn revoke_role(role: Field, account: AztecAddress) {\n        storage.access_control.revoke_role(role, account)\n    }\n\n    #[public]\n    fn renounce_role(role: Field, callerConfirmation: AztecAddress) {\n        storage.access_control.renounce_role(role, context.msg_sender(), callerConfirmation);\n    }\n\n    //############ VALIDATION MODULE ############\n\n    #[public]\n    #[view]\n    fn get_operations() -> pub Field {\n        storage.validation_module.get_operations()\n    }\n\n    #[public]\n    fn set_operations(operations: SetFlag) {\n        storage.validation_module.set_operations(\n            context.msg_sender(),\n            operations,\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn add_to_list(newListAddress: AztecAddress, userFlag: UserFlags) {\n        storage.validation_module.add_to_list(\n            context.msg_sender(),\n            newListAddress,\n            userFlag,\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn remove_from_list(removeListAddress: AztecAddress, userFlag: UserFlags) {\n        storage.validation_module.remove_from_list(\n            context.msg_sender(),\n            removeListAddress,\n            userFlag,\n            storage.access_control,\n        );\n    }\n\n    //############ PAUSE MODULE ############\n\n    #[public]\n    #[view]\n    fn public_get_pause() -> pub Field {\n        storage.pause_module.is_paused().to_field()\n    }\n\n    /**\n     * @roles: onlyAdmin\n     * @notice: The contract must not be paused.\n     */\n    #[public]\n    fn pause_contract() {\n        let admin = context.msg_sender();\n        storage.pause_module.pause(admin, storage.access_control);\n    }\n\n    #[public]\n    fn unpause_contract() {\n        let admin = context.msg_sender();\n        storage.pause_module.unpause(admin, storage.access_control);\n    }\n\n    //############ ENFORCEMENT MODULE ############\n\n    #[public]\n    #[view]\n    fn get_frozen(user: AztecAddress) -> pub Field {\n        storage.enforcement_module.is_frozen(user).to_field()\n    }\n\n    #[public]\n    fn freeze(user: AztecAddress, value: FreezableFlag) {\n        storage.enforcement_module.freeze(context.msg_sender(), user, value, storage.access_control);\n    }\n\n    #[public]\n    fn unfreeze(user: AztecAddress, value: FreezableFlag) {\n        storage.enforcement_module.unfreeze(\n            context.msg_sender(),\n            user,\n            value,\n            storage.access_control,\n        );\n    }\n\n    //############ CREDIT EVENTS MODULE ############\n\n    //Note: as events are only allowed in the main contract, we have decided not to put them yet for this function.\n    #[public]\n    fn set_credit_events(credit_events: CreditEventsStruct) {\n        storage.credit_event_module.setCreditEvents(\n            credit_events,\n            context.msg_sender(),\n            storage.access_control,\n        );\n    }\n\n    #[public]\n    fn get_credit_events() -> [Field; 3] {\n        storage.credit_event_module.get_credit_events()\n    }\n\n    //############ DEBT BASE MODULE ############\n\n    #[public]\n    fn set_debt_base(debt_base_: DebtBaseStruct) {\n        storage.debt_base_module.setDebt(debt_base_, context.msg_sender(), storage.access_control);\n    }\n\n    #[public]\n    fn get_debt_base() -> [Field; 12] {\n        storage.debt_base_module.get_debt_base()\n    }\n\n    //############ GETTERS ############\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    //TODO: we should be able to change the address of the issuer and put some ACL on it\n    #[public]\n    #[view]\n    fn public_get_issuer() -> pub AztecAddress {\n        storage.issuer_address.get_current_value()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_issuer() -> pub AztecAddress {\n        storage.issuer_address.get_current_value()\n    }\n\n    //############ MINT ############\n\n    #[private]\n    #[internal]\n    //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    fn _mint_internal(to: AztecAddress, amount: Field) {\n        assert(!storage.enforcement_module.is_frozen(to), \"Frozen: Recipient\");\n\n        let issuer = storage.issuer_address.get_current_value();\n\n        increment(storage.balances.at(to), amount,to,issuer,to);\n    }\n\n    /*\n    * @info : wether the contract is paused or not is checked in the _mint function\n    * @TODO: should we restrict the \"to\" address to not be the issuer, in order to prevent a \"malicious\" issuer from not\n    * revealing the \"real\" supply of the token, ex: by minting 100% of tokens to himself, he can hide the supply held by users\n    */\n    #[private]\n    fn mint(to: AztecAddress, amount: Field) {\n        Token::at(context.this_address())._mint_internal(to, amount).call(&mut context);\n        Token::at(context.this_address())._mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    //everyone can call this function, but will revert in _mint if not minter role\n    #[private]\n    fn mint_batch(accounts: [AztecAddress; MAX_ADDR_PER_CALL], amount: [Field; MAX_ADDR_PER_CALL]) {\n        assert(accounts.len() != 0, \"Mint module empty\");\n        assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n        let mut acc = 0;\n\n        for i in 0..accounts.len() {\n            //who is the caller here? contract or issuer, bc if it's the contract, it will fail\n            Token::at(context.this_address())._mint_internal(accounts[i], amount[i]).call(\n                &mut context,\n            );\n            acc += amount[i];\n        }\n\n        Token::at(context.this_address())._mint(context.msg_sender(), acc).enqueue(&mut context);\n    }\n\n    //############ TRANSFER ############\n\n    #[private]\n    #[internal]\n    //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    //in library, so I don't need to emit it again here. Problem is that I cannot emit to issuer here, as I don't have the note.\n    fn _transfer_internal(from: AztecAddress, to: AztecAddress, amount: Field) {\n        assert(!storage.enforcement_module.is_frozen(from), \"Frozen: Sender\");\n        assert(!storage.enforcement_module.is_frozen(to), \"Frozen: Recipient\");\n        storage.validation_module.operateOnTransfer(from, to);\n\n        let issuer = storage.issuer_address.get_current_value();\n\n        decrement(storage.balances.at(from),amount,from,issuer,from);\n        increment(storage.balances.at(to),amount,to,issuer,from);\n    }\n\n    /*\n    * @info : wether the contract is paused or not is checked in the _mint function\n    * NOTE: the nonce here is used to prevent replay attacks. By constraining it to be equal to 0 afterwards,\n    * we assure that the signature of this function call can only be done once \n    */\n    #[private]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n        Token::at(context.this_address())._transfer_internal(from, to, amount).call(&mut context);\n        Token::at(context.this_address())._transfer().enqueue(&mut context);\n        // Transfer { from, to, amount: amount.to_field() }.emit(\n        //     encode_and_encrypt_event_unconstrained(&mut context, from, to),\n        // );\n    }\n\n    /*\n    * as the max number of encrypted logs is 4 per call, and a transfer has 4 encrypted logs, batching the transfers won't work for more than one call, equivalent as not batching.\n    */\n    #[private]\n    fn transfer_batch(\n        accounts: [AztecAddress; MAX_ADDR_PER_CALL],\n        amount: [Field; MAX_ADDR_PER_CALL],\n        nonce: Field,\n    ) {\n        // assert(storage.rule_module.is_issuer(context.msg_sender()), \"Caller is not issuer\");\n        assert(accounts.len() != 0, \"Mint module empty\");\n        assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n\n        for i in 0..MAX_ADDR_PER_CALL {\n            Token::at(context.this_address())\n                ._transfer_internal(context.msg_sender(), accounts[i], amount[i])\n                .call(&mut context);\n        }\n        Token::at(context.this_address())._transferFrom().enqueue(&mut context);\n    }\n\n    //Same pattern as ERC20.\n    #[private]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        //the authwit is used to allow a thrid party to spend funds of a user upon approval.\n        //should we check if the 3rd party initiating this transaction is able to do the transfer?\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        Token::at(context.this_address())._transfer_internal(from, to, amount).call(&mut context);\n        Token::at(context.this_address())._transferFrom().enqueue(&mut context);\n        // Transfer { from, to, amount: amount.to_field() }.emit(\n        //     encode_and_encrypt_event_unconstrained(&mut context, from, to),\n        // );\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    //############ BURN ############\n\n    //we need an authwit from the user that has the notes to burn his notes.\n    //NOTE: I do not receive an outerNoteEmission here due to aztec-nr valueNote already emitting the note\n    #[private]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        assert(!storage.enforcement_module.is_frozen(from), \"Frozen: Sender\");\n\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let issuer = storage.issuer_address.get_current_value();\n\n        decrement(storage.balances.at(from), amount, from, issuer, from);\n\n        Token::at(context.this_address())._burn(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    //can nonce be the same for all accounts?\n    #[private]\n    fn burn_batch(\n        accounts: [AztecAddress; MAX_ADDR_PER_CALL],\n        amount: [Field; MAX_ADDR_PER_CALL],\n        nonce: Field,\n    ) {\n        // assert(storage.rule_module.is_issuer(context.msg_sender()), \"Caller is not issuer\");\n        assert(accounts.len() != 0, \"Mint module empty\");\n        assert(accounts.len() == amount.len(), \"Accounts and values arrays mismatch\");\n\n        for i in 0..MAX_ADDR_PER_CALL {\n            //who is the caller here? contract or issuer, bc if it's the contract, it will fail\n            Token::at(context.this_address()).burn(accounts[i], amount[i], nonce);\n        }\n    }\n\n    //############ INTERNAL ############\n\n    #[public]\n    #[internal]\n    fn _mint(caller: AztecAddress, amount: Field) {\n        storage.access_control.only_role(MINTER_ROLE, caller);\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n        storage.total_supply.write(supply);\n    }\n\n    #[public]\n    #[internal]\n    fn _transfer() {\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n    }\n\n    #[public]\n    #[internal]\n    fn _transferFrom() {\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n    }\n\n    #[public]\n    #[internal]\n    fn _burn(caller: AztecAddress, amount: Field) {\n        storage.access_control.only_role(BURNER_ROLE, caller);\n        assert(!storage.pause_module.is_paused(), \"Error: token contract is paused\");\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n\n\n    // //############ UNCONSTRAINED ############\n\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        let balance_set = storage.balances.at(owner);\n        balance_utils::get_balance(balance_set)\n    }\n\n}\n\n","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/main.nr"},"74":{"source":"use dep::aztec::prelude::{AztecAddress, PublicMutable, Map};\nuse dep::aztec::context::{PublicContext};\n\n\n// Type alias for better readability\npub type Role = Field;\n\npub global DEFAULT_ADMIN_ROLE: Field = 1;\npub global PAUSE_ROLE: Field = 2;\npub global ENFORCEMENT_ROLE: Field =  3;\npub global VALIDATION_ROLE: Field = 4;\npub global ADDRESS_LIST_ADD_ROLE: Field = 5;\npub global ADDRESS_LIST_REMOVE_ROLE: Field = 6;\npub global MINTER_ROLE: Field = 7;\npub global BURNER_ROLE: Field = 8;\npub global DEBT_ROLE: Field = 9;\npub global DEBT_CREDIT_EVENT_ROLE: Field = 10;\n\n\n// Define the storage for role data\npub struct RoleData<Context> {\n    pub has_role: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n    pub admin_role: Role,\n}\n\n//Define the AccessControl storage\npub struct AccessControlModule<T,Context> {\n    pub roles: Map<Role, RoleData<Context>, Context>,\n}\n\nimpl<T,Context> AccessControlModule<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            roles: Map::new(\n                context,\n                storage_slot,\n                |context,storage_slot| RoleData::new(context, storage_slot)\n            )\n        }\n    }\n    }\n\n\nimpl<T> AccessControlModule<T, &mut PublicContext> {\n    // Get role storage\n    fn get_role_storage(self: Self, role: Role) -> RoleData<&mut PublicContext>{\n        self.roles.at(role)\n    }\n\n    // Check if an account has a role\n    pub fn has_role(self: Self, role: Role, account: AztecAddress) -> bool {\n        let role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).read()\n    }\n\n    // Check role internally\n    fn check_role(self: Self, role: Role, account: AztecAddress) {\n        assert(self.has_role(role, account),\"AccessControlUnauthorizedAccount\");\n    }\n\n    // Modifier to check role\n    pub fn only_role(self: Self, role: Role, caller: AztecAddress) {\n        self.check_role(role, caller);\n    }\n\n    pub fn getRoleAdmin(self: Self, role: Role) -> Role {\n        self.roles.at(role).admin_role\n    }\n\n    // renounce ownership of a role\n    // This is a public function because it can be called by the user\n    // @dev: \n    pub fn renounce_role(self:Self, role: Field, caller: AztecAddress, callerConfirmation: AztecAddress) {\n        assert(caller == callerConfirmation, \"Renounce Role: Addresses do not match\");\n        self._revoke_role(role, callerConfirmation)   \n    }\n\n    // Grant a role to an account\n    pub fn grant_role( self: Self, role: Role, account: AztecAddress) {\n        self.only_role(self.getRoleAdmin(role), account);\n        self._grant_role(role,account);\n    }\n\n    // Revoke a role from an account\n    pub fn revoke_role(self:Self, role: Role, account: AztecAddress) {\n        self.only_role(self.getRoleAdmin(role), account);\n        self._revoke_role(role,account);\n    }\n\n    //this is made public so that the constructor can call it. \n    //TODO: see how to make otherwise\n    pub fn _grant_role( self:Self, role: Role, account: AztecAddress) {\n        let mut role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).write(true);\n    }\n\n    fn _revoke_role(self:Self, role: Role, account: AztecAddress) {\n        let mut role_data = self.get_role_storage(role);\n        role_data.has_role.at(account).write(false);\n    }  \n}\n\nimpl<Context> RoleData<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n\n        let has_role = Map::new(\n                context,\n                storage_slot,\n                |context,storage_slot| PublicMutable::new(context, storage_slot)\n            );\n        let admin_role = DEFAULT_ADMIN_ROLE;\n        Self { has_role: has_role, admin_role: admin_role }\n    }\n}\n","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/access_controlModule.nr"},"76":{"source":"use dep::aztec::{prelude::{AztecAddress, SharedMutable, Map},  context::PublicContext, context::PrivateContext};\nuse dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse crate::types::access_controlModule::{AccessControlModule,ENFORCEMENT_ROLE};\n\nglobal FREEZED_FLAG: u64 = 1;\nglobal CHANGE_ROLES_DELAY_BLOCKS: u32 = 2;\n\npub struct FreezableFlag {\n    is_freezed: bool,\n}\n\ntrait FreezableFlagTrait {\n    pub fn get_is_frozen(self) -> bool;\n}\n\npub struct Freezable<T,Context>{\n    pub map: Map<AztecAddress, SharedMutable<T, CHANGE_ROLES_DELAY_BLOCKS, Context>, Context>\n}\n\nimpl<T,Context> Freezable<T,Context> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(\n                context,\n                storage_slot,\n                |context, slot| SharedMutable::new(context,slot)\n            )\n        }\n    }\n}\n\nimpl<T> Freezable<T, &mut PublicContext> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    pub fn is_frozen(self: Self, address: AztecAddress) -> bool{\n        self.map.at(address).get_current_value().get_is_frozen()\n    }\n\n    /**\n     * @dev Freezes an account. An account can be unfrozen\n     *\n     * Requirements:\n     *\n     * - The account must not be already frozen\n     */\n    pub fn freeze(self: Self,caller:AztecAddress, address: AztecAddress, val: T, ac: AccessControlModule<bool, &mut PublicContext>){\n        ac.only_role(ENFORCEMENT_ROLE, caller);\n        self._require_not_freezed(address);\n        self.map.at(address).schedule_value_change(val);\n    }\n\n\n    pub fn unfreeze(self: Self, caller: AztecAddress, address: AztecAddress, val: T, ac: AccessControlModule<bool, &mut PublicContext>){\n        ac.only_role(ENFORCEMENT_ROLE, caller);\n        self._require_freezed(address);\n        self.map.at(address).schedule_value_change(val);\n    }\n    // Internal functions\n    //TODO: are we sure these functions cannot be called externally?\n    fn _require_not_freezed(self: Self, address: AztecAddress) {\n        assert(self.map.at(address).get_current_value().get_is_frozen() == false, \"error: address already freezed\");\n    }\n\n    fn _require_freezed(self: Self, address: AztecAddress) {\n        assert(self.map.at(address).get_current_value().get_is_frozen() == true, \"error: address already unfreezed\");\n    }\n\n}\n\nimpl<T> Freezable<T,&mut PrivateContext> where T: Eq + ToField + FromField + FreezableFlagTrait{\n\n    pub fn is_frozen(self: Self, user: AztecAddress) -> bool {\n        let user_roles: T = self.map.at(user).get_current_value();\n        user_roles.get_is_frozen()\n    }\n\n}\n\nimpl FreezableFlagTrait for FreezableFlag {\n    fn get_is_frozen(self) -> bool {\n        self.is_freezed\n    }\n}\n\nimpl FromField for FreezableFlag {\n    fn from_field(value: Field) -> FreezableFlag {\n        let value: u64 = value as u64;\n        let is_freezed = (value & FREEZED_FLAG) == FREEZED_FLAG;\n\n        Self {is_freezed }\n    }\n}\n\nimpl ToField for FreezableFlag {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_freezed {\n            value = value | FREEZED_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for FreezableFlag {\n    fn eq(self, other: Self) -> bool {\n        self.is_freezed == other.is_freezed\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<1> for FreezableFlag {\n    fn serialize(self) -> [Field; 1] {\n        [self.is_freezed.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<1> for FreezableFlag {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            is_freezed: fields[0] as bool,\n        }\n    }\n}\n\n","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/enforcementModule.nr"},"77":{"source":"use dep::aztec::protocol_types::traits::{Packable, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, PublicMutable};\nuse dep::aztec::context::{PublicContext};\nuse dep::compressed_string::FieldCompressedString;\nuse crate::types::access_controlModule::{AccessControlModule,DEBT_CREDIT_EVENT_ROLE};\n\n\npub global FLAG_DEFAULT_FLAG: Field = 1;\npub global FLAG_REDEEMED_FLAG: Field = 2;\n\n\nglobal T_SERIALIZED_LEN: u32 = 3; \n\n    pub struct CreditEventsStruct {\n        flagDefault: bool,\n        flagRedeemed: bool,\n        rating: FieldCompressedString,\n    }\n\n    pub struct CreditEvents<T, Context> {\n        pub credit_event: PublicMutable<CreditEventsStruct,Context>,\n    }\n\n//NOTE: events can only be used in contracts from what I understand\n    // #[event]\n    // struct FlagDefault {\n    //     newFlagDefault: bool\n    // }\n\n    // #[event]\n    // struct FlagRedeemed {\n    //     newFlagRedeemed: bool\n    // }\n\n    // //the type of newRating should be a string\n    // #[event]\n    // struct Rating {\n    //     newRating: Field,\n    // }\n\n\nimpl<T,Context> CreditEvents<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            credit_event: PublicMutable::new(context, storage_slot),\n        }\n    }\n}\n\nimpl<T> CreditEvents<T, &mut PublicContext> {\n    /** \n    * @notice Set all attributes of creditEvents\n    * The values of all attributes will be changed even if the new values are the same as the current ones\n    */\n    pub fn setCreditEvents( self: Self, credit_events: CreditEventsStruct, caller: AztecAddress, ac: AccessControlModule<bool,  &mut PublicContext>){\n        ac.only_role(DEBT_CREDIT_EVENT_ROLE, caller);\n        let creditEvents = CreditEventsStruct {flagDefault: credit_events.flagDefault, flagRedeemed: credit_events.flagRedeemed, rating: credit_events.rating};\n        self.credit_event.write(creditEvents);\n            \n        //the below works here\n        //let context = self.credit_event.context;\n        //context.emit_unencrypted_log(  flagDefault_);\n        //the below only works in main contract\n        //FlagDefault{newFlagDefault: flagDefault_}.emit(encode_event(&mut context));\n    }\n\n    pub fn get_credit_events(self: Self) -> [Field; T_SERIALIZED_LEN]{\n        self.credit_event.read().serialize()\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for CreditEventsStruct {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.flagDefault.to_field(), self.flagRedeemed.to_field(), self.rating.serialize()[0]]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for CreditEventsStruct {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            flagDefault: fields[0] as bool,\n            flagRedeemed: fields[1] as bool,\n            rating: FieldCompressedString::from_field(fields[2]),\n        }\n    }\n}\n\nimpl Packable<T_SERIALIZED_LEN> for CreditEventsStruct {\n    fn pack(self) -> [Field; T_SERIALIZED_LEN] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self::deserialize(fields)\n    }\n}","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/extensions/creditEventsModule.nr"},"78":{"source":"use dep::aztec::protocol_types::traits::{Packable, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, PublicMutable};\nuse dep::aztec::context::{PublicContext};\n\n    use dep::compressed_string::FieldCompressedString;\nuse crate::types::access_controlModule::{AccessControlModule,DEBT_ROLE};\n\n\nglobal T_SERIALIZED_LEN: u32 = 12; \n\n\n  pub struct DebtBaseStruct {\n        interestRate: Field,\n        parValue: Field,\n        guarantor: FieldCompressedString,\n        bondHolder: FieldCompressedString,\n        maturityDate: FieldCompressedString,\n        interestScheduleFormat: FieldCompressedString,\n        interestPaymentDate: FieldCompressedString,\n        dayCountConvention: FieldCompressedString,\n        businessDayConvention: FieldCompressedString,\n        publicHolidaysCalendar: FieldCompressedString,\n        issuanceDate: FieldCompressedString,\n        couponFrequency: FieldCompressedString,\n    }\n\n  pub struct DebtBase<T, Context> {\n    pub debt_base: PublicMutable<DebtBaseStruct,Context>,\n  }\n\nimpl<T,Context> DebtBase<T,Context> {\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n          debt_base: PublicMutable::new(context,storage_slot),\n        }\n    }\n}\n\nimpl<T> DebtBase<T, &mut PublicContext> {\n\n  pub fn setDebt(self: Self, debt_base_: DebtBaseStruct, caller: AztecAddress, ac: AccessControlModule<bool,  &mut PublicContext>) {\n    ac.only_role(DEBT_ROLE, caller);\n    self.debt_base.write(debt_base_);\n  }\n\n  pub fn get_debt_base(self: Self) -> [Field; T_SERIALIZED_LEN] {\n    self.debt_base.read().serialize()\n  }\n}\n\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for DebtBaseStruct {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.interestRate.to_field(), self.parValue.to_field(), self.guarantor.serialize()[0], self.bondHolder.serialize()[0], self.maturityDate.serialize()[0], self.interestScheduleFormat.serialize()[0], self.interestPaymentDate.serialize()[0], self.dayCountConvention.serialize()[0], self.businessDayConvention.serialize()[0], self.publicHolidaysCalendar.serialize()[0], self.issuanceDate.serialize()[0], self.couponFrequency.serialize()[0]]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for DebtBaseStruct {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            interestRate: fields[0] as Field,\n            parValue: fields[1] as Field,\n            guarantor: FieldCompressedString::from_field(fields[2]),\n            bondHolder: FieldCompressedString::from_field(fields[2]),\n            maturityDate: FieldCompressedString::from_field(fields[2]),\n            interestScheduleFormat: FieldCompressedString::from_field(fields[2]),\n            interestPaymentDate: FieldCompressedString::from_field(fields[2]),\n            dayCountConvention: FieldCompressedString::from_field(fields[2]),\n            businessDayConvention: FieldCompressedString::from_field(fields[2]),\n            publicHolidaysCalendar: FieldCompressedString::from_field(fields[2]),\n            issuanceDate: FieldCompressedString::from_field(fields[2]),\n            couponFrequency: FieldCompressedString::from_field(fields[2]),\n        }\n    }\n}\n\nimpl Packable<T_SERIALIZED_LEN> for DebtBaseStruct {\n    fn pack(self) -> [Field; T_SERIALIZED_LEN] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/extensions/debtBaseModule.nr"},"80":{"source":"use dep::aztec::{prelude::{AztecAddress, PublicMutable},  context::PublicContext};\nuse dep::aztec::protocol_types::traits::{Packable, FromField, ToField, Serialize, Deserialize};\nuse crate::types::access_controlModule::{AccessControlModule, PAUSE_ROLE};\n\npub global PAUSED_FLAG: u64 = 1;\npub global T_SERIALIZED_LEN: u32 = 1;\n\n    trait BoolEmulTrait {\n        pub fn get_pause(self) -> bool;\n        pub fn set_pause(&mut self, arg: bool);\n    }\n\n    pub struct BoolEmul {\n        is_paused: bool,\n    }\n\n    pub struct PauseModule<T,Context>{\n        pub is_paused: PublicMutable<T, Context>,\n    }\n\nimpl<T,Context> PauseModule<T,Context> where T: Eq + Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> + ToField + FromField + BoolEmulTrait{\n\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            is_paused: PublicMutable::new(context,storage_slot),            \n        }\n    }\n\n}\n\nimpl<T> PauseModule<T,&mut PublicContext> where T: Eq + Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> + ToField + FromField + BoolEmulTrait + Packable<T_SERIALIZED_LEN>{\n\n\n    pub fn is_paused(self: Self) -> bool{\n        let val: T = self.is_paused.read();\n        val.get_pause()\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    pub fn pause(self: Self, caller: AztecAddress, ac: AccessControlModule<bool, &mut  PublicContext>){\n        ac.only_role(PAUSE_ROLE, caller);\n        self._require_not_paused();\n        let mut val: T = self.is_paused.read();\n        val.set_pause(true);\n        self.is_paused.write(val);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    pub fn unpause(self: Self, caller: AztecAddress, ac: AccessControlModule<bool, &mut  PublicContext>){\n        ac.only_role(PAUSE_ROLE, caller);\n        self._require_paused();\n        let mut val: T = self.is_paused.read();\n        val.set_pause(false);\n        self.is_paused.write(val); \n    }\n\n    #[aztec(internal)]\n    fn _require_not_paused(self: Self) {\n        assert(self.is_paused.read().get_pause() == false, \"error: contract already paused\");\n    }\n\n    #[aztec(internal)]\n    fn _require_paused(self: Self) {\n        assert(self.is_paused.read().get_pause() == true, \"error: contract already unpaused\");\n    }\n\n}\n\nimpl BoolEmulTrait for BoolEmul {\n    fn get_pause(self) -> bool{\n        self.is_paused\n    }\n\n    fn set_pause(&mut self, arg: bool) {\n        self.is_paused = arg;\n    }\n}\nimpl FromField for BoolEmul {\n    fn from_field(value: Field) -> BoolEmul {\n        let value: u64 = value as u64;\n        let is_paused = (value & PAUSED_FLAG) == PAUSED_FLAG;\n        Self { is_paused }\n    }\n}\n\nimpl ToField for BoolEmul {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_paused {\n            value = value | PAUSED_FLAG;\n        }\n        value.to_field()\n    }\n}\n\nimpl Eq for BoolEmul {\n    fn eq(self, other: Self) -> bool {\n        (self.is_paused == other.is_paused) \n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<T_SERIALIZED_LEN> for BoolEmul {\n    fn serialize(self) -> [Field; T_SERIALIZED_LEN] {\n        [self.is_paused.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<T_SERIALIZED_LEN> for BoolEmul {\n    fn deserialize(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self {\n            is_paused: fields[0] as bool,\n        }\n    }\n}\n\nimpl Packable<T_SERIALIZED_LEN> for BoolEmul{\n    fn pack(self) -> [Field; T_SERIALIZED_LEN] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; T_SERIALIZED_LEN]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\n","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/pauseModule.nr"},"81":{"source":"use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\nuse dep::aztec::keys::getters::get_public_keys;\nuse dep::aztec::note::note_getter_options::SortOrder;\nuse dep::aztec::prelude::{AztecAddress, NoteGetterOptions, PrivateContext, PrivateSet};\nuse dep::value_note::{balance_utils,filter::filter_notes_min_sum, value_note::{VALUE_NOTE_LEN, ValueNote}};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(\n    amount: Field,\n) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(\n        ValueNote::properties().value,\n        SortOrder.DESC\n    )\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(\n    // docs:start:increment_args\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    recipient: AztecAddress,\n    issuer: AztecAddress,\n    sender: AztecAddress\n) {\n    let mut note = ValueNote::new(amount, recipient);\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    let note_insert = balance.insert(&mut note);\n    \n    note_insert.emit(encode_and_encrypt_note(\n        balance.context,\n        recipient,\n        sender));\n    note_insert.emit(encode_and_encrypt_note(\n        balance.context,\n        issuer,\n        sender));\n\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n    sender: AztecAddress,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner, outgoing_viewer, sender);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    max_amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n    sender: AztecAddress,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let notes = balance.pop_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            decremented += note.value;\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if max_amount.lt(decremented) {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner, outgoing_viewer, sender);\n\n    decremented\n}","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/token_note/utils.nr"},"83":{"source":"use dep::aztec::protocol_types::traits::{FromField, ToField, Serialize, Deserialize};\nuse dep::aztec::prelude::{AztecAddress, SharedMutable, Map};\nuse dep::aztec::context::{PublicContext, PrivateContext};\n\nuse crate::types::access_controlModule::{AccessControlModule,VALIDATION_ROLE, ADDRESS_LIST_ADD_ROLE, ADDRESS_LIST_REMOVE_ROLE};\n\npub global BLACKLIST_FLAG: u64 = 1;\npub global WHITELIST_FLAG: u64 = 2;\npub global SANCTIONLIST_FLAG: u64 = 4;\n\npub global CHANGE_ROLES_DELAY_BLOCKS: u32 = 2;\n\nglobal TEXT_ADDRESS_FROM_IS_BLACKLISTED: str<30> = \"The sender is in the blacklist\";\nglobal TEXT_ADDRESS_TO_IS_BLACKLISTED: str<33> = \"The recipient is in the blacklist\";\nglobal TEXT_ADDRESS_FROM_NOT_WHITELISTED: str<34> = \"The sender is not in the whitelist\";\nglobal TEXT_ADDRESS_TO_NOT_WHITELISTED: str<37> = \"The recipient is not in the whitelist\";\n\npub struct SetFlag {\n    operate_blacklist: bool,\n    operate_whitelist: bool,\n    operate_sanctionlist: bool,\n}\n\npub struct UserFlags {\n    is_blacklisted: bool,\n    is_whitelisted: bool,\n    is_in_sanction_list: bool,\n}\n\ntrait UserFlagsTrait {\n    pub fn get_is_blacklisted(self) -> bool;\n    pub fn get_is_whitelisted(self) -> bool;\n    pub fn get_is_in_sanction_list(self) -> bool;\n}\n\npub struct ValidationModule<T,Context> {\n    pub map: Map<AztecAddress, SharedMutable<T,CHANGE_ROLES_DELAY_BLOCKS ,Context>, Context>,\n    pub operationsFlag: SharedMutable<SetFlag,CHANGE_ROLES_DELAY_BLOCKS, Context>\n}\n\nimpl<T,Context> ValidationModule<T,Context> where T: Eq + ToField + FromField + UserFlagsTrait{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self {\n            map: Map::new(\n                context,\n                storage_slot,\n                |context, slot| SharedMutable::new(context, slot)\n            ),\n            operationsFlag: SharedMutable::new(context, storage_slot)\n        }\n    }\n}\n\nimpl<T> ValidationModule<T, &mut PublicContext> where T: Eq + ToField + FromField + UserFlagsTrait{\n    pub fn get_operations(self: Self) -> Field {\n        let operations = self.operationsFlag.get_current_value();\n        operations.to_field()\n    }\n\n    pub fn set_operations(self: Self, caller: AztecAddress, operations: SetFlag, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(VALIDATION_ROLE, caller);\n        self.operationsFlag.schedule_value_change(operations);\n    }\n    //problem: here the one that has the ADDRESS_LIST_ADD_ROLE can also remove from list by overwritting userFlag\n    pub fn add_to_list(self:Self,  caller: AztecAddress, newListAddress: AztecAddress, userFlag: T, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(ADDRESS_LIST_ADD_ROLE, caller);\n        self.map.at(newListAddress).schedule_value_change(userFlag);\n    }\n\n    pub fn remove_from_list(self:Self, caller: AztecAddress, removeListAddress: AztecAddress, userFlag: T, access_control: AccessControlModule<bool, &mut PublicContext>) {\n        access_control.only_role(ADDRESS_LIST_REMOVE_ROLE, caller);\n        self.map.at(removeListAddress).schedule_value_change(userFlag);\n    }\n}\n\nimpl<T> ValidationModule<T,&mut PrivateContext> where T: Eq + ToField + FromField + UserFlagsTrait{\n\n\n    pub fn operateOnTransfer(self: Self, from: AztecAddress, to:AztecAddress) {\n        let operations = self.operationsFlag.get_current_value();\n\n        if (operations.operate_blacklist) {\n            self.detectTransferRestriction_blacklist(from,to);\n        } else if(operations.operate_whitelist) {\n            self.detectTransferRestriction_whitelist(from,to);\n        } else if (operations.operate_sanctionlist) {\n            self.detectTransferRestriction_sanctionlist(from,to);\n        }\n    }\n\n    fn detectTransferRestriction_blacklist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(!self.map.at(from).get_current_value().get_is_blacklisted(), TEXT_ADDRESS_FROM_IS_BLACKLISTED);\n        assert(!self.map.at(to).get_current_value().get_is_blacklisted(), TEXT_ADDRESS_TO_IS_BLACKLISTED);\n    }\n\n    fn detectTransferRestriction_whitelist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(self.map.at(from).get_current_value().get_is_whitelisted(), TEXT_ADDRESS_FROM_NOT_WHITELISTED);\n        assert(self.map.at(to).get_current_value().get_is_whitelisted(), TEXT_ADDRESS_TO_NOT_WHITELISTED);\n    }\n\n    fn detectTransferRestriction_sanctionlist(self: Self, from: AztecAddress, to:AztecAddress){\n        assert(false, \"not implemented.\");\n    }\n}\n\nimpl UserFlagsTrait for UserFlags {\n    fn get_is_blacklisted(self) -> bool {\n        self.is_blacklisted\n    }\n    fn get_is_whitelisted(self) -> bool {\n        self.is_whitelisted\n    }\n    fn get_is_in_sanction_list(self) -> bool {\n        self.is_in_sanction_list\n    }\n}\n\nimpl FromField for UserFlags {\n    fn from_field(value: Field) -> UserFlags {\n        let value: u64 = value as u64;\n        let is_blacklisted = (value & BLACKLIST_FLAG) == BLACKLIST_FLAG;\n        let is_whitelisted = (value & WHITELIST_FLAG) == WHITELIST_FLAG;\n        let is_in_sanction_list = (value & SANCTIONLIST_FLAG) == SANCTIONLIST_FLAG;\n\n        Self { is_blacklisted, is_whitelisted, is_in_sanction_list }\n    }\n}\n\nimpl ToField for UserFlags {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.is_blacklisted {\n            value = value | BLACKLIST_FLAG;\n        }\n\n        if self.is_whitelisted {\n            value = value | WHITELIST_FLAG;\n        }\n\n        if self.is_in_sanction_list {\n            value = value | SANCTIONLIST_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for UserFlags {\n    fn eq(self, other: Self) -> bool {\n        (self.is_blacklisted == other.is_blacklisted) & (self.is_whitelisted == other.is_whitelisted) & (self.is_in_sanction_list == other.is_in_sanction_list)\n    }\n}\n\n// We implement this as it is used when serializing the state variable into return values\n// This is very inefficient if used to store the state variable.\n// We are currently \"abusing\" that the `to_field` is called in the `scheduled_value_change`\n// where we are using this value.\nimpl Serialize<3> for UserFlags {\n    fn serialize(self) -> [Field; 3] {\n        [self.is_blacklisted.to_field(), self.is_whitelisted.to_field(), self.is_in_sanction_list.to_field()]\n        // [self.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<3> for UserFlags {\n    fn deserialize(fields: [Field; 3]) -> Self {\n        Self {\n            is_blacklisted: fields[0] as bool,\n            is_whitelisted: fields[1] as bool,\n            is_in_sanction_list: fields[2] as bool,\n        }\n    }\n}\n\n\nimpl FromField for SetFlag {\n    fn from_field(value: Field) -> SetFlag {\n        let value: u64 = value as u64;\n        let operate_blacklist = (value & BLACKLIST_FLAG) == BLACKLIST_FLAG;\n        let operate_whitelist = (value & WHITELIST_FLAG) == WHITELIST_FLAG;\n        let operate_sanctionlist = (value & SANCTIONLIST_FLAG) == SANCTIONLIST_FLAG;\n\n        Self { operate_blacklist, operate_whitelist, operate_sanctionlist }\n    }\n}\n\nimpl ToField for SetFlag {\n    fn to_field(self) -> Field {\n        let mut value: u64 = 0;\n\n        if self.operate_blacklist {\n            value = value | BLACKLIST_FLAG;\n        }\n\n        if self.operate_whitelist {\n            value = value | WHITELIST_FLAG;\n        }\n\n        if self.operate_sanctionlist {\n            value = value | SANCTIONLIST_FLAG;\n        }\n\n        value.to_field()\n    }\n}\n\nimpl Eq for SetFlag {\n    fn eq(self, other: Self) -> bool {\n        (self.operate_blacklist == other.operate_blacklist) & (self.operate_whitelist == other.operate_whitelist) & (self.operate_sanctionlist == other.operate_sanctionlist)\n    }\n}\n\nimpl Serialize<3> for SetFlag {\n    fn serialize(self) -> [Field; 3] {\n        [self.operate_blacklist.to_field(), self.operate_whitelist.to_field(), self.operate_sanctionlist.to_field()]\n    }\n}\n\n// We implement this as it is required for other contracts to be able to \"rebuild\" the variable\n// after having received the serialized value as a return-value\nimpl Deserialize<3> for SetFlag {\n    fn deserialize(fields: [Field; 3]) -> Self {\n        Self {\n            operate_blacklist: fields[0] as bool,\n            operate_whitelist: fields[1] as bool,\n            operate_sanctionlist: fields[2] as bool,\n        }\n    }\n}","path":"/Users/gustavecharles/Documents/taurus/private-tokens/src/types/validationModule.nr"},"86":{"source":"use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/authwit/src/auth.nr"},"94":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"101":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"102":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"103":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"104":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"107":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::payload::compute_private_log_payload,\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\n\n/// Computes private note log payload\nfn compute_payload<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n\n    let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n    (payload, note_hash_counter)\n}\n\nunconstrained fn compute_payload_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_payload(context, note, recipient, sender)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let (encrypted_log, note_hash_counter) =\n            compute_payload(*context, e.note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        /// Safety:   Unconstrained logs have both their content and encryption unconstrained - it could occur that\n        /// the recipient is unable to decrypt the payload.\n        ///   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can\n        /// have more than one log and removes all of the matching ones, so all a malicious sender could do is\n        /// either: cause for the log to be deleted when it shouldn't have (which is fine - they can already make\n        /// the content be whatever), or cause for the log to not be deleted when it should have (which is also fine\n        /// - it'll be a log for a note that doesn't exist).\n        ///   It's important here that we do not return the log from this function to the app, otherwise it could\n        /// try to do stuff with it and then that might be wrong.\n        let (encrypted_log, note_hash_counter) =\n            unsafe { compute_payload_unconstrained(*context, e.note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"108":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    point::Point,\n    public_keys::{IvpkM, ToPoint},\n    scalar::Scalar,\n};\n\nuse crate::keys::secret_derivation::derive_aes_secret;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    pub fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    pub fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = derive_aes_secret(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key)\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"110":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, hash::poseidon2_hash,\n    point::Point, public_keys::AddressPoint, scalar::Scalar, utils::arrays::array_concat,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse crate::{\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::secret_derivation::derive_aes_secret,\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::bytes_to_fields, point::point_to_bytes},\n};\n\n// 1 field is reserved for tag.\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n\ncomptime global HEADER_SIZE: u32 = 48;\n\n// Bytes padded to the overhead, so that the size of the incoming body ciphertext will be a multiple of 16.\ncomptime global OVERHEAD_PADDING: u32 = 15;\n\npub comptime global OVERHEAD_SIZE: u32 = 32 /* eph_pk */\n    + HEADER_SIZE /* incoming_header */\n    + OVERHEAD_PADDING /* padding */;\n\nglobal PLAINTEXT_LENGTH_SIZE: u32 = 2;\n\n// This is enough for 8 fields of data.\n// 1 field for storage slot, 1 field for note/event type id, allowing 6 fields for custom values.\nglobal MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\n// Note: Might have to update PRIVATE_LOG_SIZE_IN_FIELDS in `constants.nr` if the above changes.\n// This value ideally should be set by the protocol, allowing users (or `aztec-nr`) to fit data within the defined size limits.\n// Currently, we adjust this value as the structure changes, then update `constants.nr` to match.\n// Once the structure is finalized with defined overhead and max note field sizes, this value will be fixed and should remain unaffected by further payload composition changes.\n\npub fn compute_private_log_payload<let P: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n    assert(\n        P < MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n        f\"plaintext for log must not exceed {MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES}\",\n    );\n\n    let extended_plaintext: [u8; MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] =\n        compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    /// Safety: We assume that the sender wants for the recipient to find the tagged note, and therefore that they\n    /// will cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to\n    /// find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    array_concat([tag], bytes_to_fields(encrypted))\n}\n\n// We return [Field; 1 + (M + 30) / 31], where M is the byte length of output of encryption because\n// each field (apart from the tag) contains 31 bytes so the length in fields is computed as ceil(setup_log_byte_length / 31)\n// --> we achieve rounding by adding 30 and then dividing without remainder, then add one for the 32 byte tag\npub fn compute_partial_public_log_payload<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [Field; 1 + (M + 30) / 31] {\n    let extended_plaintext: [u8; P + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; M] = compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    /// Safety: We assume that the sender wants for the recipient to find the tagged note, and therefore that they\n    /// will cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to\n    /// find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    array_concat([siloed_tag], bytes_to_fields(encrypted))\n}\n\nfn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; HEADER_SIZE] =\n        header.compute_ciphertext(eph_sk, recipient.to_address_point());\n    let incoming_body_ciphertext =\n        compute_incoming_body_ciphertext(plaintext, eph_sk, recipient.to_address_point());\n\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // eph_pk\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = eph_pk_bytes[i];\n    }\n    offset += 32;\n\n    // incoming_header\n    for i in 0..HEADER_SIZE {\n        encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n    }\n    offset += HEADER_SIZE;\n\n    // Padding.\n    offset += OVERHEAD_PADDING;\n\n    // incoming_body\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - offset;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    // Nargo seems to struggle with realizing that `offset` is a constant at this point.\n    // We then redefine it in terms of the assertion above to give nargo a hint.\n    let offset = M - incoming_body_ciphertext.len();\n    for i in 0..size {\n        encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n    }\n\n    encrypted_bytes\n}\n\n// Prepend the plaintext length as the first byte, then copy the plaintext itself starting from the second byte.\n// Fill the remaining bytes with random values to reach a fixed length of N.\nfn extend_private_log_plaintext<let P: u32, let N: u32>(plaintext: [u8; P]) -> [u8; N] {\n    /// Safety: A malicious sender could reveal the whole contents of the encrypted log so trusting it to set\n    /// a random padding in plaintext is fine.\n    let mut padded = unsafe { get_random_bytes() };\n    padded[0] = (P >> 8) as u8;\n    padded[1] = P as u8;\n    for i in 0..P {\n        padded[i + PLAINTEXT_LENGTH_SIZE] = plaintext[i];\n    }\n    padded\n}\n\nunconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    /// Safety: We use the randomness to preserve the privacy of both the sender and recipient via encryption, so\n    /// a malicious sender could use non-random values to reveal the plaintext. But they already know it themselves\n    /// anyway, and so the recipient already trusts them to not disclose this information. We can therefore assume\n    /// that the sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    address_point: AddressPoint,\n) -> [u8; P + 16 - P % 16] {\n    let full_key = derive_aes_secret(eph_sk, address_point.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_incoming_body_ciphertext, compute_private_log_payload,\n        MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use protocol_types::public_keys::AddressPoint;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(\n            (MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES as u64 + 1 + 30) / 31,\n        );\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x008d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701f,\n            0x00a70577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de818923f85187871d99bdf95d695eff0a900000000000000000000000000,\n            0x000000a600a61f7d59eeaf52eb51bc0592ff981d9ba3ea8e6ea8ba9dc0cec8c7,\n            0x000b81e84556a77ce6c3ca47a527f99ffe7b2524bb885a23020b7295748ad19c,\n            0x001083618ad96298b76ee07eb1a56d19cc798710e9f5de96501bd59b3781c9c0,\n            0x002a6c95c5912f8936b1500d362afbf0922c85b1ada18db8b95162a6e9d06765,\n            0x005cdf669eb387f8e0492a95fdcdb39429d5340b4bebc250ba9bf62c2f49f549,\n            0x00f37beed75a668aa51967e0e57547e5a655157bcf381e22f30e25881548ec96,\n            0x0006a151b5fbfb2d14ee4b34bf4c1dbd71c7be15ad4c63474bb6f89970aeb3d9,\n            0x00489c8edbdff80a1a3a5c28370e534abc870a85ea4318326ea19222fb10df35,\n            0x008c765edada497db4284ae30507a2e03e983d23cfa0bd831577e857bbef9cf7,\n            0x0090c97cb5699cc8783a1b4276d929be2882e5b9b72829a4f8404f7e3c853d11,\n            0x00d6d5a000b80134891e95f81007ad35d3945eaeecbe137fff85d01d7eaf8f19,\n            0x00a15eb965c6a4bc97aa87fd3463c31c9d4e0d722a8ba870bcc50c9c7a8b48ad,\n            0x0063c861bdbe490d44c57382decbae663927909652f87ac18dcfd5b30649cce5,\n            0x00820f14caa725efe1fa3485ceac88499eadf0565c5b20998c05931bbf478e68,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let address_point = AddressPoint {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"114":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"121":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"123":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"126":{"source":"use crate::utils::point::point_to_bytes;\nuse dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, point::Point, scalar::Scalar};\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::sha256};\n\npub fn derive_aes_secret(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret = point_to_bytes(multi_scalar_mul([point], [secret]));\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret[i];\n    }\n\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/10537): Replace use of sha256\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_derive_aes_secret_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = derive_aes_secret(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/keys/secret_derivation.nr"},"130":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"139":{"source":"use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |serialized_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(serialized_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::deserialize_content,\n///             note_header,\n///             true,\n///             serialized_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, serialized_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce, storage_slot);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                serialized_note_content,\n                header,\n                note_type_id,\n            )\n                .unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        serialized_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let serialized_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, serialized_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr"},"140":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"142":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"144":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"149":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"150":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(array::subarray(serialized_note, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"152":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"153":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"154":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"155":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"156":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"160":{"source":"use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"161":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"162":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"165":{"source":"use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr"},"166":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"168":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"169":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"172":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"177":{"source":"use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"179":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicImmutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub fn read(self) -> T {\n        let header = self.context.get_block_header();\n        let mut fields = [0; T_PACKED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::unpack(fields)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"180":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"182":{"source":"use dep::protocol_types::traits::Packable;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub(crate) struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub(crate) fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub(crate) fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub(crate) fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub(crate) fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Packable<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn pack(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33)\n            + (self.post.is_some() as u64 * (1 << 32))\n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n\n    fn unpack(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some {\n                Option::some(pre_inner)\n            } else {\n                Option::none()\n            },\n            post: if post_is_some {\n                Option::some(post_inner)\n            } else {\n                Option::none()\n            },\n            block_of_change,\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr"},"184":{"source":"use dep::protocol_types::traits::{FromField, Packable, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub(crate) struct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub(crate) fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub(crate) fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub(crate) fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub(crate) fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub(crate) fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32,\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Packable<3> for ScheduledValueChange<T>\nwhere\n    T: ToField + FromField,\n{\n    fn pack(self) -> [Field; 3] {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n\n    fn unpack(input: [Field; 3]) -> Self {\n        Self {\n            pre: FromField::from_field(input[0]),\n            post: FromField::from_field(input[1]),\n            block_of_change: FromField::from_field(input[2]),\n        }\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr"},"186":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    hash::{poseidon2_hash, poseidon2_hash_with_separator},\n    traits::{FromField, Packable, ToField},\n    utils::arrays::array_concat,\n};\n\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse crate::state_vars::{\n    shared_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    storage::Storage,\n};\nuse dep::std::mem::zeroed;\n\npub(crate) mod scheduled_delay_change;\npub(crate) mod scheduled_value_change;\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// Separators separating storage slot of different values within the same state variable\nglobal VALUE_CHANGE_SEPARATOR: u32 = 0;\nglobal DELAY_CHANGE_SEPARATOR: u32 = 1;\nglobal HASH_SEPARATOR: u32 = 2;\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, let INITIAL_DELAY: u32, Context, let N: u32> Storage<T, N> for SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], VALUE_CHANGE_SEPARATOR)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], DELAY_CHANGE_SEPARATOR)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], HASH_SEPARATOR)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n\n    pub fn schedule_value_change(self, new_value: T) {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change),\n        );\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub fn get_current_value(self) -> T {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_block_number) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon =\n            value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        /// Safety: The hints are checked to be a preimage of a hash obtained from constrained context.\n        let (value_change_hint, delay_change_hint) = unsafe {\n            get_public_storage_hints(address, self.storage_slot, historical_block_number)\n        };\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        if hash != 0 {\n            assert_eq(\n                hash,\n                SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint),\n                \"Hint values do not match hash\",\n            );\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            assert_eq(\n                value_change_hint,\n                ScheduledValueChange::unpack(zeroed()),\n                \"Non-zero value change for zero hash\",\n            );\n            assert_eq(\n                delay_change_hint,\n                ScheduledDelayChange::unpack(zeroed()),\n                \"Non-zero delay change for zero hash\",\n            );\n        };\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>,\n    ) -> Field {\n        let concatenated: [Field; 4] = array_concat(value_change.pack(), delay_change.pack());\n        poseidon2_hash(concatenated)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UnconstrainedContext>\nwhere\n    T: ToField + FromField + Eq,\n{\n    pub unconstrained fn get_current_value(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    unconstrained fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, let INITIAL_DELAY: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>)\nwhere\n    T: ToField + FromField + Eq,\n{\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number),\n        storage_read(address, dummy.get_delay_change_storage_slot(), block_number),\n    )\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable.nr"},"198":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"200":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"201":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"205":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"223":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"235":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\npub struct MaxBlockNumber {\n    _opt: Option<u32>,\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt.is_some() as Field, self._opt.unwrap_unchecked() as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: if serialized[0] as bool {\n                Option::some(serialized[1] as u32)\n            } else {\n                Option::none()\n            },\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"258":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"265":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"280":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"281":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"282":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"283":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"292":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"298":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"299":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"308":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"311":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"324":{"source":"use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"328":{"source":"use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"329":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"345":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"346":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"348":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"353":{"source":"// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n","path":"/Users/gustavecharles/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr"},"358":{"source":"use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Serialize, Deserialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\n/// We implement the Packable trait for FieldCompressedString because it can be stored in contract's storage\n/// (and there the implementation of Packable is required).\nimpl Packable<1> for FieldCompressedString {\n    fn pack(self) -> [Field; 1] {\n        self.serialize()\n    }\n\n    fn unpack(input: [Field; 1]) -> Self {\n        Self::deserialize(input)\n    }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"361":{"source":"use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/uint-note/src/uint_note.nr"},"362":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value;\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"363":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::protocol_types::constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL;\n\npub fn filter_notes_min_sum(\n    notes: [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = U128::from_integer(0);\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < U128::from_integer(min_sum)) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += U128::from_integer(note.value);\n        }\n    }\n\n    selected\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/value-note/src/filter.nr"},"366":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\npub(crate) global VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/gustavecharles/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}